{
  "summary": {
    "table_selection": 630,
    "column_selection": 657,
    "condition_errors": 476,
    "join_errors": 422,
    "aggregation_errors": 81,
    "order_limit_errors": 134,
    "syntax_errors": 922
  },
  "details": {
    "table_selection": [
      {
        "index": 6,
        "question": "Show the name and the release year of the song by the youngest singer.",
        "predicted": "select t2.name, t2.release_year from singer as t1 join song as t2 on t1.song_id = t2.song_id order by t1.age limit 1",
        "gold": "select song_name ,  song_release_year from singer order by age limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 8,
        "question": "What are all distinct countries where singers above age 20 are from?",
        "predicted": "select distinct t1.country from singer as t1 join singer_in_match as t2 on t1.song_id = t2.song_id where t2.age > 20",
        "gold": "select distinct country from singer where age  >  20",
        "db_id": "concert_singer"
      },
      {
        "index": 22,
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "predicted": "select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "gold": "select t2.name ,  count(*) from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id group by t1.stadium_id",
        "db_id": "concert_singer"
      },
      {
        "index": 23,
        "question": "For each stadium, how many concerts play there?",
        "predicted": "select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "gold": "select t2.name ,  count(*) from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id group by t1.stadium_id",
        "db_id": "concert_singer"
      },
      {
        "index": 24,
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "predicted": "select t2.name, t1.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t1.stadium_id order by count(*) desc limit 1",
        "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >=  2014 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 25,
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "predicted": "select t1.name, t1.capacity from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year > 2014 group by t1.stadium_id order by count(*) desc limit 1",
        "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 32,
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "predicted": "select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.club_id where t1.year = 2014",
        "gold": "select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014",
        "db_id": "concert_singer"
      },
      {
        "index": 33,
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "predicted": "select t2.name, t2.theme, count(*) from singer_in_council as t1 join concert as t2 on t1.konzert_id = t2.konzert_id group by t1.konzert_id",
        "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "db_id": "concert_singer"
      },
      {
        "index": 34,
        "question": "What are the names , themes , and number of singers for every concert ?",
        "predicted": "select t1.name, t1.theme, count(*) from singer as t1 join concert as t2 on t1.songid = t2.songid group by t1.songid",
        "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "db_id": "concert_singer"
      },
      {
        "index": 35,
        "question": "List singer names and number of concerts for each singer.",
        "predicted": "select t1.name, count(*) from singer as t1 join concert as t2 on t1.songid = t2.songid group by t1.songid",
        "gold": "select t2.name ,  count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id group by t2.singer_id",
        "db_id": "concert_singer"
      },
      {
        "index": 36,
        "question": "What are the names of the singers and number of concerts for each person?",
        "predicted": "select t2.name, count(*) from singer_in_council as t1 join singer as t2 on t1.songid = t2.songid group by t1.songid",
        "gold": "select t2.name ,  count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id group by t2.singer_id",
        "db_id": "concert_singer"
      },
      {
        "index": 37,
        "question": "List all singer names in concerts in year 2014.",
        "predicted": "select t1.name from singer as t1 join concert as t2 on t1.songid = t2.songid where t2.year = 2014",
        "gold": "select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id join concert as t3 on t1.concert_id  =  t3.concert_id where t3.year  =  2014",
        "db_id": "concert_singer"
      },
      {
        "index": 38,
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "predicted": "select t2.name from concert as t1 join singer as t2 on t1.songid = t2.songid where t1.year = 2014",
        "gold": "select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id join concert as t3 on t1.concert_id  =  t3.concert_id where t3.year  =  2014",
        "db_id": "concert_singer"
      },
      {
        "index": 41,
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "predicted": "select t1.name, t2.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2014 intersect select t1.name, t1.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2015",
        "gold": "select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014 intersect select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2015",
        "db_id": "concert_singer"
      },
      {
        "index": 42,
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "predicted": "select t1.name, t2.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2014 intersect select t1.name, t1.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2015",
        "gold": "select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014 intersect select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2015",
        "db_id": "concert_singer"
      },
      {
        "index": 43,
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "predicted": "select count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id order by t2.capacity desc limit 1",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "db_id": "concert_singer"
      },
      {
        "index": 44,
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "predicted": "select count(*) from stadium order by capacity desc limit 1",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "db_id": "concert_singer"
      },
      {
        "index": 51,
        "question": "Find number of pets owned by students who are older than 20.",
        "predicted": "select count(*) from pets as t1 join has_phone as t2 on t1.phone_id = t2.phone_id where t2.age > 20",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.age  >  20",
        "db_id": "pets_1"
      },
      {
        "index": 52,
        "question": "How many pets are owned by students that have an age greater than 20?",
        "predicted": "select count(*) from pets where age > 20",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.age  >  20",
        "db_id": "pets_1"
      },
      {
        "index": 53,
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "predicted": "select count(*) from pets as t1 join has_phone as t2 on t1.phone_id = t2.phone_id where t2.sex = \"f\"",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t2.petid  =  t3.petid where t1.sex  =  'f' and t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 54,
        "question": "How many dog pets are raised by female students?",
        "predicted": "select count(*) from pets where t2.sex = \"f\"",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t2.petid  =  t3.petid where t1.sex  =  'f' and t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 57,
        "question": "Find the first name of students who have cat or dog pet.",
        "predicted": "select distinct t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" or t2.phone = \"dog\"",
        "gold": "select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' or t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 58,
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "predicted": "select distinct t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" or t2.phone = \"horses\"",
        "gold": "select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' or t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 59,
        "question": "Find the first name of students who have both cat and dog pets .",
        "predicted": "select t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" intersect select t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"dog\"",
        "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 60,
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "predicted": "select t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" intersect select t1.fname from student as t1 join has_horses as t2 on t1.stuid = t2.stuid where t2.horses = \"horses\"",
        "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 63,
        "question": "Find the id of students who do not have a cat pet.",
        "predicted": "select stuid from student except select stuid from has_phone where pets = \"cat\"",
        "gold": "select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 64,
        "question": "What are the ids of the students who do not own cats as pets?",
        "predicted": "select stuid from student except select stuid from has_horses",
        "gold": "select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 65,
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "predicted": "select fname, age from student where stuid not in (select stuid from has_phone)",
        "gold": "select t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 66,
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "predicted": "select fname from student where stuid in (select stuid from has_ pet where pets = \"dog\") except select stuid from has_cat\")",
        "gold": "select t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 75,
        "question": "Find the first name and age of students who have a pet.",
        "predicted": "select distinct t1.fname, t1.age from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"phone\"",
        "gold": "select distinct t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 76,
        "question": "What are the different first names and ages of the students who do have pets?",
        "predicted": "select distinct t1.fname, t1.age from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.pid = \" pets\"",
        "gold": "select distinct t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 77,
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "predicted": "select pet_id from has_phone where lname = 'smith'",
        "gold": "select t2.petid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.lname  =  'smith'",
        "db_id": "pets_1"
      },
      {
        "index": 78,
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "predicted": "select pet_id from has_phone where lname = 'smith'",
        "gold": "select t2.petid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.lname  =  'smith'",
        "db_id": "pets_1"
      },
      {
        "index": 79,
        "question": "Find the number of pets for each student who has any pet and student id.",
        "predicted": "select count(*), t1.stuid from student as t1 join has_phone as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 80,
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "predicted": "select stuid, count(*) from has_phone group by stuid",
        "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 81,
        "question": "Find the first name and gender of student who have more than one pet.",
        "predicted": "select t1.fname, t1.sex from student as t1 join has_phone as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "gold": "select t1.fname ,  t1.sex from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid having count(*)  >  1",
        "db_id": "pets_1"
      },
      {
        "index": 82,
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "predicted": "select t1.fname, t1.sex from student as t1 join has_phone as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "gold": "select t1.fname ,  t1.sex from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid having count(*)  >  1",
        "db_id": "pets_1"
      },
      {
        "index": 83,
        "question": "Find the last name of the student who has a cat that is age 3.",
        "predicted": "select lname from student where age = 3 and stuid = 1",
        "gold": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pet_age  =  3 and t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 84,
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "predicted": "select lname from student where age = 3 and stuid = 1",
        "gold": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pet_age  =  3 and t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 87,
        "question": "How many continents are there?",
        "predicted": "select count(*) from continents",
        "gold": "select count(*) from continents;",
        "db_id": "car_1"
      },
      {
        "index": 88,
        "question": "What is the number of continents?",
        "predicted": "select count(*) from continents",
        "gold": "select count(*) from continents;",
        "db_id": "car_1"
      },
      {
        "index": 89,
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "predicted": "select t1.country, t1.country_name, count(*) from continents as t1 join countries as t2 on t1.country_id = t2.country_id group by t1.country_id",
        "gold": "select t1.contid ,  t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent group by t1.contid;",
        "db_id": "car_1"
      },
      {
        "index": 90,
        "question": "For each continent, list its id, name, and how many countries it has?",
        "predicted": "select t1. continent, t1.country, count(*) from continents as t1 join country as t2 on t1.country_id = t2.country_id group by t1.country_id",
        "gold": "select t1.contid ,  t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent group by t1.contid;",
        "db_id": "car_1"
      },
      {
        "index": 91,
        "question": "How many countries are listed?",
        "predicted": "select count(*) from countries",
        "gold": "select count(*) from countries;",
        "db_id": "car_1"
      },
      {
        "index": 92,
        "question": "How many countries exist?",
        "predicted": "select count(*) from countries",
        "gold": "select count(*) from countries;",
        "db_id": "car_1"
      },
      {
        "index": 93,
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "predicted": "select t1.fname, t1.fname, count(*) from car_makers as t1 join cars as t2 on t1.machine_id = t2.machine_id group by t1.machine_id",
        "gold": "select t1.fullname ,  t1.id ,  count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id;",
        "db_id": "car_1"
      },
      {
        "index": 94,
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "predicted": "select t1.fname, t1.fname, count(*) from car_makers as t1 join model_model as t2 on t1.machine_id = t2.machine_id group by t1.manufacturer_id",
        "gold": "select t1.fullname ,  t1.id ,  count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id;",
        "db_id": "car_1"
      },
      {
        "index": 95,
        "question": "Which model of the car has the minimum horsepower?",
        "predicted": "select model from cars_data order by horsepower limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 96,
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "predicted": "select model from cars_data order by horsepower limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 97,
        "question": "Find the model of the car whose weight is below the average weight.",
        "predicted": "select model from cars where weight  (select avg(weight) from cars)",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.weight  <  (select avg(weight) from cars_data)",
        "db_id": "car_1"
      },
      {
        "index": 98,
        "question": "What is the model for the car with a weight smaller than the average?",
        "predicted": "select model from cars_data where weight  (select avg(weight) from cars)",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.weight  <  (select avg(weight) from cars_data)",
        "db_id": "car_1"
      },
      {
        "index": 99,
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "predicted": "select t1.machine_name from manufacturers as t1 join car_makers as t2 on t1.machine_id = t2.machine_id where t2.year = 1970",
        "gold": "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model join cars_data as t4 on t3.makeid  =  t4.id where t4.year  =  '1970';",
        "db_id": "car_1"
      },
      {
        "index": 100,
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "predicted": "select distinct t2.manufacturer from cars as t1 join car_makers as t2 on t1.model_id = t2.model_id where t1.year = 1970",
        "gold": "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model join cars_data as t4 on t3.makeid  =  t4.id where t4.year  =  '1970';",
        "db_id": "car_1"
      },
      {
        "index": 101,
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "predicted": "select t1.make, t1.model_make from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id order by t2.accelerator_year asc limit 1",
        "gold": "select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);",
        "db_id": "car_1"
      },
      {
        "index": 102,
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "predicted": "select t1.manufacturer, t1.year from manufacturers as t1 join cars_data as t2 on t1.id = t2.machine_id order by t2.accelerator_year asc limit 1",
        "gold": "select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);",
        "db_id": "car_1"
      },
      {
        "index": 103,
        "question": "Which distinct car models are the produced after 1980?",
        "predicted": "select distinct model_model from cars_data where year > 1980",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id where t3.year  >  1980;",
        "db_id": "car_1"
      },
      {
        "index": 104,
        "question": "What are the different models for the cards produced after 1980?",
        "predicted": "select distinct model from model_list where year > 1980",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id where t3.year  >  1980;",
        "db_id": "car_1"
      },
      {
        "index": 105,
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "predicted": "select t1.country_name, count(*) from countries as t1 join carriers as t2 on t1.country_id = t2.country group by t1.country_name",
        "gold": "select t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent join car_makers as t3 on t2.countryid  =  t3.country group by t1.continent;",
        "db_id": "car_1"
      },
      {
        "index": 106,
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "predicted": "select t1.country_name, count(*) from continents as t1 join car_mades as t2 on t1.country_id = t2.country group by t1. continent",
        "gold": "select t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent join car_makers as t3 on t2.countryid  =  t3.country group by t1.continent;",
        "db_id": "car_1"
      },
      {
        "index": 107,
        "question": "Which of the countries has the most car makers? List the country name.",
        "predicted": "select t1.country_name from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_name order by count(*) desc limit 1",
        "gold": "select t2.countryname from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid group by t1.country order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 108,
        "question": "What is the name of the country with the most car makers?",
        "predicted": "select t1.country_name from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_name order by count(*) desc limit 1",
        "gold": "select t2.countryname from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid group by t1.country order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 109,
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "predicted": "select count(*), t1.fname from models as t1 join car_factories as t2 on t1.model_id = t2.model_id group by t1.manufacturer_id",
        "gold": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "db_id": "car_1"
      },
      {
        "index": 110,
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "predicted": "select count(*), t1.fname, t1.fname from models as t1 join car_factories as t2 on t1.model_id = t2.model_id group by t1.manufacturer_id",
        "gold": "select count(*) ,  t2.fullname ,  t2.id from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "db_id": "car_1"
      },
      {
        "index": 111,
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "predicted": "select t1.accelerator from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.machine_name = \"acquired\" and t1.machine_name = \"sw\"",
        "gold": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.make  =  'amc hornet sportabout (sw)';",
        "db_id": "car_1"
      },
      {
        "index": 112,
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "predicted": "select sum(t1.weight) from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.model = 'acquired' and t2.weight = (select sportname from cars_data as t1 join cars as t2 on t1.machine_id = t2.machine_id where t1.machine = 'abrait sportabout')",
        "gold": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.make  =  'amc hornet sportabout (sw)';",
        "db_id": "car_1"
      },
      {
        "index": 113,
        "question": "How many car makers are there in france?",
        "predicted": "select count(*) from car_factories",
        "gold": "select count(*) from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid where t2.countryname  =  'france';",
        "db_id": "car_1"
      },
      {
        "index": 114,
        "question": "What is the number of makers of care in France?",
        "predicted": "select count(*) from car_frances as t1 join countries as t2 on t1.country_id = t2.country_id where t1.country = \"france\"",
        "gold": "select count(*) from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid where t2.countryname  =  'france';",
        "db_id": "car_1"
      },
      {
        "index": 115,
        "question": "How many car models are produced in the usa?",
        "predicted": "select count(*) from car_types",
        "gold": "select count(*) from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id join countries as t3 on t2.country  =  t3.countryid where t3.countryname  =  'usa';",
        "db_id": "car_1"
      },
      {
        "index": 116,
        "question": "What is the count of the car models produced in the United States?",
        "predicted": "select count(*) from car_players where country = \"united states\"",
        "gold": "select count(*) from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id join countries as t3 on t2.country  =  t3.countryid where t3.countryname  =  'usa';",
        "db_id": "car_1"
      },
      {
        "index": 121,
        "question": "What are all the makers and models?",
        "predicted": "select t1.manufacturer, t1.model_model from car_makers as t1 join model_model as t2 on t1.model_id = t2.model_id",
        "gold": "select maker ,  model from model_list;",
        "db_id": "car_1"
      },
      {
        "index": 122,
        "question": "What are the makers and models?",
        "predicted": "select t1.machine, t1.model_model from car_makers as t1 join model_model as t2 on t1.model_id = t2.model_id",
        "gold": "select maker ,  model from model_list;",
        "db_id": "car_1"
      },
      {
        "index": 123,
        "question": "What are the countries having at least one car maker? List name and id.",
        "predicted": "select t1.country, t1.country from countries as t1 join car_factories as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) >= 1",
        "gold": "select t1.countryname ,  t1.countryid from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >=  1;",
        "db_id": "car_1"
      },
      {
        "index": 124,
        "question": "What are the names and ids of all countries with at least one car maker?",
        "predicted": "select t1.country, t1.country_id from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) >= 1",
        "gold": "select t1.countryname ,  t1.countryid from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >=  1;",
        "db_id": "car_1"
      },
      {
        "index": 127,
        "question": "What is the average weight of cars each year?",
        "predicted": "select avg(weight), year from cars group by year",
        "gold": "select avg(weight) ,  year from cars_data group by year;",
        "db_id": "car_1"
      },
      {
        "index": 128,
        "question": "What is the average weight and year for each year?",
        "predicted": "select avg(weight), avg(year), year from vehicles group by year",
        "gold": "select avg(weight) ,  year from cars_data group by year;",
        "db_id": "car_1"
      },
      {
        "index": 129,
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "predicted": "select t1.country from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) >= 3",
        "gold": "select t1.countryname from countries as t1 join continents as t2 on t1.continent  =  t2.contid join car_makers as t3 on t1.countryid  =  t3.country where t2.continent  =  'europe' group by t1.countryname having count(*)  >=  3;",
        "db_id": "car_1"
      },
      {
        "index": 130,
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "predicted": "select t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id where t1.country = \"europea\" group by t1.country_name having count(*) >= 3",
        "gold": "select t1.countryname from countries as t1 join continents as t2 on t1.continent  =  t2.contid join car_makers as t3 on t1.countryid  =  t3.country where t2.continent  =  'europe' group by t1.countryname having count(*)  >=  3;",
        "db_id": "car_1"
      },
      {
        "index": 131,
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "predicted": "select max(t1.machine), max(t1.machine_make) from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.cylinders = 3",
        "gold": "select t2.horsepower ,  t1.make from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 132,
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "predicted": "select max(t1.supplier), t1.model_make from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.number = 3",
        "gold": "select t2.horsepower ,  t1.make from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 133,
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "predicted": "select model_name from cars_data order by horsepower desc limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 134,
        "question": "What is the car model with the highest mpg ?",
        "predicted": "select model_name from cars order by horsepower desc limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 137,
        "question": "What is the average edispl of the cars of model volvo?",
        "predicted": "select avg(t1.edisplled) from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.model = 'volvo'",
        "gold": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t1.model  =  'volvo';",
        "db_id": "car_1"
      },
      {
        "index": 138,
        "question": "What is the average edispl for all volvos?",
        "predicted": "select avg(edisplish) from cars_data",
        "gold": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t1.model  =  'volvo';",
        "db_id": "car_1"
      },
      {
        "index": 141,
        "question": "Which model has the most version(make) of cars?",
        "predicted": "select model_name from cars_data order by count(*) desc limit 1",
        "gold": "select model from car_names group by model order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 142,
        "question": "What model has the most different versions?",
        "predicted": "select model_name from model_lists group by model_name order by count(distinct model_id) desc limit 1",
        "gold": "select model from car_names group by model order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 145,
        "question": "how many cars were produced in 1980?",
        "predicted": "select count(*) from cars where year = 1980",
        "gold": "select count(*) from cars_data where year  =  1980;",
        "db_id": "car_1"
      },
      {
        "index": 147,
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "predicted": "select count(*) from car_makers as t1 join carriers as t2 on t1.machine_id = t2.machine_id where t2.fname = \"american motor company\"",
        "gold": "select count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker where t1.fullname  =  'american motor company';",
        "db_id": "car_1"
      },
      {
        "index": 148,
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "predicted": "select count(*) from car_factories as t1 join carriers as t2 on t1.machine_id = t2.machine_id where t2.maker = \"american motor company\"",
        "gold": "select count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker where t1.fullname  =  'american motor company';",
        "db_id": "car_1"
      },
      {
        "index": 149,
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "predicted": "select t1.fname, t1.fname, t1.machine_id from car_makers as t1 join cars as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) > 3",
        "gold": "select t1.fullname ,  t1.id from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 150,
        "question": "What are the names and ids of all makers with more than 3 models?",
        "predicted": "select t1.fname, t1.facid from car_makers as t1 join model_company as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) > 3",
        "gold": "select t1.fullname ,  t1.id from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 151,
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "predicted": "select distinct t1.model from model_model as t1 join manufacturers as t2 on t1.manufacturer = t2.id where t2.full_name = \"general motors\" or t2.weight > 3500",
        "gold": "select distinct t2.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model join car_makers as t3 on t2.maker  =  t3.id join cars_data as t4 on t1.makeid  =  t4.id where t3.fullname  =  'general motors' or t4.weight  >  3500;",
        "db_id": "car_1"
      },
      {
        "index": 152,
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "predicted": "select distinct t1.model from model_list as t1 join models as t2 on t1.model_id = t2.model_id where t2.name = \"general motors\" or t2.weight > 3500",
        "gold": "select distinct t2.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model join car_makers as t3 on t2.maker  =  t3.id join cars_data as t4 on t1.makeid  =  t4.id where t3.fullname  =  'general motors' or t4.weight  >  3500;",
        "db_id": "car_1"
      },
      {
        "index": 155,
        "question": "What is the horsepower of the car with the largest accelerate?",
        "predicted": "select horsepower from cars_data order by accelerate_year desc limit 1",
        "gold": "select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 156,
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "predicted": "select horsepower from cars_data order by accelerate_year desc limit 1",
        "gold": "select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 157,
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "predicted": "select count(*) from cars_data where model_id = (select model_id from cars_data order by accelerate_year asc limit 1)",
        "gold": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 158,
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "predicted": "select count(*) from cars_data where model = (select model_id from cars_data group by model_id order by count(*) asc limit 1)",
        "gold": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 161,
        "question": "How many countries has more than 2 car makers ?",
        "predicted": "select count(*) from manufacturers group by country having count(*) > 2",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "db_id": "car_1"
      },
      {
        "index": 162,
        "question": "What is the number of countries with more than 2 car makers ?",
        "predicted": "select count(*) from countries where count(*) > 2",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "db_id": "car_1"
      },
      {
        "index": 164,
        "question": "What is the number of carsw ith over 6 cylinders?",
        "predicted": "select count(*) from cars where horsepower > 6",
        "gold": "select count(*) from cars_data where cylinders  >  6;",
        "db_id": "car_1"
      },
      {
        "index": 165,
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "predicted": "select model_name from cars_data where horsepower = 4",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 166,
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "predicted": "select model_name from cars_data order by horsepower desc limit 4",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 167,
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "predicted": "select distinct t1.driver, t1.make_name from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.mpg > 3",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <=  3;",
        "db_id": "car_1"
      },
      {
        "index": 168,
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "predicted": "select t1.machine_id, t1.make_name from cars as t1 join cars_data as t2 on t1.machine_id = t2.machine_id where t1.supplier!= 4",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "db_id": "car_1"
      },
      {
        "index": 169,
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "predicted": "select max(t1.miles_per_year) from cars as t1 join cars_data as t2 on t1.id = t2.driver_id where t2.number = \"8\" or t2.year  1980",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "db_id": "car_1"
      },
      {
        "index": 170,
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "predicted": "select max(t1.mpg) from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t2.machine_year  1980",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "db_id": "car_1"
      },
      {
        "index": 171,
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "predicted": "select model_name from models where weight  3500 except select model_name from model_company where built_name = 'ford motor company'",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id join car_makers as t4 on t1.maker  =  t4.id where t3.weight  <  3500 and t4.fullname != 'ford motor company';",
        "db_id": "car_1"
      },
      {
        "index": 172,
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "predicted": "select distinct model_model from model_list where weight  3500 except select distinct model_model from model_company where manufacturer_name = \"for ford motor company\"",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id join car_makers as t4 on t1.maker  =  t4.id where t3.weight  <  3500 and t4.fullname != 'ford motor company';",
        "db_id": "car_1"
      },
      {
        "index": 173,
        "question": "What are the name of the countries where there is not a single car maker?",
        "predicted": "select country_name from countries where country_id not in (select country_id from car_factories)",
        "gold": "select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country;",
        "db_id": "car_1"
      },
      {
        "index": 174,
        "question": "What are the names of the countries with no car makers?",
        "predicted": "select country_name from countries except select t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id",
        "gold": "select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country;",
        "db_id": "car_1"
      },
      {
        "index": 175,
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "predicted": "select t1.manufacturer_id from car_suppliers as t1 join car_factories as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) >= 2 intersect select t1.machine_id, t1.machine_make from car_suppliers as t1 join car_suppliers as t2 on t1.model_id = t2.model_id group by t1.manufacturer_id having count(*) > 3",
        "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 176,
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "predicted": "select t1.machine_id, t1.machine_make from car_makers as t1 join cars as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) >= 2 intersect select t1.machine_id, t1.machine_make from car_makers as t1 join cars as t2 on t1.model_id = t2.model_id group by t1.machine_model having count(*) > 3",
        "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 177,
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "predicted": "select t1.country, t1.country_name from countries as t1 join car_factories as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) > 3 union select t1.country_id, t1.country_name from countries as t1 join car_factories as t2 on t1.country_id = t2.country_id join model_name from countries as t3 on t2.country = t3.country_id where t3.model = 'fiat'",
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "db_id": "car_1"
      },
      {
        "index": 178,
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "predicted": "select t1.country_id, t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) > 3 union select t1.country_id, t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id group by t1.id having count(*) > 3",
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "db_id": "car_1"
      },
      {
        "index": 179,
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "predicted": "select country from airlines as t1 join airports as t2 on t1.alid = t2.alid where t1.name = \"airline\" and t1.alid = \"blue airways\"",
        "gold": "select country from airlines where airline  =  \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 180,
        "question": "What country is Jetblue Airways affiliated with?",
        "predicted": "select t1.country from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"jilblue airways\"",
        "gold": "select country from airlines where airline  =  \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 207,
        "question": "How many flights depart from City Aberdeen?",
        "predicted": "select count(*) from flights where origin_apid in (select apid from airports where city = \"c aberdeen\")",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 208,
        "question": "Return the number of flights departing from Aberdeen.",
        "predicted": "select count(*) from flights where origin_apid in (select apid from airports where airport = \"aberna\")",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 209,
        "question": "How many flights arriving in Aberdeen city?",
        "predicted": "select count(*) from airports as t1 join flights as t2 on t1.apid = t2.dst_apid where t1.country = 'abern'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 210,
        "question": "Return the number of flights arriving in Aberdeen.",
        "predicted": "select count(*) from flights where destination = 'abern'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 211,
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "predicted": "select count(*) from flights where origin_city = 'aberdeen' and destination = 'ashley'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airports as t3 on t1.sourceairport  =  t3.airportcode where t2.city  =  \"ashley\" and t3.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 212,
        "question": "How many flights fly from Aberdeen to Ashley?",
        "predicted": "select count(*) from flights where dst_apid from airports where airport = \"aberna\" and destination = \"ashley\"",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airports as t3 on t1.sourceairport  =  t3.airportcode where t2.city  =  \"ashley\" and t3.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 213,
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"jetblue airways\"",
        "gold": "select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.uid where t2.airline = \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 214,
        "question": "Give the number of Jetblue Airways flights.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"jilblue airways\"",
        "gold": "select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.uid where t2.airline = \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 215,
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid = 'asy')",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.destairport  =  \"asy\"",
        "db_id": "flight_2"
      },
      {
        "index": 216,
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.name from airlines as t1 join airports as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid in (select t1.alid from airlines as t3 on t1.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid in (select t1.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t1.apid in (select t1.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t1.apid from airlines as t3 join airports as t4 on t3.alid = t4.alid where t4.apid in (select t3.apid from airlines as t4 on t3.alid = t4.alid where t4.apid in (select t3.apid from airlines as t5 on t3.alid = t4.alid where t4.apid in (select t1.apid from airlines as t5 on t3.alid = t4.alid where t4.apid in (select",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.destairport  =  \"asy\"",
        "db_id": "flight_2"
      },
      {
        "index": 217,
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid from airlines as t1 join airlines as t3 on t1.alid = t3.alid where t1.alid = 'ahd'",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 218,
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid join airlines as t3 on t2.alid = t3.alid where t1.alid = 'ahd airport')",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 219,
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "predicted": "select count(*) from airlines where destination = 'aberdeen'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airlines as t3 on t3.uid  =  t1.airline where t2.city  =  \"aberdeen\" and t3.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 220,
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.dst_apid = 'abern'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airlines as t3 on t3.uid  =  t1.airline where t2.city  =  \"aberdeen\" and t3.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 221,
        "question": "Which city has most number of arriving flights?",
        "predicted": "select t1.city from airports as t1 join flights as t2 on t1.apid = t2.apid group by t1.city order by count(*) desc limit 1",
        "gold": "select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 222,
        "question": "Which city has the most frequent destination airport?",
        "predicted": "select city from airports group by city order by count(*) desc limit 1",
        "gold": "select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 223,
        "question": "Which city has most number of departing flights?",
        "predicted": "select t1.city from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.city order by count(*) desc limit 1",
        "gold": "select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 224,
        "question": "Which city is the most frequent source airport?",
        "predicted": "select city from airports group by city order by count(*) desc limit 1",
        "gold": "select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 225,
        "question": "What is the code of airport that has the highest number of flights?",
        "predicted": "select airport_code from flights group by airport_code order by count(*) desc limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 226,
        "question": "What is the airport code of the airport with the most flights?",
        "predicted": "select airport_code from flights group by airport_code order by count(*) desc limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 227,
        "question": "What is the code of airport that has fewest number of flights?",
        "predicted": "select airport_code from flights group by airport_code order by count(*) limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 228,
        "question": "Give the code of the airport with the least flights.",
        "predicted": "select airport_code from flights group by airport_code order by count(*) limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 229,
        "question": "Which airline has most number of flights?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 230,
        "question": "What airline serves the most flights?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 231,
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "predicted": "select t1.amenation, t1.country from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name order by count(*) limit 1",
        "gold": "select t1.abbreviation ,  t1.country from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 232,
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "predicted": "select t1.amenation, t1.country from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.country order by count(*) limit 1",
        "gold": "select t1.abbreviation ,  t1.country from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 233,
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select apid from airlines where airport = 'ahd')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 234,
        "question": "Which airlines have a flight with source airport AHD?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.name from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.src_apid = t2.apid join airlines as t3 on t2.alid = t3.alid where t1.alid = \"ahd\"",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 235,
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid = 'ahd')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.destairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 236,
        "question": "Which airlines have a flight with destination airport AHD?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.dst_apid = t2.apid where t1.apid in (select apid from airlines where airport = 'ahd')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.destairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 237,
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.alid from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.apid from airlines as t3 on t1.apid = t3.apid where t1.apid in (select t1.apid = 'cvo')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\"",
        "db_id": "flight_2"
      },
      {
        "index": 238,
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.name from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.apid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join flights as t4 on t3.alid = t4.alid where t3.apid in (select t1.apid in (select t1.apid from airlines as t3 join airports as t4 on t3.apid = t4.apid where t3.apid in (select t1.apid from airlines as t3 join airlines as t4 on t3.alid = t4.apid where t3.apid in (select t1.apid in (select t3.apid from airlines as t4 on t3.alid = t4.apid where t3.apid in (select t1.apid in (select t1.apid from airlines as t4 on t3.alid = t4.apid where t4.apid in (select t1.apid in (select t1.apid from airlines as t4 on t3.alid = t4.apid where t4.apid in (select t1.apid from airlines as t4 on t3.alid",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\"",
        "db_id": "flight_2"
      },
      {
        "index": 239,
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.alid from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.alid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t3 join airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t4.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t4.apid in (select t3.alid from airlines as t4 on t3.alid =",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 240,
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t1.alid = \"cvo\" except select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.alid = t3.apid where t1.apid in (select t1.alid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.alid = t3.alid where t1.alid = \"apg\")",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 241,
        "question": "Find all airlines that have at least 10 flights.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name having count(*) >= 10",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  >  10",
        "db_id": "flight_2"
      },
      {
        "index": 242,
        "question": "Which airlines have at least 10 flights?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name having count(*) >= 10",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  >  10",
        "db_id": "flight_2"
      },
      {
        "index": 243,
        "question": "Find all airlines that have fewer than 200 flights.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name having count(*)  200",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  <  200",
        "db_id": "flight_2"
      },
      {
        "index": 244,
        "question": "Which airlines have less than 200 flights?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name having count(*)  200",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  <  200",
        "db_id": "flight_2"
      },
      {
        "index": 245,
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "predicted": "select flno from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"airline\" and t1.alid = \"united airlines\"",
        "gold": "select t1.flightno from flights as t1 join airlines as t2 on t2.uid  =  t1.airline where t2.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 246,
        "question": "Which flight numbers correspond to United Airlines flights?",
        "predicted": "select flno from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.alid = \"united airlines\"",
        "gold": "select t1.flightno from flights as t1 join airlines as t2 on t2.uid  =  t1.airline where t2.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 249,
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "predicted": "select t1.flno from flights as t1 join airports as t2 on t1.dst_apid = t2.apid where t2.apid in (select apid from airports as t1 join flights as t2 on t1.apid = t2.dst_apid where t1.apid in (select apid from airports where airport_name = \"apg\")",
        "gold": "select flightno from flights where destairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 251,
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "predicted": "select flno from flights where origin_apid in (select apid from airports where city = \"aberdeen\")",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 252,
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "predicted": "select flno from flights where destination = 'atlanta'",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 253,
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "predicted": "select flno from flights where city = \"aberdeen\"",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.destairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 254,
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "predicted": "select flno from flights where destination = 'atlanta'",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.destairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 255,
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "predicted": "select count(*) from airports as t1 join flights as t2 on t1.apid = t2.dst_apid where t1.city = 'atlanta' or t1.city = 'abilene'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\" or t2.city  =  \"abilene\"",
        "db_id": "flight_2"
      },
      {
        "index": 256,
        "question": "How many flights land in Aberdeen or Abilene?",
        "predicted": "select count(*) from airports as t1 join flights as t2 on t1.apid = t2.src_apid where t1.country = \"aberna\" or t1.country = \"alice\"",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\" or t2.city  =  \"abilene\"",
        "db_id": "flight_2"
      },
      {
        "index": 258,
        "question": "Which airports do not have departing or arriving flights?",
        "predicted": "select airport_name from airports except select dst_apid from flights",
        "gold": "select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "db_id": "flight_2"
      },
      {
        "index": 270,
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "predicted": "select t2.manager_name, t2.district from products as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "gold": "select manager_name ,  district from shop order by number_products desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 277,
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "predicted": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id group by t1.employee_id order by count(*) desc limit 1",
        "gold": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id group by t2.employee_id order by count(*) desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 278,
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "predicted": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id group by t1.employee_id order by count(*) desc limit 1",
        "gold": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id group by t2.employee_id order by count(*) desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 279,
        "question": "Find the name of the employee who got the highest one time bonus.",
        "predicted": "select t1.name from employee as t1 join hiring as t2 on t1.employee_id = t2.employee_id group by t1.employee_id order by count(*) desc limit 1",
        "gold": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id order by t2.bonus desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 280,
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "predicted": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.onscholarship desc limit 1",
        "gold": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id order by t2.bonus desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 284,
        "question": "Which shop has the most employees? Give me the shop name.",
        "predicted": "select t2.name from employees as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "gold": "select t2.name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 287,
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "predicted": "select t2.name, count(*) from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id",
        "gold": "select count(*) ,  t2.name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t2.name",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 288,
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "predicted": "select t1.name, count(*) from shop as t1 join employee as t2 on t1.shop_id = t2.shop_id group by t1.shop_id",
        "gold": "select count(*) ,  t2.name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t2.name",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 303,
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "predicted": "select t1.document_id, t1.document_id, t2.document_description from documents as t1 join documents as t2 on t1.document_id = t2.document_id where t1.document_name = \"robbin cv\"",
        "gold": "select document_id ,  template_id ,  document_description from documents where document_name  =  \"robbin cv\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 307,
        "question": "How many documents are using the template with type code 'PPT'?",
        "predicted": "select count(*) from documents where template_type_code = 'ppt'",
        "gold": "select count(*) from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id where t2.template_type_code  =  'ppt'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 308,
        "question": "Count the number of documents that use the PPT template type.",
        "predicted": "select count(*) from documents where template_type_code = \"ppt\"",
        "gold": "select count(*) from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id where t2.template_type_code  =  'ppt'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 311,
        "question": "What is the id and type code for the template used by the most documents?",
        "predicted": "select t1.document_id, t1.document_type_code from templates as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.template_id ,  t2.template_type_code from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 312,
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "predicted": "select t1.document_id, t1.document_type_code from templates as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.template_id ,  t2.template_type_code from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 316,
        "question": "What are the ids for templates that are not used in any documents?",
        "predicted": "select template_id from templates where template_id not in (select template_id from documents)",
        "gold": "select template_id from templates except select template_id from documents",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 322,
        "question": "What are the different template type codes?",
        "predicted": "select distinct template_type_code from ref_documents",
        "gold": "select distinct template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 327,
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "predicted": "select t1.document_number, t1.document_type_code from templates as t1 join templates as t2 on t1.document_type_code = t2.document_type_code where t1.date_of_date > 5",
        "gold": "select version_number ,  template_type_code from templates where version_number  >  5",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 328,
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "predicted": "select t1.document_number, t1.document_type_code from templates as t1 join templates as t2 on t1. templates_id = t2. templates_id where t1.date_number > 5",
        "gold": "select version_number ,  template_type_code from templates where version_number  >  5",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 336,
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "predicted": "select min(version_number), template_type_code from templates;",
        "gold": "select min(version_number) ,  template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 337,
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "predicted": "select t2.model_type_code from documents as t1 join templates as t2 on t1.document_id = t2.document_id where t1.document_name = \"data base\"",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t2.document_name  =  \"data base\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 338,
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "predicted": "select t2.document_type_code from documents as t1 join templates as t2 on t1.document_id = t2.document_id where t1.document_name = \"data base\"",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t2.document_name  =  \"data base\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 339,
        "question": "Show all document names using templates with template type code BK.",
        "predicted": "select document_name from documents where template_type_code = \"bk\"",
        "gold": "select t2.document_name from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t1.template_type_code  =  \"bk\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 340,
        "question": "What are the names of documents that use templates with the code BK?",
        "predicted": "select document_name from documents where template_id = \"bk\"",
        "gold": "select t2.document_name from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t1.template_type_code  =  \"bk\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 341,
        "question": "Show all template type codes and the number of documents using each type.",
        "predicted": "select template_type_code, count(*) from documents group by template_type_code",
        "gold": "select t1.template_type_code ,  count(*) from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 342,
        "question": "What are the different template type codes, and how many documents use each type?",
        "predicted": "select template_type_code, count(*) from documents group by template_type_code",
        "gold": "select t1.template_type_code ,  count(*) from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 343,
        "question": "Which template type code is used by most number of documents?",
        "predicted": "select template_type_code from documents group by template_type_code order by count(*) desc limit 1",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 344,
        "question": "Return the code of the template type that is most commonly used in documents.",
        "predicted": "select template_type_code from documents group by template_type_code order by count(*) desc limit 1",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 345,
        "question": "Show all template type codes that are not used by any document.",
        "predicted": "select template_type_code from ref_ templates except select template_type_code from documents",
        "gold": "select template_type_code from templates except select template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 346,
        "question": "What are the codes of template types that are not used for any document?",
        "predicted": "select template_type_code from ref_ templates except select template_type_code from documents",
        "gold": "select template_type_code from templates except select template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 347,
        "question": "Show all template type codes and descriptions.",
        "predicted": "select template_type_code, template_type_description from ref_document_types",
        "gold": "select template_type_code ,  template_type_description from ref_template_types",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 348,
        "question": "What are the type codes and descriptions for all template types?",
        "predicted": "select template_type_code, template_type_description from ref_document_types",
        "gold": "select template_type_code ,  template_type_description from ref_template_types",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 349,
        "question": "What is the template type descriptions for template type code \"AD\".",
        "predicted": "select template_type_description from ref_document_types where template_type_code = \"ad\"",
        "gold": "select template_type_description from ref_template_types where template_type_code  =  \"ad\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 350,
        "question": "Return the template type description of the template type with the code AD.",
        "predicted": "select template_type_description from ref_documents where template_type_code = \"ad\"",
        "gold": "select template_type_description from ref_template_types where template_type_code  =  \"ad\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 351,
        "question": "What is the template type code for template type description \"Book\".",
        "predicted": "select template_type_code from ref_model_types where template_type_description = \"book\"",
        "gold": "select template_type_code from ref_template_types where template_type_description  =  \"book\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 352,
        "question": "Return the type code of the template type with the description \"Book\".",
        "predicted": "select template_type_code from ref_ templates where template_type_description = \"book\"",
        "gold": "select template_type_code from ref_template_types where template_type_description  =  \"book\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 353,
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "predicted": "select distinct t1.document_type_description from ref_ templates as t1 join documents as t2 on t1.document_type_code = t2.document_type_code",
        "gold": "select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code join documents as t3 on t2.template_id  =  t3.template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 354,
        "question": "Return the different descriptions for templates that have been used in a document.",
        "predicted": "select distinct template_description from documents",
        "gold": "select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code join documents as t3 on t2.template_id  =  t3.template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 355,
        "question": "What are the template ids with template type description \"Presentation\".",
        "predicted": "select template_id from ref_shipping_types where template_type_description = \"presentation\"",
        "gold": "select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code where t1.template_type_description  =  \"presentation\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 356,
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "predicted": "select template_id from templates where template_description = 'presentation'",
        "gold": "select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code where t1.template_type_description  =  \"presentation\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 359,
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "predicted": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"summer show\"",
        "gold": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'summer show'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 360,
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "predicted": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"summer show\"",
        "gold": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'summer show'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 363,
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "predicted": "select t1.parat_id, t1.title_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"welcome to ny\"",
        "gold": "select t1.paragraph_id ,   t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'welcome to ny'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 364,
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "predicted": "select t1.parat_id, t1.parat_text from paragraphs as t1 join documents as t2 on t1.parat_id = t2.parat_id where t2.document_name = \"welcome to ny\"",
        "gold": "select t1.paragraph_id ,   t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'welcome to ny'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 365,
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "predicted": "select t1.parat_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"customer reviews\"",
        "gold": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  \"customer reviews\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 366,
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "predicted": "select t1.parat_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"customer reviews\"",
        "gold": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  \"customer reviews\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 369,
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "predicted": "select t1.document_id, t1.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "gold": "select t1.document_id ,  t2.document_name ,  count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 370,
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "predicted": "select t1.document_id, t1.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "gold": "select t1.document_id ,  t2.document_name ,  count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 373,
        "question": "What is the document id and name with greatest number of paragraphs?",
        "predicted": "select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.document_id ,  t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 374,
        "question": "Return the id and name of the document with the most paragraphs.",
        "predicted": "select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.document_id ,  t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 378,
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "predicted": "select document_id from documents group by document_id having count(*) between 1 and 2",
        "gold": "select document_id from paragraphs group by document_id having count(*) between 1 and 2",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 380,
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "predicted": "select document_id from documents where paragraph_text like '%brazil%' intersect select document_id from documents where paragraph_text = 'ireland'",
        "gold": "select document_id from paragraphs where paragraph_text  =  'brazil' intersect select document_id from paragraphs where paragraph_text  =  'ireland'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 391,
        "question": "What is the hometown of the youngest teacher?",
        "predicted": "select t2.hometown from course as t1 join teacher as t2 on t1.instructor = t2.instructor_id order by t1.age limit 1",
        "gold": "select hometown from teacher order by age asc limit 1",
        "db_id": "course_teach"
      },
      {
        "index": 392,
        "question": "Where is the youngest teacher from?",
        "predicted": "select t1.name from teacher as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id order by t2.age limit 1",
        "gold": "select hometown from teacher order by age asc limit 1",
        "db_id": "course_teach"
      },
      {
        "index": 393,
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "predicted": "select t2.hometown, count(*) from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.hometown",
        "gold": "select hometown ,  count(*) from teacher group by hometown",
        "db_id": "course_teach"
      },
      {
        "index": 394,
        "question": "For each hometown, how many teachers are there?",
        "predicted": "select t2.hometown, count(*) from instructor as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.hometown",
        "gold": "select hometown ,  count(*) from teacher group by hometown",
        "db_id": "course_teach"
      },
      {
        "index": 398,
        "question": "What are the towns from which at least two teachers come from?",
        "predicted": "select t1.hometown from teacher as t1 join teacher as t2 on t1.instructor_id = t2.instructor_id group by t1.hometown having count(*) >= 2",
        "gold": "select hometown from teacher group by hometown having count(*)  >=  2",
        "db_id": "course_teach"
      },
      {
        "index": 399,
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "predicted": "select t2.name, t1.course_id from course_order as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id",
        "db_id": "course_teach"
      },
      {
        "index": 400,
        "question": "What is the name of each teacher and what course they teach?",
        "predicted": "select t2.name, t1.course_id from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id",
        "db_id": "course_teach"
      },
      {
        "index": 401,
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "predicted": "select t2.name, t1.course_id from course_order as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id order by t2.name asc",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id order by t3.name",
        "db_id": "course_teach"
      },
      {
        "index": 402,
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "predicted": "select t2.name, t1.course_id from course as t1 join teachers as t2 on t1.teacher_id = t2.teacher_id order by t2.name",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id order by t3.name",
        "db_id": "course_teach"
      },
      {
        "index": 403,
        "question": "Show the name of the teacher for the math course.",
        "predicted": "select t2.name from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t1.course_name = \"math\"",
        "gold": "select t3.name from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id where t2.course  =  \"math\"",
        "db_id": "course_teach"
      },
      {
        "index": 404,
        "question": "What are the names of the people who teach math courses?",
        "predicted": "select t2.name from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t1.course_id = 'math'",
        "gold": "select t3.name from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id where t2.course  =  \"math\"",
        "db_id": "course_teach"
      },
      {
        "index": 405,
        "question": "Show names of teachers and the number of courses they teach.",
        "predicted": "select t2.name, count(*) from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id",
        "gold": "select t2.name ,  count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t2.name",
        "db_id": "course_teach"
      },
      {
        "index": 406,
        "question": "What are the names of the teachers and how many courses do they teach?",
        "predicted": "select t2.name, count(*) from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id",
        "gold": "select t2.name ,  count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t2.name",
        "db_id": "course_teach"
      },
      {
        "index": 407,
        "question": "Show names of teachers that teach at least two courses.",
        "predicted": "select t2.name from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id having count(*) >= 2",
        "gold": "select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t2.name having count(*)  >=  2",
        "db_id": "course_teach"
      },
      {
        "index": 408,
        "question": "What are the names of the teachers who teach at least two courses?",
        "predicted": "select t2.name from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id having count(*) >= 2",
        "gold": "select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t2.name having count(*)  >=  2",
        "db_id": "course_teach"
      },
      {
        "index": 411,
        "question": "How many visitors below age 30 are there?",
        "predicted": "select count(*) from customer where age  30",
        "gold": "select count(*) from visitor where age  <  30",
        "db_id": "museum_visit"
      },
      {
        "index": 412,
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "predicted": "select name from customer where level > 4 order by level",
        "gold": "select name from visitor where level_of_membership  >  4 order by level_of_membership desc",
        "db_id": "museum_visit"
      },
      {
        "index": 413,
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "predicted": "select avg(age) from customer where level!= 4",
        "gold": "select avg(age) from visitor where level_of_membership  <=  4",
        "db_id": "museum_visit"
      },
      {
        "index": 414,
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "predicted": "select name, level_of_membership from customer where age > 4 order by age",
        "gold": "select name ,  level_of_membership from visitor where level_of_membership  >  4 order by age desc",
        "db_id": "museum_visit"
      },
      {
        "index": 419,
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "predicted": "select t1.customer_id, t1.name, t1.age from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id group by t1.customer_id having count(*) > 1",
        "gold": "select t1.id ,  t1.name ,  t1.age from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id group by t1.id having count(*)  >  1",
        "db_id": "museum_visit"
      },
      {
        "index": 420,
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "predicted": "select t1.customer_id, t1.name, t2.level from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id group by t1.customer_id order by sum(total_cost_cost) desc limit 1",
        "gold": "select t2.visitor_id ,  t1.name ,  t1.level_of_membership from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id group by t2.visitor_id order by sum(t2.total_spent) desc limit 1",
        "db_id": "museum_visit"
      },
      {
        "index": 421,
        "question": "What are the id and name of the museum visited most times?",
        "predicted": "select t1.museum_id, t1.name from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id group by t1.museum_id order by count(*) desc limit 1",
        "gold": "select t2.museum_id ,  t1.name from museum as t1 join visit as t2 on t1.museum_id  =  t2.museum_id group by t2.museum_id order by count(*) desc limit 1",
        "db_id": "museum_visit"
      },
      {
        "index": 423,
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "predicted": "select t1.name, t1.age from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id group by t1.customer_id order by sum(total_ticket_total) desc limit 1",
        "gold": "select t1.name ,  t1.age from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id order by t2.num_of_ticket desc limit 1",
        "db_id": "museum_visit"
      },
      {
        "index": 425,
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "predicted": "select sum(total_cost_cost) from customer where level = 1",
        "gold": "select sum(t2.total_spent) from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id where t1.level_of_membership  =  1",
        "db_id": "museum_visit"
      },
      {
        "index": 426,
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "predicted": "select t1.name from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id join museum as t3 on t2.museum_id = t3.museum_id where t3.open_year  2009 intersect select t1.name from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id join museum as t3 on t2.museum_id = t3.museum_id where t3.open_year > 2011",
        "gold": "select t1.name from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id join museum as t3 on t3.museum_id  =  t2.museum_id where t3.open_year  <  2009 intersect select t1.name from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id join museum as t3 on t3.museum_id  =  t2.museum_id where t3.open_year  >  2011",
        "db_id": "museum_visit"
      },
      {
        "index": 427,
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "predicted": "select count(*) from customer where customer_id not in (select customer_id from visit where open_year > 2010)",
        "gold": "select count(*) from visitor where id not in (select t2.visitor_id from museum as t1 join visit as t2 on t1.museum_id  =  t2.museum_id where t1.open_year  >  2010)",
        "db_id": "museum_visit"
      },
      {
        "index": 429,
        "question": "Find the total number of players.",
        "predicted": "select count(*) from player",
        "gold": "select count(*) from players",
        "db_id": "wta_1"
      },
      {
        "index": 430,
        "question": "How many players are there?",
        "predicted": "select count(*) from player",
        "gold": "select count(*) from players",
        "db_id": "wta_1"
      },
      {
        "index": 431,
        "question": "Find the total number of matches.",
        "predicted": "select count(*) from matchs",
        "gold": "select count(*) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 432,
        "question": "Count the number of matches.",
        "predicted": "select count(*) from matchs",
        "gold": "select count(*) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 435,
        "question": "Find the average age of losers and winners of all matches.",
        "predicted": "select avg(t1.age), avg(t1.winner) from matches as t1 join match as t2 on t1.player_id = t2.player_id",
        "gold": "select avg(loser_age) ,  avg(winner_age) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 436,
        "question": "What are the average ages of losers and winners across matches?",
        "predicted": "select avg(t1.age), avg(t1.winner) from matches as t1 join match as t2 on t1.match_id = t2.match_id",
        "gold": "select avg(loser_age) ,  avg(winner_age) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 437,
        "question": "Find the average rank of winners in all matches.",
        "predicted": "select avg(rank) from match",
        "gold": "select avg(winner_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 438,
        "question": "What is the average rank for winners in all matches?",
        "predicted": "select avg(rank) from matchs",
        "gold": "select avg(winner_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 439,
        "question": "Find the highest rank of losers in all matches.",
        "predicted": "select rank from players order by rank asc limit 1",
        "gold": "select min(loser_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 440,
        "question": "What is the best rank of losers across all matches?",
        "predicted": "select rank from players order by distance desc limit 1",
        "gold": "select min(loser_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 443,
        "question": "Find the number of distinct name of losers.",
        "predicted": "select count(distinct name) from players",
        "gold": "select count(distinct loser_name) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 444,
        "question": "How many different loser names are there?",
        "predicted": "select count(distinct loser) from match",
        "gold": "select count(distinct loser_name) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 445,
        "question": "Find the name of tourney that has more than 10 matches.",
        "predicted": "select t1.name from tourneys as t1 join matchs as t2 on t1.tournament_id = t2.tournament_id group by t2.tournament_name having count(*) > 10",
        "gold": "select tourney_name from matches group by tourney_name having count(*)  >  10",
        "db_id": "wta_1"
      },
      {
        "index": 446,
        "question": "What are the names of tournaments that have more than 10 matches?",
        "predicted": "select t2.name from matches as t1 join tournaments as t2 on t1.tournament_id = t2.tournament_id group by t2.name having count(*) > 10",
        "gold": "select tourney_name from matches group by tourney_name having count(*)  >  10",
        "db_id": "wta_1"
      },
      {
        "index": 447,
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "predicted": "select t2.winner_name from rankings as t1 join team as t2 on t1.team = t2.team_id where t1.year = 2014 intersect select t2.winner_name from rankings as t1 join matches as t2 on t1.winning_id = t2.winning_id where t1.year = 2016",
        "gold": "select winner_name from matches where year  =  2013 intersect select winner_name from matches where year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 448,
        "question": "What are the names of players who won in both 2013 and 2016?",
        "predicted": "select t2.name from rankings as t1 join player as t2 on t1.player_id = t2.player_id where t1.year = 2013 intersect select t2.name from rankings as t1 join players as t2 on t1.player_id = t2.player_id where t1.year = 2016",
        "gold": "select winner_name from matches where year  =  2013 intersect select winner_name from matches where year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 449,
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "predicted": "select count(*) from matchs where year = 2013 or year = 2016",
        "gold": "select count(*) from matches where year  =  2013 or year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 450,
        "question": "How many matches were played in 2013 or 2016?",
        "predicted": "select count(*) from matchs where year = 2013 or year = 2016",
        "gold": "select count(*) from matches where year  =  2013 or year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 451,
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "predicted": "select t1.country_code, t1.first_name from players as t1 join matchs as t2 on t1.player_id = t2.player_id where t2.winning_name = \"australia open\" intersect select t1.country_code, t1.winning_name from players as t1 join matchs as t2 on t1.player_id = t2.player_id where t2.winning_year = \"tournament\"",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'wta championships' intersect select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'australian open'",
        "db_id": "wta_1"
      },
      {
        "index": 452,
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "predicted": "select t2.first_name, t2.country_code from ratings as t1 join players as t2 on t1.player_id = t2.player_id where t1.rank = \"wta championship\" intersect select t2.first_name, t1.country_code from ratings as t1 join matches as t2 on t1.winning_id = t2.winning_id where t1.name = \"australia open\"",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'wta championships' intersect select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'australian open'",
        "db_id": "wta_1"
      },
      {
        "index": 453,
        "question": "Find the first name and country code of the oldest player.",
        "predicted": "select firstname, country_code from player order by age desc limit 1",
        "gold": "select first_name ,  country_code from players order by birth_date limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 454,
        "question": "What is the first name and country code of the oldest player?",
        "predicted": "select firstname, country_code from player order by age desc limit 1",
        "gold": "select first_name ,  country_code from players order by birth_date limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 459,
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "predicted": "select t2.first_name, t2.country_code from ratings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 460,
        "question": "What is the first name and country code of the player with the most tours?",
        "predicted": "select t2.first_name, t2.country_code from performances as t1 join player as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 461,
        "question": "Find the year that has the most number of matches.",
        "predicted": "select year from matchs group by year order by count(*) desc limit 1",
        "gold": "select year from matches group by year order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 462,
        "question": "Which year had the most matches?",
        "predicted": "select year from matchs group by year order by count(*) desc limit 1",
        "gold": "select year from matches group by year order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 463,
        "question": "Find the name and rank points of the winner who won the most times.",
        "predicted": "select t2.name, t2.rank_points from rankings as t1 join match as t2 on t1.tournament_id = t2.winner_id group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name ,  winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 464,
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "predicted": "select t2.winning_name, count(*) from rankings as t1 join team as t2 on t1.team_id = t2.team_id group by t1.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name ,  winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 465,
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "predicted": "select t2.winning_name from rankings as t1 join match as t2 on t1.winning_id = t2.winning_id where t1.country = \"australia open open\" group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 466,
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "predicted": "select t2.winning_name from rankings as t1 join results as t2 on t1.winning_id = t2.winning_id where t1.country = \"australia open open\" group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 467,
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "predicted": "select t2.winning_name, t2.winning_name from matches as t1 join players as t2 on t1.match_id = t2.match_id group by t2.winning_r order by sum(t1.minutes) desc limit 1",
        "gold": "select winner_name ,  loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 468,
        "question": "What are the names of the winner and loser who played in the longest match?",
        "predicted": "select t2.winning_name, t2.loser_r = t1.winning_r where t2.year = (select max(year) from matches)",
        "gold": "select winner_name ,  loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 469,
        "question": "Find the average ranking for each player and their first name.",
        "predicted": "select avg(t1.ranking_points), t2.first_name from ratings as t1 join players as t2 on t1.player_id = t2.player_id group by t2.name",
        "gold": "select avg(ranking) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 470,
        "question": "What are the first names of all players, and their average rankings?",
        "predicted": "select t2.first_name, t2.last_name, avg(t1.ranking_points) from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "gold": "select avg(ranking) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 471,
        "question": "Find the total ranking points for each player and their first name.",
        "predicted": "select t1.ranking_points, t2.first_name from rankings as t1 join players as t2 on t1.player_id = t2.player_id",
        "gold": "select sum(ranking_points) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 472,
        "question": "What are the first names of all players, and their total ranking points?",
        "predicted": "select t2.first_name, t2.ranked_points from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "gold": "select sum(ranking_points) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 473,
        "question": "find the number of players for each country.",
        "predicted": "select count(*), country_code from player group by country_code",
        "gold": "select count(*) ,  country_code from players group by country_code",
        "db_id": "wta_1"
      },
      {
        "index": 474,
        "question": "How many players are from each country?",
        "predicted": "select country_code, count(*) from player group by country_code",
        "gold": "select count(*) ,  country_code from players group by country_code",
        "db_id": "wta_1"
      },
      {
        "index": 475,
        "question": "find the code of the country where has the greatest number of players.",
        "predicted": "select country_code from player group by country_code order by count(*) desc limit 1",
        "gold": "select country_code from players group by country_code order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 476,
        "question": "What is the code of the country with the most players?",
        "predicted": "select country_code from player group by country_code order by count(*) desc limit 1",
        "gold": "select country_code from players group by country_code order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 477,
        "question": "Find the codes of countries that have more than 50 players.",
        "predicted": "select country_code from player group by country_code having count(*) > 50",
        "gold": "select country_code from players group by country_code having count(*)  >  50",
        "db_id": "wta_1"
      },
      {
        "index": 478,
        "question": "What are the codes of countries with more than 50 players?",
        "predicted": "select country_code from player group by country_code having count(*) > 50",
        "gold": "select country_code from players group by country_code having count(*)  >  50",
        "db_id": "wta_1"
      },
      {
        "index": 479,
        "question": "Find the total number of tours for each ranking date.",
        "predicted": "select ranking_date, count(*) from courses group by ranking_date",
        "gold": "select sum(tours) ,  ranking_date from rankings group by ranking_date",
        "db_id": "wta_1"
      },
      {
        "index": 480,
        "question": "How many total tours were there for each ranking date?",
        "predicted": "select ranking_date, count(*) from courses group by ranking_date",
        "gold": "select sum(tours) ,  ranking_date from rankings group by ranking_date",
        "db_id": "wta_1"
      },
      {
        "index": 481,
        "question": "Find the number of matches happened in each year.",
        "predicted": "select count(*), year from matchs group by year",
        "gold": "select count(*) ,  year from matches group by year",
        "db_id": "wta_1"
      },
      {
        "index": 482,
        "question": "How many matches were played in each year?",
        "predicted": "select count(*), year from matchs group by year",
        "gold": "select count(*) ,  year from matches group by year",
        "db_id": "wta_1"
      },
      {
        "index": 483,
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "predicted": "select t2.winning_name, t2.rank from matches as t1 join players as t2 on t1.player_id = t2.player_id order by t1.age limit 3",
        "gold": "select distinct winner_name ,  winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1"
      },
      {
        "index": 484,
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "predicted": "select t2.winner_name, t2.rank from matches as t1 join rankings as t2 on t1.winning_id = t2.winning_id order by t1.age limit 3",
        "gold": "select distinct winner_name ,  winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1"
      },
      {
        "index": 485,
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "predicted": "select count(*) from matchs where class = \"wta championship\" intersect select count(*) from wins where class = \"left\"",
        "gold": "select count(distinct winner_name) from matches where tourney_name  =  'wta championships' and winner_hand  =  'l'",
        "db_id": "wta_1"
      },
      {
        "index": 486,
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "predicted": "select count(*) from matchs where t2.winning_name = \"left\" and t1.year = \"wta championships\"",
        "gold": "select count(distinct winner_name) from matches where tourney_name  =  'wta championships' and winner_hand  =  'l'",
        "db_id": "wta_1"
      },
      {
        "index": 487,
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "predicted": "select t2.first_name, t1.country_code, t2.birth_name from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select t1.first_name ,  t1.country_code ,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 488,
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "predicted": "select t2.first_name, t1.country_code, t2.birthday from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.first_name ,  t1.country_code ,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 489,
        "question": "Find the number of players for each hand type.",
        "predicted": "select hand_type, count(*) from player group by hand_type",
        "gold": "select count(*) ,  hand from players group by hand",
        "db_id": "wta_1"
      },
      {
        "index": 490,
        "question": "How many players are there for each hand type?",
        "predicted": "select hand_type, count(*) from player group by hand_type",
        "gold": "select count(*) ,  hand from players group by hand",
        "db_id": "wta_1"
      },
      {
        "index": 496,
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "predicted": "select t1.death, t1.injury from death as t1 join ship as t2 on t1.ship_id = t2.ship_id where t2.tonnage!= \"tonnage\"",
        "gold": "select t1.killed ,  t1.injured from death as t1 join ship as t2 on t1.caused_by_ship_id  =  t2.id where t2.tonnage  =  't'",
        "db_id": "battle_death"
      },
      {
        "index": 497,
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "predicted": "select name, t1.result from battle as t1 join commander as t2 on t1.armed = t2.armed where t2.kompetition!= 'boril'",
        "gold": "select name ,  result from battle where bulgarian_commander != 'boril'",
        "db_id": "battle_death"
      },
      {
        "index": 498,
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "predicted": "select distinct t1.id, t2.name from ship as t1 join death as t2 on t1.id = t2.ship_id where t1.type = 'brig'",
        "gold": "select distinct t1.id ,  t1.name from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.ship_type  =  'brig'",
        "db_id": "battle_death"
      },
      {
        "index": 499,
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "predicted": "select t1.id, t2.name from death as t1 join ship as t2 on t1.ship_id = t2.id group by t1.ship_id having count(*) > 10",
        "gold": "select t1.id ,  t1.name from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle join death as t3 on t2.id  =  t3.caused_by_ship_id group by t1.id having sum(t3.killed)  >  10",
        "db_id": "battle_death"
      },
      {
        "index": 500,
        "question": "What is the ship id and name that caused most total injuries?",
        "predicted": "select t1.ship_id, t1.name from ship as t1 join death as t2 on t1.ship_id = t2.ship_id group by t2.ship_id order by sum(t2.injury) desc limit 1",
        "gold": "select t2.id ,  t2.name from death as t1 join ship as t2 on t1.caused_by_ship_id  =  t2.id group by t2.id order by count(*) desc limit 1",
        "db_id": "battle_death"
      },
      {
        "index": 501,
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "predicted": "select distinct t2.name from rank as t1 join battle as t2 on t1.film_id = t2.baldwin i'",
        "gold": "select name from battle where bulgarian_commander  =  'kaloyan' and latin_commander  =  'baldwin i'",
        "db_id": "battle_death"
      },
      {
        "index": 503,
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "predicted": "select count(*) from ship where id not in ( select ship_id from death where tonnage = 225 )",
        "gold": "select count(*) from battle where id not in ( select lost_in_battle from ship where tonnage  =  '225' );",
        "db_id": "battle_death"
      },
      {
        "index": 504,
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "predicted": "select t2.name, t2.date from ship as t1 join death as t2 on t1.id = t2.ship_id join ship as t3 on t2.ship_id = t3.id where t1.name = 'lettice' and t2.name = 'hms atalanta'",
        "gold": "select t1.name ,  t1.date from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.name  =  'lettice' intersect select t1.name ,  t1.date from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.name  =  'hms atalanta'",
        "db_id": "battle_death"
      },
      {
        "index": 505,
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "predicted": "select name, results, bulgarian commander from battle where ship_id not in (select ship_id from death where location = 'english channel')",
        "gold": "select name ,  result ,  bulgarian_commander from battle except select t1.name ,  t1.result ,  t1.bulgarian_commander from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.location  =  'english channel'",
        "db_id": "battle_death"
      },
      {
        "index": 515,
        "question": "Which department offers the most number of degrees? List department name and id.",
        "predicted": "select t2.dept_name, t1.dept_id from degrees as t1 join departments as t2 on t1.dept_name = t2.dept_id group by t1.dept_name order by count(*) desc limit 1",
        "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 516,
        "question": "What is the name and id of the department with the most number of degrees ?",
        "predicted": "select dept_name, dept_id from degrees group by dept_name order by count(*) desc limit 1",
        "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 517,
        "question": "How many departments offer any degree?",
        "predicted": "select count(distinct dept_name) from degrees",
        "gold": "select count(distinct department_id) from degree_programs",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 518,
        "question": "How many different departments offer degrees?",
        "predicted": "select count(distinct dept_name) from degrees",
        "gold": "select count(distinct department_id) from degree_programs",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 520,
        "question": "How many different degrees are offered?",
        "predicted": "select count(distinct degrees) from student_programs",
        "gold": "select count(distinct degree_summary_name) from degree_programs",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 521,
        "question": "How many degrees does the engineering department offer?",
        "predicted": "select count(*) from departments as t1 join degrees as t2 on t1.dept_name = t2.dept_name where dept_name = \"engineer\"",
        "gold": "select count(*) from departments as t1 join degree_programs as t2 on t1.department_id  =  t2.department_id where t1.department_name  =  'engineer'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 522,
        "question": "How many degrees does the engineering department have?",
        "predicted": "select count(*) from departments as t1 join degrees as t2 on t1.dept_name = t2.dept_name where dept_name = \"engineer\"",
        "gold": "select count(*) from departments as t1 join degree_programs as t2 on t1.department_id  =  t2.department_id where t1.department_name  =  'engineer'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 525,
        "question": "What are the names and id of courses having at most 2 sections?",
        "predicted": "select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) = 2",
        "gold": "select t1.course_name ,  t1.course_id from courses as t1 join sections as t2 on t1.course_id  =  t2.course_id group by t1.course_id having count(*)  <=  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 526,
        "question": "What are the names and ids of every course with less than 2 sections?",
        "predicted": "select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*)  2",
        "gold": "select t1.course_name ,  t1.course_id from courses as t1 join sections as t2 on t1.course_id  =  t2.course_id group by t1.course_id having count(*)  <=  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 529,
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "predicted": "select semester_name, semester_id from student_enrolment group by semester_id order by count(*) desc limit 1",
        "gold": "select t1.semester_name ,  t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id  =  t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 530,
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "predicted": "select t2.semester_name, t1.semester_id from student_enrolment as t1 join semesters as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "gold": "select t1.semester_name ,  t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id  =  t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 533,
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name, t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) = 2",
        "gold": "select t1.first_name ,  t1.middle_name ,  t1.last_name ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id having count(*)  =  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 534,
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) = 2",
        "gold": "select t1.first_name ,  t1.middle_name ,  t1.last_name ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id having count(*)  =  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 535,
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t2.degree_code = 'boston red stockings'",
        "gold": "select distinct t1.first_name ,  t1.middle_name ,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id join degree_programs as t3 on t2.degree_program_id  =  t3.degree_program_id where t3.degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 536,
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t2.student_id = 'boston red stockings'",
        "gold": "select distinct t1.first_name ,  t1.middle_name ,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id join degree_programs as t3 on t2.degree_program_id  =  t3.degree_program_id where t3.degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 537,
        "question": "Find the kind of program which most number of students are enrolled in?",
        "predicted": "select t1.type from courses as t1 join student_enrolment as t2 on t1.course_id = t2.course_id group by t1.type order by count(*) desc limit 1",
        "gold": "select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 538,
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "predicted": "select t1.degree from degrees as t1 join student_enrolment as t2 on t1.degree_id = t2.degree_id group by t1.degree_high_name order by count(*) desc limit 1",
        "gold": "select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 539,
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "predicted": "select t1.programm_id, t1.course_name from degrees as t1 join student_enrolment as t2 on t1.course_id = t2.course_id group by t1.course_id order by count(*) desc limit 1",
        "gold": "select t1.degree_program_id ,  t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 540,
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "predicted": "select t1.degree_program_id, t1.degree_surname from degrees as t1 join student_enrolment as t2 on t1.degree_id = t2.degree_id group by t1.degree_id order by count(*) desc limit 1",
        "gold": "select t1.degree_program_id ,  t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 541,
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "predicted": "select t1.student_id, t1.first_name, t1.last_name, count(*), t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "gold": "select t1.student_id ,  t1.first_name ,  t1.middle_name ,  t1.last_name ,  count(*) ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 542,
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name, count(*) from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "gold": "select t1.student_id ,  t1.first_name ,  t1.middle_name ,  t1.last_name ,  count(*) ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 545,
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "predicted": "select t1.course_name from courses as t1 join student_course_enrolment as t2 on t1.course_id = t2.course_id",
        "gold": "select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 546,
        "question": "What are the names of all courses that have some students enrolled?",
        "predicted": "select t1.course_name from courses as t1 join student_enrolment as t2 on t1.course_id = t2.course_id",
        "gold": "select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 547,
        "question": "What's the name of the course with most number of enrollments?",
        "predicted": "select t1.course_name from courses as t1 join student_enrolment as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "gold": "select  t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 548,
        "question": "What is the name of the course with the most students enrolled?",
        "predicted": "select t1.course_name from courses as t1 join student_enrolment as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "gold": "select  t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 549,
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "predicted": "select t1.last_name from students as t1 join student_enrolment as t2 on t1.address_id = t2.address_id where t2.state_province_county = \"north carolina\" except select t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id",
        "gold": "select t1.last_name from students as t1 join addresses as t2 on t1.current_address_id  =  t2.address_id where t2.state_province_county  =  'northcarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id  =  t4.student_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 550,
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "predicted": "select t1.last_name from students as t1 join student_enrolment as t2 on t1.address_id = t2.address_id where t1.state_province_county = \"north carolina\" except select t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id",
        "gold": "select t1.last_name from students as t1 join addresses as t2 on t1.current_address_id  =  t2.address_id where t2.state_province_county  =  'northcarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id  =  t4.student_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 551,
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_enrolment as t2 on t1.cript_id = t2.course_id group by t1.cript_id having count(*) >= 2",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id having count(*)  >=  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 552,
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_course_contents as t2 on t1.cript_id = t2.cript_id group by t1.cript_id having count(*) >= 2",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id having count(*)  >=  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 554,
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "predicted": "select t2.mobile_number from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t1.first_name = \"tilmothy ward\"",
        "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 555,
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_first_registered asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 556,
        "question": "What is the first, middle, and last name of the first student to register?",
        "predicted": "select t2.first_name, t2.middle_name, t2.last_name from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id order by t1.date_registration_date asc limit 1",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_first_registered asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 557,
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id order by t2.date_undergraduated limit 1",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_left asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 560,
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "predicted": "select t1.first_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id",
        "gold": "select first_name from students where current_address_id != permanent_address_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 561,
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "predicted": "select t1.address_id, t1.line_1 from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.address_id group by t1.address_id order by count(*) desc limit 1",
        "gold": "select t1.address_id ,  t1.line_1 ,  t1.line_2 from addresses as t1 join students as t2 on t1.address_id  =  t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 562,
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "predicted": "select t1.address_id, t1.line_1, t1.line_2 from addresses as t1 join student_enrolments as t2 on t1.address_id = t2.address_id group by t1.address_id order by count(*) desc limit 1",
        "gold": "select t1.address_id ,  t1.line_1 ,  t1.line_2 from addresses as t1 join students as t2 on t1.address_id  =  t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 565,
        "question": "When is the first transcript released? List the date and details.",
        "predicted": "select t1.date, t1.other_details from transcripts as t1 join student_enrolment as t2 on t1.journal_id = t2.journal_id order by t1.date asc limit 1",
        "gold": "select transcript_date ,  other_details from transcripts order by transcript_date asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 566,
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "predicted": "select t1.date, t1.other_details from transcripts as t1 join transcript_contents as t2 on t1.cript_id = t2.transaction_id order by t1.date asc limit 1",
        "gold": "select transcript_date ,  other_details from transcripts order by transcript_date asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 569,
        "question": "What is the last transcript release date?",
        "predicted": "select t1.transaction_date from transcripts as t1 join transcript_contents as t2 on t1.transaction_id = t2.transaction_id",
        "gold": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 571,
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "predicted": "select count(*), student_course_id from student_enrolment group by student_course_id order by count(*) desc limit 1",
        "gold": "select count(*) ,  student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 572,
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "predicted": "select t1.student_course_id, count(*) from student_course_enrolment as t1 join student_enrolment as t2 on t1.student_course_id = t2.course_id group by t1.course_id order by count(*) desc limit 1",
        "gold": "select count(*) ,  student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 573,
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_contents as t2 on t1.cript_id = t2.cript_id group by t1.cript_id order by count(*) asc limit 1",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 574,
        "question": "What is the date and id of the transcript with the least number of results?",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_enrolment as t2 on t1.cript_id = t2.course_id group by t1.cript_id order by count(*) asc limit 1",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 575,
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "predicted": "select semester from student_enrolment where student_id = 'm' intersect select semester from student_enrolment where student_id = 'birth'",
        "gold": "select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 576,
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "predicted": "select semester_id from student_enrolment where student_id = 'm' intersect select semester_id from student_enrolment where student_id = 'birth'",
        "gold": "select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 578,
        "question": "What are the different addresses that have students living there?",
        "predicted": "select distinct t1.address_id from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.address_id",
        "gold": "select count(distinct current_address_id) from students",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 579,
        "question": "List all the student details in reversed lexicographical order.",
        "predicted": "select * from student_details order by student_details desc",
        "gold": "select other_student_details from students order by other_student_details desc",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 583,
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "predicted": "select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t2.country = \"hafghanistan\" union select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t2.country = \"hapan\" and t1.number = \"09700166842\"",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 584,
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "predicted": "select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t1.country = \"hapanese\" union select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t2.city = \"09700\"",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 595,
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "predicted": "select country, count(*) from television_channel group by country order by count(*) desc limit 1",
        "gold": "select country ,  count(*) from tv_channel group by country order by count(*) desc limit 1;",
        "db_id": "tvshow"
      },
      {
        "index": 596,
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "predicted": "select country, count(*) from channel group by country order by count(*) desc limit 1",
        "gold": "select country ,  count(*) from tv_channel group by country order by count(*) desc limit 1;",
        "db_id": "tvshow"
      },
      {
        "index": 597,
        "question": "List the number of different series names and contents in the TV Channel table.",
        "predicted": "select count(distinct t1.series_name), count(distinct t1.contents) from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.title = \"tv channel\"",
        "gold": "select count(distinct series_name) ,  count(distinct content) from tv_channel;",
        "db_id": "tvshow"
      },
      {
        "index": 598,
        "question": "How many different series and contents are listed in the TV Channel table?",
        "predicted": "select count(distinct t1.series_name), count(distinct t1.contents) from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.title = \"tv channel\"",
        "gold": "select count(distinct series_name) ,  count(distinct content) from tv_channel;",
        "db_id": "tvshow"
      },
      {
        "index": 600,
        "question": "What is the content of the series Sky Radio?",
        "predicted": "select content from t1.content where t1.title = \"c sky radio\"",
        "gold": "select content from tv_channel where series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 601,
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "predicted": "select package_option from t1.platform where t1.title = \"tv channel\" and t1.series_name = \"sky radio\"",
        "gold": "select package_option from tv_channel where series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 602,
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "predicted": "select t1.paket_option from t1.paket_option as t1 join t1.channel as t2 on t1.id = t2.channel_id join series as t3 on t1.series_id = t3.id where t3.series_name = \"c sky radio\"",
        "gold": "select package_option from tv_channel where series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 603,
        "question": "How many TV Channel using language English?",
        "predicted": "select count(*) from t1.language",
        "gold": "select count(*) from tv_channel where language = \"english\";",
        "db_id": "tvshow"
      },
      {
        "index": 604,
        "question": "How many TV Channels use the English language?",
        "predicted": "select count(*) from t1.language",
        "gold": "select count(*) from tv_channel where language = \"english\";",
        "db_id": "tvshow"
      },
      {
        "index": 605,
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "predicted": "select language, count(*) from television_channel group by language order by count(*) asc limit 1",
        "gold": "select language ,  count(*) from tv_channel group by language order by count(*) asc limit 1;",
        "db_id": "tvshow"
      },
      {
        "index": 606,
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "predicted": "select languages, count(*) from channel group by languages order by count(*) asc limit 1",
        "gold": "select language ,  count(*) from tv_channel group by language order by count(*) asc limit 1;",
        "db_id": "tvshow"
      },
      {
        "index": 607,
        "question": "List each language and the number of TV Channels using it.",
        "predicted": "select language, count(*) from television_channel group by languages",
        "gold": "select language ,  count(*) from tv_channel group by language",
        "db_id": "tvshow"
      },
      {
        "index": 608,
        "question": "For each language, list the number of TV Channels that use it.",
        "predicted": "select language, count(*) from television_channel group by languages",
        "gold": "select language ,  count(*) from tv_channel group by language",
        "db_id": "tvshow"
      },
      {
        "index": 609,
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "predicted": "select t2.series_name from cartoon as t1 join t1.series as t2 on t1.id = t2.series_id join tv_channel as t3 on t1.id = t3.channel_id where t1.title = \"the rise of the blue beetle\"",
        "gold": "select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"the rise of the blue beetle!\";",
        "db_id": "tvshow"
      },
      {
        "index": 610,
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "predicted": "select t1.series_name from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id join cartoon as t3 on t2.characteristic_id = t3.id where t3.title = \"the rise of the blue beetle\"",
        "gold": "select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"the rise of the blue beetle!\";",
        "db_id": "tvshow"
      },
      {
        "index": 611,
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "predicted": "select t1.title from cartoon as t1 join t1.characteristic as t2 on t1.id = t2.characteristic_id join series as t3 on t2.series_id = t3.id where t3.series_name = \"sky radio\"",
        "gold": "select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 612,
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "predicted": "select t3.title from television as t1 join t1.series as t2 on t1.id = t2.station_id join cartoon as t3 on t1.series_id = t3.id where t1.series_name = \"ttv channel\" and t1.series_name = \"sky radio\"",
        "gold": "select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 614,
        "question": "What are all of the episodes ordered by ratings?",
        "predicted": "select * from episode order by rating",
        "gold": "select episode from tv_series order by rating",
        "db_id": "tvshow"
      },
      {
        "index": 616,
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "predicted": "select having count(*), t1.rating from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id where t2.title = \"tv series\" group by t1.id order by count(*) desc limit 3",
        "gold": "select episode ,  rating from tv_series order by rating desc limit 3;",
        "db_id": "tvshow"
      },
      {
        "index": 617,
        "question": "What is minimum and maximum share of TV series?",
        "predicted": "select min(share_times), max(share_times) from t1.series",
        "gold": "select max(share) , min(share) from tv_series;",
        "db_id": "tvshow"
      },
      {
        "index": 618,
        "question": "What is the maximum and minimum share for the TV series?",
        "predicted": "select max(share_time), min(share_time_staff) from t1.series",
        "gold": "select max(share) , min(share) from tv_series;",
        "db_id": "tvshow"
      },
      {
        "index": 619,
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "predicted": "select t2.airport_date from tv_series as t1 join series as t2 on t1.series_id = t2.id where t1.title = \"a love of a lifetime\"",
        "gold": "select air_date from tv_series where episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 620,
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "predicted": "select date from aircraft where title = \"a love of a lifetime\"",
        "gold": "select air_date from tv_series where episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 622,
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "predicted": "select weekly_rank from episode where episode = \"a love of a lifetime\"",
        "gold": "select weekly_rank from tv_series where episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 623,
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "predicted": "select t2.platform_name from episodes as t1 join tv_channel as t2 on t1.id = t2.tv_channel_id where t1.title = \"a love of a lifetime\"",
        "gold": "select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 624,
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "predicted": "select t2.series_name from episode as t1 join series as t2 on t1.series_id = t2.id where t1.title = \"a love of a lifetime\"",
        "gold": "select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 625,
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "predicted": "select t1.event from tv_series as t1 join t1.series as t2 on t1.id = t2.series_id join tv_series as t3 on t2.series_id = t3.id where t3.series_name = \"sky radio\"",
        "gold": "select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 626,
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "predicted": "select t1.event from t1.event as t1 join series as t2 on t1.series_id = t2.id where t2.title = \"sky radio\"",
        "gold": "select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 631,
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "predicted": "select t1.paket_name, t1.series_name from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.channel = \"tv\" group by t2.channel order by count(*) desc limit 1",
        "gold": "select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\"",
        "db_id": "tvshow"
      },
      {
        "index": 632,
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "predicted": "select t1.paket_name, t1.series_name from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id join tv as t3 on t2.tv_channel = t3.id where t3.channel = \"tv channel\" order by high_definition desc limit 1",
        "gold": "select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\"",
        "db_id": "tvshow"
      },
      {
        "index": 633,
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "predicted": "select t1.country from t1.country as t1 join t1.country as t2 on t1.id = t2.country_id join cartoon as t3 on t2.artist_id = t3.id where t3.directed_by = \" todd casey\"",
        "gold": "select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey'",
        "db_id": "tvshow"
      },
      {
        "index": 634,
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "predicted": "select t1.country from t1.country as t1 join cartoon as t2 on t1.id = t2.artist_id where t2.directed_by = \"t todd casey\"",
        "gold": "select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey'",
        "db_id": "tvshow"
      },
      {
        "index": 635,
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "predicted": "select country from t1.country where id not in (select country from cartoon where written_by = \"t todd casey\")",
        "gold": "select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey'",
        "db_id": "tvshow"
      },
      {
        "index": 636,
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "predicted": "select country from t1.country except select country from t1.country as t1 join cartoon as t2 on t1.id = t2.artist_id where t2.directed_by = \"t todd casey\"",
        "gold": "select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey'",
        "db_id": "tvshow"
      },
      {
        "index": 637,
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "predicted": "select t2.series_name, t2.country from t1.channel as t1 join t1.series as t2 on t1.id = t2.channel_id join cartoon as t3 on t1.series_id = t3.id where t3.directed_by = \"billy jones\" intersect select t2.series_name, t1.country from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel where t3.directed_by = \"michael chang\"",
        "gold": "select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'michael chang' intersect select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 638,
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "predicted": "select t2.series_name, t2.country from t1.channel as t1 join t1.series as t2 on t1.id = t2.channel_id join cartoon as t3 on t1.series_id = t3.id where t3.directed_by = t2.by t3.directed_by = t1.id join channel as t4 on t3.channel_id = t4.id where t4.directed_by = 'beijing chang'",
        "gold": "select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'michael chang' intersect select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 639,
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "predicted": "select pixel_actor, country from t1.id where t1.pixel_actory!= 'english'",
        "gold": "select pixel_aspect_ratio_par ,  country from tv_channel where language != 'english'",
        "db_id": "tvshow"
      },
      {
        "index": 641,
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "predicted": "select t1.id from t1.country as t1 join t1.country as t2 on t1.id = t2.country group by t2.country having count(*) > 2",
        "gold": "select id from tv_channel group by country having count(*)  >  2",
        "db_id": "tvshow"
      },
      {
        "index": 642,
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "predicted": "select channel from t1.id group by channel having count(*) > 2",
        "gold": "select id from tv_channel group by country having count(*)  >  2",
        "db_id": "tvshow"
      },
      {
        "index": 643,
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "predicted": "select id from channel except select channel from cartoon where directed_by = \"benn jones\"",
        "gold": "select id from tv_channel except select channel from cartoon where directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 645,
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "predicted": "select t1.paket_option from t1.channel except select t1.paket_option from t1.channel as t1 join t2.channel_id from t1.channel_id as t2 on t1.id = t2.channel_id join cartoon as t3 on t2.characteristic_id = t3.id where t3.directed_by = \"benn jones\"",
        "gold": "select package_option from tv_channel where id not in (select channel from cartoon where directed_by  =  'ben jones')",
        "db_id": "tvshow"
      },
      {
        "index": 646,
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "predicted": "select distinct channel from t1.channel except select t1.paket_option from t1.channel as t1 join t2.channel as t2 on t1.id = t2.channel_id join cartoon as t3 on t2.characteristic_id = t3.id where t3.directed_by = \"benn jones\"",
        "gold": "select package_option from tv_channel where id not in (select channel from cartoon where directed_by  =  'ben jones')",
        "db_id": "tvshow"
      },
      {
        "index": 650,
        "question": "What are the earnings of poker players, ordered descending by value?",
        "predicted": "select t1.money from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.professor desc",
        "gold": "select earnings from poker_player order by earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 651,
        "question": "List the final tables made and the best finishes of poker players.",
        "predicted": "select t1.lat_table_made, t1.date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.best_score desc limit 1",
        "gold": "select final_table_made ,  best_finish from poker_player",
        "db_id": "poker_player"
      },
      {
        "index": 652,
        "question": "What are the final tables made and best finishes for all poker players?",
        "predicted": "select t1.lat_table_made, t2.max(t2.money_date) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "gold": "select final_table_made ,  best_finish from poker_player",
        "db_id": "poker_player"
      },
      {
        "index": 655,
        "question": "What is the money rank of the poker player with the highest earnings?",
        "predicted": "select t1.money_ranking from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc limit 1",
        "gold": "select money_rank from poker_player order by earnings desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 657,
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "predicted": "select max(t1.lat_table_made) from poker_player as t1 join people as t2 on t1.phone_id = t2.people_id where t1.money  200000",
        "gold": "select max(final_table_made) from poker_player where earnings  <  200000",
        "db_id": "poker_player"
      },
      {
        "index": 658,
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "predicted": "select max(t1.lat_table_made) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.assets  200000",
        "gold": "select max(final_table_made) from poker_player where earnings  <  200000",
        "db_id": "poker_player"
      },
      {
        "index": 659,
        "question": "What are the names of poker players?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id",
        "db_id": "poker_player"
      },
      {
        "index": 660,
        "question": "Return the names of all the poker players.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id",
        "db_id": "poker_player"
      },
      {
        "index": 661,
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.money > 300000",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t2.earnings  >  300000",
        "db_id": "poker_player"
      },
      {
        "index": 662,
        "question": "Give the names of poker players who have earnings above 300000.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.money > 300000",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t2.earnings  >  300000",
        "db_id": "poker_player"
      },
      {
        "index": 663,
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.date asc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.final_table_made",
        "db_id": "poker_player"
      },
      {
        "index": 664,
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.date asc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.final_table_made",
        "db_id": "poker_player"
      },
      {
        "index": 665,
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "predicted": "select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc limit 1",
        "gold": "select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings asc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 666,
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "predicted": "select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money asc limit 1",
        "gold": "select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings asc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 667,
        "question": "What is the money rank of the tallest poker player?",
        "predicted": "select t1.money_ranking from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "gold": "select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t1.height desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 668,
        "question": "Return the money rank of the poker player with the greatest height.",
        "predicted": "select t1.money_rank from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "gold": "select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t1.height desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 669,
        "question": "What is the average earnings of poker players with height higher than 200?",
        "predicted": "select avg(t1.money) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200",
        "gold": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t1.height  >  200",
        "db_id": "poker_player"
      },
      {
        "index": 670,
        "question": "Give average earnings of poker players who are taller than 200.",
        "predicted": "select avg(t1.money) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200",
        "gold": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t1.height  >  200",
        "db_id": "poker_player"
      },
      {
        "index": 671,
        "question": "What are the names of poker players in descending order of earnings?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.profits desc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 672,
        "question": "Return the names of poker players sorted by their earnings descending.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 687,
        "question": "How many states are there?",
        "predicted": "select count(*) from area_code",
        "gold": "select count(*) from area_code_state",
        "db_id": "voter_1"
      },
      {
        "index": 690,
        "question": "What are the maximum and minimum values of area codes?",
        "predicted": "select max(area_code), min(area_code) from area_code",
        "gold": "select max(area_code) ,  min(area_code) from area_code_state",
        "db_id": "voter_1"
      },
      {
        "index": 691,
        "question": "What is last date created of votes from the state 'CA'?",
        "predicted": "select t1.latin_date from votes as t1 join state as t2 on t1.state = t2.district where t2.state = \"ca\"",
        "gold": "select max(created) from votes where state  =  'ca'",
        "db_id": "voter_1"
      },
      {
        "index": 693,
        "question": "What are the distinct states and create time of all votes?",
        "predicted": "select distinct t1.state, t1.created from state as t1 join votes as t2 on t1.state = t2.state",
        "gold": "select distinct state ,  created from votes",
        "db_id": "voter_1"
      },
      {
        "index": 694,
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "predicted": "select t2.advisor_number, t1.name from votes as t1 join contestants as t2 on t1.country_tony = t2.country group by t1.country_number having count(*) >= 2",
        "gold": "select t1.contestant_number , t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number group by t1.contestant_number having count(*)  >=  2",
        "db_id": "voter_1"
      },
      {
        "index": 695,
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "predicted": "select t2.advisor, t2.name from votes as t1 join contestants as t2 on t1.tony = t2.tony_number group by t2.tony_number order by count(*) asc limit 1",
        "gold": "select t1.contestant_number , t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number group by t1.contestant_number order by count(*) asc limit 1",
        "db_id": "voter_1"
      },
      {
        "index": 698,
        "question": "What is the area code in which the most voters voted?",
        "predicted": "select t1.area_code from area_code as t1 join votes as t2 on t1.area_code = t2.area_code group by t1.area_code order by count(*) desc limit 1",
        "gold": "select t1.area_code from area_code_state as t1 join votes as t2 on t1.state  =  t2.state group by t1.area_code order by count(*) desc limit 1",
        "db_id": "voter_1"
      },
      {
        "index": 699,
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "predicted": "select t1.date, t1.state, t1.phone_number from votes as t1 join contestants as t2 on t1.vote = t2.vote_id where t2.name = 'tabatha gehling'",
        "gold": "select t2.created ,  t2.state ,  t2.phone_number from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number where t1.contestant_name  =  'tabatha gehling'",
        "db_id": "voter_1"
      },
      {
        "index": 700,
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "predicted": "select t1.area_code from areas as t1 join votes as t2 on t1.area_code = t2.area_code join contestants as t3 on t1.country_id = t3.country where t3.title = 'tabatha' and t2.affirmation = 'kelly clauss'",
        "gold": "select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number join area_code_state as t3 on t2.state  =  t3.state where t1.contestant_name  =  'tabatha gehling' intersect select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number join area_code_state as t3 on t2.state  =  t3.state where t1.contestant_name  =  'kelly clauss'",
        "db_id": "voter_1"
      },
      {
        "index": 707,
        "question": "How much surface area do the countires in the Carribean cover together?",
        "predicted": "select count(*) from country as t1 join sqlite_area as t2 on t1.id = t2.country_code where t1.name = \"carribean\"",
        "gold": "select sum(surfacearea) from country where region  =  \"caribbean\"",
        "db_id": "world_1"
      },
      {
        "index": 709,
        "question": "What is the continent name which Anguilla belongs to?",
        "predicted": "select t1.continent from country as t1 join country as t2 on t1.country_code = t2.country where t2.name = \"anguilla\"",
        "gold": "select continent from country where name  =  \"anguilla\"",
        "db_id": "world_1"
      },
      {
        "index": 710,
        "question": "Which region is the city Kabul located in?",
        "predicted": "select t1.area from country as t1 join country as t2 on t1.country_code = t2.country where t2.name = \"kayaking\"",
        "gold": "select region from country as t1 join city as t2 on t1.code  =  t2.countrycode where t2.name  =  \"kabul\"",
        "db_id": "world_1"
      },
      {
        "index": 711,
        "question": "What region is Kabul in?",
        "predicted": "select region from country where city = \"bangul\"",
        "gold": "select region from country as t1 join city as t2 on t1.code  =  t2.countrycode where t2.name  =  \"kabul\"",
        "db_id": "world_1"
      },
      {
        "index": 712,
        "question": "Which language is the most popular in Aruba?",
        "predicted": "select language from country_language where country_name = \"aruba\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 713,
        "question": "What language is predominantly spoken in Aruba?",
        "predicted": "select language from country_language where country_name = \"aruba\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 717,
        "question": "What region does Angola belong to and what is its population?",
        "predicted": "select t1.region, t1.population from country as t1 join country as t2 on t1.country_code = t2.country_code where t2.name = \"angola\"",
        "gold": "select population ,  region from country where name  =  \"angola\"",
        "db_id": "world_1"
      },
      {
        "index": 718,
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.region_code = \"central africa\"",
        "gold": "select avg(lifeexpectancy) from country where region  =  \"central africa\"",
        "db_id": "world_1"
      },
      {
        "index": 719,
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country = \"central africa\"",
        "gold": "select avg(lifeexpectancy) from country where region  =  \"central africa\"",
        "db_id": "world_1"
      },
      {
        "index": 722,
        "question": "What is the total population and maximum GNP in Asia?",
        "predicted": "select sum(population), max(gnp) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"aspan\"",
        "gold": "select sum(population) ,  max(gnp) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 723,
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "predicted": "select count(*), country_code from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"aspan\" group by t1.country_code order by count(*) desc limit 1",
        "gold": "select sum(population) ,  max(gnp) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 724,
        "question": "What is the average life expectancy in African countries that are republics?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"africa\"",
        "gold": "select avg(lifeexpectancy) from country where continent  =  \"africa\" and governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 725,
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country = \"africa\"",
        "gold": "select avg(lifeexpectancy) from country where continent  =  \"africa\" and governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 726,
        "question": "What is the total surface area of the continents Asia and Europe?",
        "predicted": "select sum(surface_area) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"asia\" intersect select sum(t1.surface_area) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"europea\"",
        "gold": "select sum(surfacearea) from country where continent  =  \"asia\" or continent  =  \"europe\"",
        "db_id": "world_1"
      },
      {
        "index": 727,
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "predicted": "select sum(surface_area) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"aspan\" or t1.country_code = \"europea\"",
        "gold": "select sum(surfacearea) from country where continent  =  \"asia\" or continent  =  \"europe\"",
        "db_id": "world_1"
      },
      {
        "index": 728,
        "question": "How many people live in Gelderland district?",
        "predicted": "select count(*) from city as t1 join city as t2 on t1.city_code = t2.id where t1.district = \"monerland\"",
        "gold": "select sum(population) from city where district  =  \"gelderland\"",
        "db_id": "world_1"
      },
      {
        "index": 730,
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "predicted": "select avg(t1.gnp), sum(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.governor = \"united states\"",
        "gold": "select avg(gnp) ,  sum(population) from country where governmentform  =  \"us territory\"",
        "db_id": "world_1"
      },
      {
        "index": 731,
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "predicted": "select avg(t1.gnp), sum(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country_code = \"united states\"",
        "gold": "select avg(gnp) ,  sum(population) from country where governmentform  =  \"us territory\"",
        "db_id": "world_1"
      },
      {
        "index": 732,
        "question": "How many unique languages are spoken in the world?",
        "predicted": "select count(distinct language) from country_language",
        "gold": "select count(distinct language) from countrylanguage",
        "db_id": "world_1"
      },
      {
        "index": 733,
        "question": "What is the number of distinct languages used around the world?",
        "predicted": "select count(distinct language) from country",
        "gold": "select count(distinct language) from countrylanguage",
        "db_id": "world_1"
      },
      {
        "index": 734,
        "question": "How many type of governments are in Africa?",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"africa\"",
        "gold": "select count(distinct governmentform) from country where continent  =  \"africa\"",
        "db_id": "world_1"
      },
      {
        "index": 735,
        "question": "How many different forms of governments are there in Africa?",
        "predicted": "select count(distinct government_form) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country = \"africa\"",
        "gold": "select count(distinct governmentform) from country where continent  =  \"africa\"",
        "db_id": "world_1"
      },
      {
        "index": 736,
        "question": "What is the total number of languages used in Aruba?",
        "predicted": "select count(*) from country as t1 join country_language as t2 on t1.country_code = t2.country where t1.country = \"aruba\"",
        "gold": "select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\"",
        "db_id": "world_1"
      },
      {
        "index": 737,
        "question": "How many languages are spoken in Aruba?",
        "predicted": "select count(*) from country_language where country = \"aruba\"",
        "gold": "select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\"",
        "db_id": "world_1"
      },
      {
        "index": 738,
        "question": "How many official languages does Afghanistan have?",
        "predicted": "select count(*) from country_language where country = \"afghanistan\"",
        "gold": "select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"afghanistan\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 739,
        "question": "How many official languages are spoken in Afghanistan?",
        "predicted": "select count(*) from country_language where country = \"afghanistan\"",
        "gold": "select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"afghanistan\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 740,
        "question": "What is name of the country that speaks the largest number of languages?",
        "predicted": "select t1.country_name from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code order by count(*) desc limit 1",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 741,
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 742,
        "question": "Which continent has the most diverse languages?",
        "predicted": "select t1.country from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country order by count(*) desc limit 1",
        "gold": "select t1.continent from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 743,
        "question": "Which continent speaks the most languages?",
        "predicted": "select t1.country from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code order by count(*) desc limit 1",
        "gold": "select t1.continent from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 744,
        "question": "How many countries speak both English and Dutch?",
        "predicted": "select count(*) from country where languages = \"english\" intersect select count(*) from country where languages = \"english\"",
        "gold": "select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\")",
        "db_id": "world_1"
      },
      {
        "index": 745,
        "question": "What is the number of nations that use English and Dutch?",
        "predicted": "select count(*) from country where languages = \"english\" intersect select count(*) from country where languages = \"english\"",
        "gold": "select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\")",
        "db_id": "world_1"
      },
      {
        "index": 746,
        "question": "What are the names of nations speak both English and French?",
        "predicted": "select name from country where language = \"english\" intersect select name from country where language = \"franchise\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\"",
        "db_id": "world_1"
      },
      {
        "index": 747,
        "question": "Give the names of nations that speak both English and French.",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" intersect select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country_code where t2.language = \"english\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\"",
        "db_id": "world_1"
      },
      {
        "index": 748,
        "question": "What are the names of nations where both English and French are official languages?",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" intersect select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country_code where t2.language = \"france\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 749,
        "question": "Give the names of countries with English and French as official languages.",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" intersect select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country_code where t2.official_population = \"franchise\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 750,
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "predicted": "select count(distinct continent) from country where language = \"chinese\"",
        "gold": "select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"chinese\"",
        "db_id": "world_1"
      },
      {
        "index": 751,
        "question": "How many continents speak Chinese?",
        "predicted": "select count(*) from country where language = \"chinese\"",
        "gold": "select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"chinese\"",
        "db_id": "world_1"
      },
      {
        "index": 752,
        "question": "What are the regions that use English or Dutch?",
        "predicted": "select region from country where languages = \"english\" or languages = \"english\"",
        "gold": "select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" or t2.language  =  \"dutch\"",
        "db_id": "world_1"
      },
      {
        "index": 753,
        "question": "Which regions speak Dutch or English?",
        "predicted": "select region from country where language = \"english\" or language = \"english\"",
        "gold": "select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" or t2.language  =  \"dutch\"",
        "db_id": "world_1"
      },
      {
        "index": 754,
        "question": "What are the countries where either English or Dutch is the official language ?",
        "predicted": "select country from country where languages = \"english\" or languages = \"native\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 755,
        "question": "Which countries have either English or Dutch as an official language?",
        "predicted": "select t1.country from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" or t2.language = \"native\"",
        "gold": "select * from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select * from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 756,
        "question": "Which language is the most popular on the Asian continent?",
        "predicted": "select language from country where t1.country = \"asian\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  \"asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 757,
        "question": "What is the language that is used by the largest number of Asian nations?",
        "predicted": "select language from country_language where country_name = \"asian\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  \"asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 758,
        "question": "Which languages are spoken by only one country in republic governments?",
        "predicted": "select language from country_language group by language having count(*) = 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.governmentform  =  \"republic\" group by t2.language having count(*)  =  1",
        "db_id": "world_1"
      },
      {
        "index": 759,
        "question": "What languages are only used by a single country with a republic government?",
        "predicted": "select language from country where state = \"japan\" group by language",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.governmentform  =  \"republic\" group by t2.language having count(*)  =  1",
        "db_id": "world_1"
      },
      {
        "index": 760,
        "question": "Find the city with the largest population that uses English.",
        "predicted": "select city from city where country_code = \"english\" group by city_code order by population desc limit 1",
        "gold": "select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 761,
        "question": "What is the most populace city that speaks English?",
        "predicted": "select city from city where country_code = \"english\" group by city order by count(*) desc limit 1",
        "gold": "select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 762,
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "predicted": "select name, population, expected_from country from country where country = 'asian' order by population desc limit 1",
        "gold": "select name ,  population ,  lifeexpectancy from country where continent  =  \"asia\" order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 768,
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "predicted": "select t1.official_female from country_language as t1 join country as t2 on t1.country_code = t2.country where t2.heightrix\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.headofstate  =  \"beatrix\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 769,
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "predicted": "select t1.official_female from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.heightrix\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.headofstate  =  \"beatrix\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 770,
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "predicted": "select count(distinct t1.official_percentage) from country as t1 join country_language as t2 on t1.country_code = t2.country where t1.year  1930",
        "gold": "select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where  indepyear  <  1930 and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 771,
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "predicted": "select count(distinct t1.official_population) from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.founded  1930",
        "gold": "select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where  indepyear  <  1930 and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 778,
        "question": "What are the country codes for countries that do not speak English?",
        "predicted": "select country_code from country where country_code not in (select country_code from country_language where languages = \"english\")",
        "gold": "select countrycode from countrylanguage except select countrycode from countrylanguage where language  =  \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 779,
        "question": "Return the country codes for countries that do not speak English.",
        "predicted": "select country_code from country where country_code not in (select country_code from country_language where languages = \"english\")",
        "gold": "select countrycode from countrylanguage except select countrycode from countrylanguage where language  =  \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 780,
        "question": "What are the country codes of countries where people use languages other than English?",
        "predicted": "select country_code from country where languages > (select country_code from country_language where languages = \"english\")",
        "gold": "select distinct countrycode from countrylanguage where language != \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 781,
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "predicted": "select country_code from country where languages!= \"english\"",
        "gold": "select distinct countrycode from countrylanguage where language != \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 784,
        "question": "Which cities are in European countries where English is not the official language?",
        "predicted": "select city from city where country_code = \"european\" except select city from country_language where country = \"english\"",
        "gold": "select distinct t2.name from country as t1 join city as t2 on t2.countrycode  =  t1.code where t1.continent  =  'europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code  =  t4.countrycode where t4.isofficial  =  't' and t4.language  =  'english')",
        "db_id": "world_1"
      },
      {
        "index": 785,
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "predicted": "select name from city where country!= \"europea\"",
        "gold": "select distinct t2.name from country as t1 join city as t2 on t2.countrycode  =  t1.code where t1.continent  =  'europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code  =  t4.countrycode where t4.isofficial  =  't' and t4.language  =  'english')",
        "db_id": "world_1"
      },
      {
        "index": 786,
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "predicted": "select count(*) from city as t1 join country_language as t2 on t1.country_code = t2.country_code where t1.country_name = \"asian\" and t2.language = \"chinese\"",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 787,
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "predicted": "select distinct t1.name from city as t1 join country_language as t2 on t1.country_code = t2.country_code join country as t3 on t1.country_code = t3.id where t3.country = \"aspan\" intersect select distinct t1.name from city as t1 join country_language as t2 on t1.country_code = t2.country where t2.governor = \"chinese\"",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 789,
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "predicted": "select t1.name, t1.year, t1.surface_area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.population limit 1",
        "gold": "select name ,  surfacearea ,  indepyear from country order by population limit 1",
        "db_id": "world_1"
      },
      {
        "index": 790,
        "question": "What are the population, name and leader of the country with the largest area?",
        "predicted": "select t1.population, t1.name, t1.leader from country as t1 join country as t2 on t1.country_code = t2.country_code order by t2.area desc limit 1",
        "gold": "select name ,  population ,  headofstate from country order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 791,
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "predicted": "select t1.name, t1.population, t2.head_of_state from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.area desc limit 1",
        "gold": "select name ,  population ,  headofstate from country order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 792,
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "predicted": "select t1.country_name, count(*) from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code having count(*) >= 3",
        "gold": "select count(t2.language) ,  t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name having count(*)  >  2",
        "db_id": "world_1"
      },
      {
        "index": 793,
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "predicted": "select t1.name, count(*) from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code having count(*) > 2",
        "gold": "select count(t2.language) ,  t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name having count(*)  >  2",
        "db_id": "world_1"
      },
      {
        "index": 796,
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "predicted": "select t1.governor_name, sum(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country group by t1.governor_form having avg(t1.attendance) > 72",
        "gold": "select sum(population) ,  governmentform from country group by governmentform having avg(lifeexpectancy)  >  72",
        "db_id": "world_1"
      },
      {
        "index": 799,
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "predicted": "select continent, sum(t1.life expectancy), avg(t1.life expectancy) from country as t1 join country as t2 on t1.country_code = t2.country group by t1.country_code having avg(t1.life expectancy)  72",
        "gold": "select sum(population) ,  avg(lifeexpectancy) ,  continent from country group by continent having avg(lifeexpectancy)  <  72",
        "db_id": "world_1"
      },
      {
        "index": 800,
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "predicted": "select t1.name, t1.area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t2.area desc limit 5",
        "gold": "select name ,  surfacearea from country order by surfacearea desc limit 5",
        "db_id": "world_1"
      },
      {
        "index": 801,
        "question": "Return the names and surface areas of the 5 largest countries.",
        "predicted": "select t1.name, t1.region_area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.country_code desc limit 5",
        "gold": "select name ,  surfacearea from country order by surfacearea desc limit 5",
        "db_id": "world_1"
      },
      {
        "index": 805,
        "question": "Return the names of the 3 countries with the fewest people.",
        "predicted": "select t1.name from country as t1 join country as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 3",
        "gold": "select name from country order by population asc limit 3",
        "db_id": "world_1"
      },
      {
        "index": 806,
        "question": "how many countries are in Asia?",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"asia\"",
        "gold": "select count(*) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 807,
        "question": "Count the number of countries in Asia.",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"asia\"",
        "gold": "select count(*) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 810,
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "predicted": "select sum(t1.population), avg(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country_name = \"north america\" and t1.population > 3000",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "db_id": "world_1"
      },
      {
        "index": 811,
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "predicted": "select sum(t1.population), avg(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country_code where t2.country_area > 3000",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "db_id": "world_1"
      },
      {
        "index": 814,
        "question": "Which language is spoken by the largest number of countries?",
        "predicted": "select language from country_language group by language order by count(*) desc limit 1",
        "gold": "select language from countrylanguage group by language order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 815,
        "question": "Give the language that is spoken in the most countries.",
        "predicted": "select language from country_language group by language order by count(*) desc limit 1",
        "gold": "select language from countrylanguage group by language order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 816,
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "predicted": "select t2.language from country_language as t1 join country as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 1",
        "gold": "select language ,  countrycode ,  max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 817,
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "predicted": "select t1.country_code, t2.language from country as t1 join languages as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 1",
        "gold": "select language ,  countrycode ,  max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 818,
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "predicted": "select count(*) from country where country = \"spain\" group by country_code order by count(*) desc limit 1",
        "gold": "select count(*) ,   max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 819,
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country where t1.language = \"spanish\"",
        "gold": "select count(*) ,   max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 820,
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "predicted": "select country_code from country where country = \"spain\" group by country_code order by count(*) desc limit 1",
        "gold": "select countrycode ,  max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 821,
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "predicted": "select country_code from country where language = \"spanish\" group by country_code order by count(*) desc limit 1",
        "gold": "select countrycode ,  max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 839,
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "predicted": "select t2.name from conductor as t1 join conductor as t2 on t1.interaction_id = t2.interaction_id join performance as t3 on t1.performance_id = t3.performance_id group by t1.name order by count(*) desc limit 1",
        "gold": "select name from conductor order by year_of_work desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 840,
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "predicted": "select t1.name, t2.name from conductor as t1 join orchestra as t2 on t1.order_id = t2.order_id join performance as t3 on t1.performance_id = t3.performance_id",
        "gold": "select t1.name ,  t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id",
        "db_id": "orchestra"
      },
      {
        "index": 841,
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "predicted": "select t1.name, t2.name from conductor as t1 join orchestra as t2 on t1.order_id = t2.order_id join performance as t3 on t1.performance_id = t3.performance_id",
        "gold": "select t1.name ,  t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id",
        "db_id": "orchestra"
      },
      {
        "index": 842,
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "predicted": "select t1.name from conductor as t1 join performance as t2 on t1.of_or_id = t2.of_id join orchestra as t3 on t1.orchester_id = t3.orchester_id group by t1.name having count(*) > 1",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id having count(*)  >  1",
        "db_id": "orchestra"
      },
      {
        "index": 843,
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "predicted": "select t1.name from conductor as t1 join performance as t2 on t1.other_id = t2.of_id join orchestra as t3 on t1.orchester_id = t3.orchester_id group by t1.name having count(*) > 1",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id having count(*)  >  1",
        "db_id": "orchestra"
      },
      {
        "index": 844,
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "predicted": "select t1.name from conductor as t1 join performance as t2 on t1.order_id = t2.order_id join orchestra as t3 on t1.order_id = t3.order_id group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 845,
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "predicted": "select t1.name from conductor as t1 join performance as t2 on t1.order = t2.order_id join orchestra as t3 on t1.order_id = t3.order_id group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 846,
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "predicted": "select t2.name from orchestra as t1 join conductor as t2 on t1.order = t2.order_id join performance as t3 on t1.performance_id = t3.performance_id where t1.year > 2008",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id where year_of_founded  >  2008",
        "db_id": "orchestra"
      },
      {
        "index": 847,
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "predicted": "select t2.name from orchestra as t1 join conductor as t2 on t1.order_id = t2.order_id join performance as t3 on t1.order_id = t3.order_id where t1.year > 2008",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id where year_of_founded  >  2008",
        "db_id": "orchestra"
      },
      {
        "index": 849,
        "question": "How many orchestras does each record company manage?",
        "predicted": "select t1.record_company, count(*) from orchestra as t1 join performance as t2 on t1.order_id = t2.order_id group by t1.record_company",
        "gold": "select record_company ,  count(*) from orchestra group by record_company",
        "db_id": "orchestra"
      },
      {
        "index": 860,
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "predicted": "select t1.year from orchestra as t1 join performance as t2 on t1.order = t2.order_id group by t1.order having count(*) > 1",
        "gold": "select year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id group by t2.orchestra_id having count(*)  >  1",
        "db_id": "orchestra"
      },
      {
        "index": 861,
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "predicted": "select t1.year_of_founded from orchestra as t1 join performance as t2 on t1.orchester_id = t2.orchester_id group by t1.orchester_id having count(*) > 1",
        "gold": "select year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id group by t2.orchestra_id having count(*)  >  1",
        "db_id": "orchestra"
      },
      {
        "index": 862,
        "question": "How many high schoolers are there?",
        "predicted": "select count(*) from high_schooler",
        "gold": "select count(*) from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 863,
        "question": "Count the number of high schoolers.",
        "predicted": "select count(*) from high_schooler",
        "gold": "select count(*) from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 864,
        "question": "Show the names and grades of each high schooler.",
        "predicted": "select t2.name, t2.grade from high_schooler as t1 join school as t2 on t1.schooler_id = t2.id",
        "gold": "select name ,  grade from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 865,
        "question": "What are the names and grades for each high schooler?",
        "predicted": "select name, grade from high_schooler",
        "gold": "select name ,  grade from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 866,
        "question": "Show all the grades of the high schoolers.",
        "predicted": "select distinct grade from high_schooler",
        "gold": "select grade from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 867,
        "question": "What is the grade of each high schooler?",
        "predicted": "select grade from high_schooler",
        "gold": "select grade from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 868,
        "question": "What grade is Kyle in?",
        "predicted": "select distinct grade from high_schooler where name = 'kyle'",
        "gold": "select grade from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 869,
        "question": "Return the grade for the high schooler named Kyle.",
        "predicted": "select grade from high_schooler where name = 'k kyle'",
        "gold": "select grade from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 870,
        "question": "Show the names of all high schoolers in grade 10.",
        "predicted": "select name from high_schooler where grade = 10",
        "gold": "select name from highschooler where grade  =  10",
        "db_id": "network_1"
      },
      {
        "index": 871,
        "question": "What are the names of all high schoolers in grade 10?",
        "predicted": "select name from high_schooler where grade = 10",
        "gold": "select name from highschooler where grade  =  10",
        "db_id": "network_1"
      },
      {
        "index": 872,
        "question": "Show the ID of the high schooler named Kyle.",
        "predicted": "select id from high_schooler where name = 'k kyle'",
        "gold": "select id from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 873,
        "question": "What is Kyle's id?",
        "predicted": "select kyles.id from home_school as t1 join student as t2 on t1.school_id = t2.id where t2.name = 'kerry'",
        "gold": "select id from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 874,
        "question": "How many high schoolers are there in grade 9 or 10?",
        "predicted": "select count(*) from high_schooler where grade = 9 or grade = 10",
        "gold": "select count(*) from highschooler where grade  =  9 or grade  =  10",
        "db_id": "network_1"
      },
      {
        "index": 875,
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "predicted": "select count(*) from high_schooler where grade = 9 or grade = 10",
        "gold": "select count(*) from highschooler where grade  =  9 or grade  =  10",
        "db_id": "network_1"
      },
      {
        "index": 876,
        "question": "Show the number of high schoolers for each grade.",
        "predicted": "select grade, count(*) from high_schooler group by grade",
        "gold": "select grade ,  count(*) from highschooler group by grade",
        "db_id": "network_1"
      },
      {
        "index": 877,
        "question": "How many high schoolers are in each grade?",
        "predicted": "select grade, count(*) from high_schooler group by grade",
        "gold": "select grade ,  count(*) from highschooler group by grade",
        "db_id": "network_1"
      },
      {
        "index": 878,
        "question": "Which grade has the most high schoolers?",
        "predicted": "select distinct grade from high_schooler group by grade order by count(*) desc limit 1",
        "gold": "select grade from highschooler group by grade order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 879,
        "question": "Return the grade that has the greatest number of high schoolers.",
        "predicted": "select grade from high_schooler group by grade order by count(*) desc limit 1",
        "gold": "select grade from highschooler group by grade order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 880,
        "question": "Show me all grades that have at least 4 students.",
        "predicted": "select distinct grade from high_schooler group by grade having count(*) >= 4",
        "gold": "select grade from highschooler group by grade having count(*)  >=  4",
        "db_id": "network_1"
      },
      {
        "index": 881,
        "question": "Which grades have 4 or more high schoolers?",
        "predicted": "select distinct grade from high_schooler group by grade having count(*) >= 4",
        "gold": "select grade from highschooler group by grade having count(*)  >=  4",
        "db_id": "network_1"
      },
      {
        "index": 882,
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "predicted": "select t1.id, count(*) from student as t1 join friend as t2 on t1.stuid = t2.stuid group by t1.id",
        "gold": "select student_id ,  count(*) from friend group by student_id",
        "db_id": "network_1"
      },
      {
        "index": 883,
        "question": "How many friends does each student have?",
        "predicted": "select count(t2.friend), t1.name from student as t1 join friend as t2 on t1.stuid = t2.stuid group by t1.name",
        "gold": "select student_id ,  count(*) from friend group by student_id",
        "db_id": "network_1"
      },
      {
        "index": 884,
        "question": "Show the names of high school students and their corresponding number of friends.",
        "predicted": "select t2.name, count(*) from college as t1 join friend as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 885,
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "predicted": "select t2.name, count(*) from friends as t1 join high_schooler as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 886,
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "predicted": "select t2.name from friends as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.high_schooler order by count(*) desc limit 1",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 887,
        "question": "Return the name of the high school student with the most friends.",
        "predicted": "select t2.name from friend as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.high_schooler order by count(*) desc limit 1",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 888,
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "predicted": "select t2.name from friend as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.high_schooler having count(*) >= 3",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  3",
        "db_id": "network_1"
      },
      {
        "index": 889,
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "predicted": "select t2.name from friends as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.high_schooler having count(*) >= 3",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  3",
        "db_id": "network_1"
      },
      {
        "index": 890,
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "predicted": "select t3.name from friend as t1 join lives as t2 on t1.stuid = t2.stuid join school as t3 on t3.id = t2.friend where t1.name = 'k kyle'",
        "gold": "select t3.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id join highschooler as t3 on t1.friend_id  =  t3.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 891,
        "question": "Return the names of friends of the high school student Kyle.",
        "predicted": "select t2.name from high_school as t1 join friend as t2 on t1.school_id = t2.id join student as t3 on t3.stuid = t2.stuid where t3.name = 'k kyle'",
        "gold": "select t3.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id join highschooler as t3 on t1.friend_id  =  t3.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 892,
        "question": "How many friends does the high school student Kyle have?",
        "predicted": "select count(t2.friend) from high_school as t1 join friend as t2 on t1.school_id = t2.id join student as t3 on t3.stuid = t2.stuid where t3.name = 'k kyle'",
        "gold": "select count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 893,
        "question": "Count the number of friends Kyle has.",
        "predicted": "select count(t2.friend) from friend as t1 join friend as t2 on t1.id = t2.friend where t1.name = 'kerry'",
        "gold": "select count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 894,
        "question": "Show ids of all students who do not have any friends.",
        "predicted": "select stuid from student where id not in (select stuid from friend)",
        "gold": "select id from highschooler except select student_id from friend",
        "db_id": "network_1"
      },
      {
        "index": 895,
        "question": "What are the ids of high school students who do not have friends?",
        "predicted": "select id from high_school except select id from friend",
        "gold": "select id from highschooler except select student_id from friend",
        "db_id": "network_1"
      },
      {
        "index": 896,
        "question": "Show names of all high school students who do not have any friends.",
        "predicted": "select name from high_schooler where id not in (select high_schooler from friend)",
        "gold": "select name from highschooler except select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 897,
        "question": "What are the names of students who have no friends?",
        "predicted": "select name from student where id not in (select stuid from friends)",
        "gold": "select name from highschooler except select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 898,
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "predicted": "select t1.id from high_schooler as t1 join likes as t2 on t1.id = t2.school_id join friend as t3 on t2.friend = t3.id where t3.friend = t2.name intersect select t1.id from high_schooler as t1 join people as t2 on t1.stuid = t2.stuid",
        "gold": "select student_id from friend intersect select liked_id from likes",
        "db_id": "network_1"
      },
      {
        "index": 899,
        "question": "What are the ids of students who both have friends and are liked?",
        "predicted": "select stuid from student as t1 join likes as t2 on t1.stuid = t2.stuid where t2.friend = t2.friend except select stuid from likes as t1 join friend as t2 on t1.stuid = t2.stuid",
        "gold": "select student_id from friend intersect select liked_id from likes",
        "db_id": "network_1"
      },
      {
        "index": 900,
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.stuid = t2.stuid join friend as t3 on t3.stuid = t2.friend where t3.friend!= \"null\"",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 901,
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "predicted": "select t1.name from high_schooler as t1 join likes as t2 on t1.id = t2.school_id join friend as t3 on t2.friend = t3.id group by t2.high_schooler order by count(*) desc limit 1",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 904,
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "predicted": "select t2.name, count(*) from likes as t1 join school as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 905,
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "predicted": "select t2.name, count(*) from likes as t1 join school as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 906,
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "predicted": "select t2.name from likes as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.schooler order by count(*) desc limit 1",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 907,
        "question": "Give the name of the student with the most likes.",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.id = t2.stuid group by t1.stuid order by count(*) desc limit 1",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 908,
        "question": "Show the names of students who have at least 2 likes.",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.id = t2.stuid group by t2.stuid having count(*) >= 2",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 909,
        "question": "What are the names of students who have 2 or more likes?",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.id = t2.stuid group by t2.stuid having count(*) >= 2",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 910,
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "predicted": "select t1.name from student as t1 join friend as t2 on t1.id = t2.stuid where t2.grade > 5 group by t2.stuid having count(*) >= 2",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.grade  >  5 group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 911,
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "predicted": "select t1.name from high_schooler as t1 join friends as t2 on t1.id = t2.school_id group by t1.id having count(*) > 5 intersect select t1.name from high_schooler as t1 join friends as t2 on t1.school_id = t2.school_id group by t1.high_school_id having count(*) >= 2",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.grade  >  5 group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 912,
        "question": "How many likes does Kyle have?",
        "predicted": "select count(*) from student as t1 join likes as t2 on t1.stuid = t2.stuid where t1.name = 'kerry'",
        "gold": "select count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 913,
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "predicted": "select count(*) from student as t1 join likes as t2 on t1.stuid = t2.stuid join high_schooler as t3 on t3.id = t2.high_schooler where t3.name = 'k kyle'",
        "gold": "select count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 914,
        "question": "Find the average grade of all students who have some friends.",
        "predicted": "select avg(t2.grade) from friends as t1 join high_schooler as t2 on t1.stuid = t2.stuid",
        "gold": "select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 915,
        "question": "What is the average grade of students who have friends?",
        "predicted": "select avg(t2.grade) from friends as t1 join high_schooler as t2 on t1.stuid = t2.stuid",
        "gold": "select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 916,
        "question": "Find the minimum grade of students who have no friends.",
        "predicted": "select min(grade) from high_schooler where id not in (select id from friends)",
        "gold": "select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 917,
        "question": "What is the lowest grade of students who do not have any friends?",
        "predicted": "select distinct grade from student where id not in (select id from friends)",
        "gold": "select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 918,
        "question": "Which states have both owners and professionals living there?",
        "predicted": "select state from professionals group by state having count(*) = 'owner' intersect select state from professionals",
        "gold": "select state from owners intersect select state from professionals",
        "db_id": "dog_kennels"
      },
      {
        "index": 919,
        "question": "Find the states where both owners and professionals live.",
        "predicted": "select state from professionals group by state having count(*) = 'owner' intersect select state from professionals",
        "gold": "select state from owners intersect select state from professionals",
        "db_id": "dog_kennels"
      },
      {
        "index": 922,
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "predicted": "select t1.prof_id, t1.last_name, t1.cell_phone from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t1.state = \"indiana\" or t2.treatment_type_code = \"claimed\" group by t1.prof_id having count(*) > 2",
        "gold": "select professional_id ,  last_name ,  cell_number from professionals where state  =  'indiana' union select t1.professional_id ,  t1.last_name ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 923,
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "predicted": "select t1.prof_id, t1.last_name, t1.cell_phone from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t1.state = \"indiana\" group by t1.prof_id having count(*) > 2",
        "gold": "select professional_id ,  last_name ,  cell_number from professionals where state  =  'indiana' union select t1.professional_id ,  t1.last_name ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 926,
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "predicted": "select first_name from professionals union select first_name from dogs",
        "gold": "select first_name from professionals union select first_name from owners except select name from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 927,
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "predicted": "select first_name from professionals union select first_name from dogs",
        "gold": "select first_name from professionals union select first_name from owners except select name from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 928,
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "predicted": "select professional_id, role_code, email from professionals except select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"dogs\"",
        "gold": "select professional_id ,  role_code ,  email_address from professionals except select t1.professional_id ,  t1.role_code ,  t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 929,
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "predicted": "select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"null\"",
        "gold": "select professional_id ,  role_code ,  email_address from professionals except select t1.professional_id ,  t1.role_code ,  t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 930,
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "predicted": "select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t2.first_name ,  t2.last_name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 931,
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "predicted": "select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t2.first_name ,  t2.last_name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 932,
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "predicted": "select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "gold": "select t1.professional_id ,  t1.role_code ,  t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 933,
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "predicted": "select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "gold": "select t1.professional_id ,  t1.role_code ,  t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 934,
        "question": "What is the name of the breed with the most dogs?",
        "predicted": "select breed_name from dogs group by breed_code order by count(*) desc limit 1",
        "gold": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code  =  t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 935,
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "predicted": "select breed_name from dogs group by breed_code order by count(*) desc limit 1",
        "gold": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code  =  t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 936,
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "predicted": "select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 937,
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "predicted": "select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 938,
        "question": "What is the description of the treatment type that costs the least money in total?",
        "predicted": "select treatment_type_description from treatments order by cost_of_treatment asc limit 1",
        "gold": "select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 939,
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "predicted": "select treatment_type_description from treatment_types group by treatment_type_code order by sum(cost_of_treatment) limit 1",
        "gold": "select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 940,
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "predicted": "select t1.owner_id, t1.zip_code from owners as t1 join charges as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t1.amount) desc limit 1",
        "gold": "select t1.owner_id ,  t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 941,
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "predicted": "select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t2.amount) desc limit 1",
        "gold": "select t1.owner_id ,  t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 942,
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "predicted": "select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "gold": "select t1.professional_id ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 943,
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "predicted": "select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "gold": "select t1.professional_id ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 944,
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "predicted": "select t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"gone\"",
        "gold": "select distinct t1.first_name ,  t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment  <  ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 945,
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "predicted": "select t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = ( select avg(treatment_type_code) from treatments )",
        "gold": "select distinct t1.first_name ,  t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment  <  ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 946,
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "predicted": "select t1.date_of_treatment, t1.first_name, t1.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.treatment_id",
        "gold": "select t1.date_of_treatment ,  t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id  =  t2.professional_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 947,
        "question": "What are the date and the operating professional's first name of each treatment?",
        "predicted": "select t1.date_of_treatment, t1.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.treatment_id",
        "gold": "select t1.date_of_treatment ,  t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id  =  t2.professional_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 948,
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "predicted": "select treatment_type_code, treatment_type_description from treatments group by treatment_type_code",
        "gold": "select t1.cost_of_treatment ,  t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 949,
        "question": "What are the cost and treatment type description of each treatment?",
        "predicted": "select treatment_type_code, cost_of_treatment, treatment_type_description from treatments",
        "gold": "select t1.cost_of_treatment ,  t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 950,
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "predicted": "select t1.first_name, t1.last_name, count(*) from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id",
        "gold": "select t1.first_name ,  t1.last_name ,  t2.size_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 951,
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "predicted": "select t1.first_name, t1.last_name, count(*) from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id",
        "gold": "select t1.first_name ,  t1.last_name ,  t2.size_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 952,
        "question": "List pairs of the owner's first name and the dogs's name.",
        "predicted": "select first_name, last_name from dogs",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 953,
        "question": "What are each owner's first name and their dogs's name?",
        "predicted": "select t1.first_name, t1.last_name, t1.owner_id from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 954,
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "predicted": "select t2.name, t1.date_treatment_id from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id where t1.type_code = \"king\"",
        "gold": "select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 955,
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "predicted": "select t2.name, t1.date_treatment_date from breeds as t1 join dogs as t2 on t1.dog_id = t2.dog_id order by t1.age limit 1",
        "gold": "select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 956,
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "predicted": "select t2.first_name, t2.last_name from pets as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = \"visa\"",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t1.state  =  'virginia'",
        "db_id": "dog_kennels"
      },
      {
        "index": 957,
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "predicted": "select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = \"visa\" and t2.name = \"horses\"",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t1.state  =  'virginia'",
        "db_id": "dog_kennels"
      },
      {
        "index": 958,
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "predicted": "select t1.date_in_country, t1.date_in_date_in_home_schooled from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "gold": "select distinct t1.date_arrived ,  t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 959,
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "predicted": "select t1.date_treatment, t1.date_treatment_id from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "gold": "select distinct t1.date_arrived ,  t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 960,
        "question": "List the last name of the owner owning the youngest dog.",
        "predicted": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t1.age limit 1",
        "gold": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t2.age  =  ( select max(age) from dogs )",
        "db_id": "dog_kennels"
      },
      {
        "index": 961,
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "predicted": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t2.age limit 1",
        "gold": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t2.age  =  ( select max(age) from dogs )",
        "db_id": "dog_kennels"
      },
      {
        "index": 966,
        "question": "How many dogs went through any treatments?",
        "predicted": "select count(*) from dogs",
        "gold": "select count(distinct dog_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 967,
        "question": "Count the number of dogs that went through a treatment.",
        "predicted": "select count(*) from dogs",
        "gold": "select count(distinct dog_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 968,
        "question": "How many professionals have performed any treatment to dogs?",
        "predicted": "select count(*) from procedures as t1 join dogs as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"dogs\"",
        "gold": "select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 969,
        "question": "Find the number of professionals who have ever treated dogs.",
        "predicted": "select count(*) from procedures as t1 join dogs as t2 on t1.professional_id = t2.professional_id",
        "gold": "select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 996,
        "question": "What are all the possible breed type and size type combinations?",
        "predicted": "select distinct t1.type_code, t1.size_code from breeds as t1 join sizes as t2 on t1. breed_code = t2. breed_code",
        "gold": "select distinct breed_code ,  size_code from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 997,
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "predicted": "select distinct t2. breed_type_code, t2.size_code from dogs as t1 join breeds as t2 on t1.dog_id = t2.dog_id",
        "gold": "select distinct breed_code ,  size_code from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 998,
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "predicted": "select t1.first_name, t1.last_name, t2.treatment_type_code from professionals as t1 join treatments as t2 on t1.treatment_id = t2.treatment_id where t2.treatment_type_code = \"done\"",
        "gold": "select distinct t1.first_name ,  t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id join treatment_types as t3 on t2.treatment_type_code  =  t3.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 999,
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "predicted": "select t1.first_name, t1.last_name, t2.treatment_type_description from professionals as t1 join treatments as t2 on t1.treatment_id = t2.treatment_id",
        "gold": "select distinct t1.first_name ,  t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id join treatment_types as t3 on t2.treatment_type_code  =  t3.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 1018,
        "question": "Show titles of songs and names of singers.",
        "predicted": "select t2.title, t2.name from singer as t1 join song as t2 on t1.songid = t2.songid",
        "gold": "select t2.title ,  t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id",
        "db_id": "singer"
      },
      {
        "index": 1019,
        "question": "What are the song titles and singer names?",
        "predicted": "select t2.title, t2.name from singer as t1 join song as t2 on t1.songid = t2.songid",
        "gold": "select t2.title ,  t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id",
        "db_id": "singer"
      },
      {
        "index": 1020,
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "predicted": "select distinct t1.name from singer as t1 join song as t2 on t1.songid = t2.songid where t2.sales > 300000",
        "gold": "select distinct t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id where t2.sales  >  300000",
        "db_id": "singer"
      },
      {
        "index": 1021,
        "question": "what are the different names of the singers that have sales more than 300000?",
        "predicted": "select distinct t1.name from singer as t1 join song as t2 on t1.songid = t2.songid where t2.sales > 300000",
        "gold": "select distinct t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id where t2.sales  >  300000",
        "db_id": "singer"
      },
      {
        "index": 1022,
        "question": "Show the names of singers that have more than one song.",
        "predicted": "select t1.name from singer as t1 join song as t2 on t1.songid = t2.songid group by t1.songid having count(*) > 1",
        "gold": "select t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.name having count(*)  >  1",
        "db_id": "singer"
      },
      {
        "index": 1023,
        "question": "What are the names of the singers that have more than one songs?",
        "predicted": "select t1.name from singer as t1 join song as t2 on t1.songid = t2.songid group by t1.songid having count(*) > 1",
        "gold": "select t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.name having count(*)  >  1",
        "db_id": "singer"
      },
      {
        "index": 1024,
        "question": "Show the names of singers and the total sales of their songs.",
        "predicted": "select t1.name, sum(t1.sales) from singer as t1 join song as t2 on t1.song_id = t2.song_id group by t1.song_id",
        "gold": "select t1.name ,  sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.name",
        "db_id": "singer"
      },
      {
        "index": 1025,
        "question": "For each singer name, what is the total sales for their songs?",
        "predicted": "select t1.name, sum(t1.sales_millions) from singer as t1 join song as t2 on t1.song_id = t2.song_id group by t1.name",
        "gold": "select t1.name ,  sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.name",
        "db_id": "singer"
      },
      {
        "index": 1030,
        "question": "How many available features are there in total?",
        "predicted": "select count(*) from other_features",
        "gold": "select count(*) from other_available_features",
        "db_id": "real_estate_properties"
      },
      {
        "index": 1031,
        "question": "What is the feature type name of feature AirCon?",
        "predicted": "select feature_type_name from ref_feature_types as t1 join features as t2 on t1.feature_id = t2.feature_id where t2.feature_name = \"aircon\"",
        "gold": "select t2.feature_type_name from other_available_features as t1 join ref_feature_types as t2 on t1.feature_type_code  =  t2.feature_type_code where t1.feature_name  =  \"aircon\"",
        "db_id": "real_estate_properties"
      },
      {
        "index": 1032,
        "question": "Show the property type descriptions of properties belonging to that code.",
        "predicted": "select t1.property_type_description from ref_property_types as t1 join properties as t2 on t1.property_type_code = t2.property_type_code",
        "gold": "select t2.property_type_description from properties as t1 join ref_property_types as t2 on t1.property_type_code  =  t2.property_type_code group by t1.property_type_code",
        "db_id": "real_estate_properties"
      }
    ],
    "column_selection": [
      {
        "index": 2,
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "predicted": "select name, country, age from singer order by age desc",
        "gold": "select name ,  country ,  age from singer order by age desc",
        "db_id": "concert_singer"
      },
      {
        "index": 3,
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "predicted": "select name, country, age from singer order by age desc",
        "gold": "select name ,  country ,  age from singer order by age desc",
        "db_id": "concert_singer"
      },
      {
        "index": 4,
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "predicted": "select avg(age), min(age), max(age) from singer where country = 'france'",
        "gold": "select avg(age) ,  min(age) ,  max(age) from singer where country  =  'france'",
        "db_id": "concert_singer"
      },
      {
        "index": 5,
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "predicted": "select avg(age), min(age), max(age) from singer where country = 'france'",
        "gold": "select avg(age) ,  min(age) ,  max(age) from singer where country  =  'france'",
        "db_id": "concert_singer"
      },
      {
        "index": 6,
        "question": "Show the name and the release year of the song by the youngest singer.",
        "predicted": "select t2.name, t2.release_year from singer as t1 join song as t2 on t1.song_id = t2.song_id order by t1.age limit 1",
        "gold": "select song_name ,  song_release_year from singer order by age limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 7,
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "predicted": "select song_name, release_year from singer order by age asc limit 1",
        "gold": "select song_name ,  song_release_year from singer order by age limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 8,
        "question": "What are all distinct countries where singers above age 20 are from?",
        "predicted": "select distinct t1.country from singer as t1 join singer_in_match as t2 on t1.song_id = t2.song_id where t2.age > 20",
        "gold": "select distinct country from singer where age  >  20",
        "db_id": "concert_singer"
      },
      {
        "index": 10,
        "question": "Show all countries and the number of singers in each country.",
        "predicted": "select country, count(*) from singer group by country",
        "gold": "select country ,  count(*) from singer group by country",
        "db_id": "concert_singer"
      },
      {
        "index": 11,
        "question": "How many singers are from each country?",
        "predicted": "select country, count(*) from singer group by country",
        "gold": "select country ,  count(*) from singer group by country",
        "db_id": "concert_singer"
      },
      {
        "index": 14,
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "predicted": "select location, name from stadium where capacity between 5000 and 10000",
        "gold": "select location ,  name from stadium where capacity between 5000 and 10000",
        "db_id": "concert_singer"
      },
      {
        "index": 15,
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "predicted": "select location, name from stadium where capacity between 5000 and 10000",
        "gold": "select location ,  name from stadium where capacity between 5000 and 10000",
        "db_id": "concert_singer"
      },
      {
        "index": 16,
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "predicted": "select max(capacity), avg(avg(avg(amount) from stadium",
        "gold": "select max(capacity), average from stadium",
        "db_id": "concert_singer"
      },
      {
        "index": 17,
        "question": "What is the average and maximum capacities for all stadiums ?",
        "predicted": "select avg(capacity), max(capacity) from stadium",
        "gold": "select avg(capacity) ,  max(capacity) from stadium",
        "db_id": "concert_singer"
      },
      {
        "index": 18,
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "predicted": "select name, capacity from stadium order by avg(average_attendance) desc limit 1",
        "gold": "select name ,  capacity from stadium order by average desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 19,
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "predicted": "select name, capacity from stadium order by avg(attendance) desc limit 1",
        "gold": "select name ,  capacity from stadium order by average desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 22,
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "predicted": "select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "gold": "select t2.name ,  count(*) from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id group by t1.stadium_id",
        "db_id": "concert_singer"
      },
      {
        "index": 23,
        "question": "For each stadium, how many concerts play there?",
        "predicted": "select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "gold": "select t2.name ,  count(*) from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id group by t1.stadium_id",
        "db_id": "concert_singer"
      },
      {
        "index": 24,
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "predicted": "select t2.name, t1.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t1.stadium_id order by count(*) desc limit 1",
        "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >=  2014 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 25,
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "predicted": "select t1.name, t1.capacity from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year > 2014 group by t1.stadium_id order by count(*) desc limit 1",
        "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 33,
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "predicted": "select t2.name, t2.theme, count(*) from singer_in_council as t1 join concert as t2 on t1.konzert_id = t2.konzert_id group by t1.konzert_id",
        "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "db_id": "concert_singer"
      },
      {
        "index": 34,
        "question": "What are the names , themes , and number of singers for every concert ?",
        "predicted": "select t1.name, t1.theme, count(*) from singer as t1 join concert as t2 on t1.songid = t2.songid group by t1.songid",
        "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "db_id": "concert_singer"
      },
      {
        "index": 35,
        "question": "List singer names and number of concerts for each singer.",
        "predicted": "select t1.name, count(*) from singer as t1 join concert as t2 on t1.songid = t2.songid group by t1.songid",
        "gold": "select t2.name ,  count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id group by t2.singer_id",
        "db_id": "concert_singer"
      },
      {
        "index": 36,
        "question": "What are the names of the singers and number of concerts for each person?",
        "predicted": "select t2.name, count(*) from singer_in_council as t1 join singer as t2 on t1.songid = t2.songid group by t1.songid",
        "gold": "select t2.name ,  count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id group by t2.singer_id",
        "db_id": "concert_singer"
      },
      {
        "index": 37,
        "question": "List all singer names in concerts in year 2014.",
        "predicted": "select t1.name from singer as t1 join concert as t2 on t1.songid = t2.songid where t2.year = 2014",
        "gold": "select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id join concert as t3 on t1.concert_id  =  t3.concert_id where t3.year  =  2014",
        "db_id": "concert_singer"
      },
      {
        "index": 39,
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "predicted": "select name, country from singer where song like \"%hey%\"",
        "gold": "select name ,  country from singer where song_name like '%hey%'",
        "db_id": "concert_singer"
      },
      {
        "index": 40,
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "predicted": "select name, country from singer where song like \"%hey%\"",
        "gold": "select name ,  country from singer where song_name like '%hey%'",
        "db_id": "concert_singer"
      },
      {
        "index": 41,
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "predicted": "select t1.name, t2.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2014 intersect select t1.name, t1.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2015",
        "gold": "select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014 intersect select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2015",
        "db_id": "concert_singer"
      },
      {
        "index": 42,
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "predicted": "select t1.name, t2.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2014 intersect select t1.name, t1.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2015",
        "gold": "select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014 intersect select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2015",
        "db_id": "concert_singer"
      },
      {
        "index": 48,
        "question": "How much does the youngest dog weigh?",
        "predicted": "select count(*) from pets where pet_name = \"dog\" and age = (select min(age) from pets)",
        "gold": "select weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 49,
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "predicted": "select pets, max(weight), pet_type from pets group by pets",
        "gold": "select max(weight) ,  pettype from pets group by pettype",
        "db_id": "pets_1"
      },
      {
        "index": 50,
        "question": "List the maximum weight and type for each type of pet.",
        "predicted": "select pets, max(weight), pet_type from pets group by pets",
        "gold": "select max(weight) ,  pettype from pets group by pettype",
        "db_id": "pets_1"
      },
      {
        "index": 55,
        "question": "Find the number of distinct type of pets.",
        "predicted": "select count(*) from pets",
        "gold": "select count(distinct pettype) from pets",
        "db_id": "pets_1"
      },
      {
        "index": 56,
        "question": "How many different types of pet are there?",
        "predicted": "select count(distinct pet_type) from pets",
        "gold": "select count(distinct pettype) from pets",
        "db_id": "pets_1"
      },
      {
        "index": 61,
        "question": "Find the major and age of students who do not have a cat pet.",
        "predicted": "select major, age from student where stuid not in (select stuid from has_horses where pet_type = \"cat\")",
        "gold": "select major ,  age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 62,
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "predicted": "select major, age from student where stuid not in (select stuid from has_pid where petid = \"cat\")",
        "gold": "select major ,  age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 65,
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "predicted": "select fname, age from student where stuid not in (select stuid from has_phone)",
        "gold": "select t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 66,
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "predicted": "select fname from student where stuid in (select stuid from has_ pet where pets = \"dog\") except select stuid from has_cat\")",
        "gold": "select t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 67,
        "question": "Find the type and weight of the youngest pet.",
        "predicted": "select pet_type, weight from pets order by age limit 1",
        "gold": "select pettype ,  weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 68,
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "predicted": "select pets, count(*) from pets where age = ( select min(age) from pets )",
        "gold": "select pettype ,  weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 69,
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "predicted": "select pets_id, weight from pets where age > 1",
        "gold": "select petid ,  weight from pets where pet_age  >  1",
        "db_id": "pets_1"
      },
      {
        "index": 70,
        "question": "What is the id and weight of every pet who is older than 1?",
        "predicted": "select pet_id, weight from pets where age > 1",
        "gold": "select petid ,  weight from pets where pet_age  >  1",
        "db_id": "pets_1"
      },
      {
        "index": 71,
        "question": "Find the average and maximum age for each type of pet.",
        "predicted": "select pets, avg(age), max(age) from pets group by pets",
        "gold": "select avg(pet_age) ,  max(pet_age) ,  pettype from pets group by pettype",
        "db_id": "pets_1"
      },
      {
        "index": 72,
        "question": "What is the average and maximum age for each pet type?",
        "predicted": "select pets, avg(age), max(age) from pets group by pets",
        "gold": "select avg(pet_age) ,  max(pet_age) ,  pettype from pets group by pettype",
        "db_id": "pets_1"
      },
      {
        "index": 73,
        "question": "Find the average weight for each pet type.",
        "predicted": "select pets, avg(weight) from pets group by pets",
        "gold": "select avg(weight) ,  pettype from pets group by pettype",
        "db_id": "pets_1"
      },
      {
        "index": 74,
        "question": "What is the average weight for each type of pet?",
        "predicted": "select pets, avg(weight) from pets group by pets",
        "gold": "select avg(weight) ,  pettype from pets group by pettype",
        "db_id": "pets_1"
      },
      {
        "index": 75,
        "question": "Find the first name and age of students who have a pet.",
        "predicted": "select distinct t1.fname, t1.age from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"phone\"",
        "gold": "select distinct t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 76,
        "question": "What are the different first names and ages of the students who do have pets?",
        "predicted": "select distinct t1.fname, t1.age from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.pid = \" pets\"",
        "gold": "select distinct t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 77,
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "predicted": "select pet_id from has_phone where lname = 'smith'",
        "gold": "select t2.petid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.lname  =  'smith'",
        "db_id": "pets_1"
      },
      {
        "index": 78,
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "predicted": "select pet_id from has_phone where lname = 'smith'",
        "gold": "select t2.petid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.lname  =  'smith'",
        "db_id": "pets_1"
      },
      {
        "index": 79,
        "question": "Find the number of pets for each student who has any pet and student id.",
        "predicted": "select count(*), t1.stuid from student as t1 join has_phone as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 80,
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "predicted": "select stuid, count(*) from has_phone group by stuid",
        "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 81,
        "question": "Find the first name and gender of student who have more than one pet.",
        "predicted": "select t1.fname, t1.sex from student as t1 join has_phone as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "gold": "select t1.fname ,  t1.sex from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid having count(*)  >  1",
        "db_id": "pets_1"
      },
      {
        "index": 82,
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "predicted": "select t1.fname, t1.sex from student as t1 join has_phone as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "gold": "select t1.fname ,  t1.sex from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid having count(*)  >  1",
        "db_id": "pets_1"
      },
      {
        "index": 83,
        "question": "Find the last name of the student who has a cat that is age 3.",
        "predicted": "select lname from student where age = 3 and stuid = 1",
        "gold": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pet_age  =  3 and t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 84,
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "predicted": "select lname from student where age = 3 and stuid = 1",
        "gold": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pet_age  =  3 and t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 89,
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "predicted": "select t1.country, t1.country_name, count(*) from continents as t1 join countries as t2 on t1.country_id = t2.country_id group by t1.country_id",
        "gold": "select t1.contid ,  t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent group by t1.contid;",
        "db_id": "car_1"
      },
      {
        "index": 90,
        "question": "For each continent, list its id, name, and how many countries it has?",
        "predicted": "select t1. continent, t1.country, count(*) from continents as t1 join country as t2 on t1.country_id = t2.country_id group by t1.country_id",
        "gold": "select t1.contid ,  t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent group by t1.contid;",
        "db_id": "car_1"
      },
      {
        "index": 93,
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "predicted": "select t1.fname, t1.fname, count(*) from car_makers as t1 join cars as t2 on t1.machine_id = t2.machine_id group by t1.machine_id",
        "gold": "select t1.fullname ,  t1.id ,  count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id;",
        "db_id": "car_1"
      },
      {
        "index": 94,
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "predicted": "select t1.fname, t1.fname, count(*) from car_makers as t1 join model_model as t2 on t1.machine_id = t2.machine_id group by t1.manufacturer_id",
        "gold": "select t1.fullname ,  t1.id ,  count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id;",
        "db_id": "car_1"
      },
      {
        "index": 95,
        "question": "Which model of the car has the minimum horsepower?",
        "predicted": "select model from cars_data order by horsepower limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 96,
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "predicted": "select model from cars_data order by horsepower limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 97,
        "question": "Find the model of the car whose weight is below the average weight.",
        "predicted": "select model from cars where weight  (select avg(weight) from cars)",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.weight  <  (select avg(weight) from cars_data)",
        "db_id": "car_1"
      },
      {
        "index": 98,
        "question": "What is the model for the car with a weight smaller than the average?",
        "predicted": "select model from cars_data where weight  (select avg(weight) from cars)",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.weight  <  (select avg(weight) from cars_data)",
        "db_id": "car_1"
      },
      {
        "index": 99,
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "predicted": "select t1.machine_name from manufacturers as t1 join car_makers as t2 on t1.machine_id = t2.machine_id where t2.year = 1970",
        "gold": "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model join cars_data as t4 on t3.makeid  =  t4.id where t4.year  =  '1970';",
        "db_id": "car_1"
      },
      {
        "index": 100,
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "predicted": "select distinct t2.manufacturer from cars as t1 join car_makers as t2 on t1.model_id = t2.model_id where t1.year = 1970",
        "gold": "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model join cars_data as t4 on t3.makeid  =  t4.id where t4.year  =  '1970';",
        "db_id": "car_1"
      },
      {
        "index": 101,
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "predicted": "select t1.make, t1.model_make from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id order by t2.accelerator_year asc limit 1",
        "gold": "select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);",
        "db_id": "car_1"
      },
      {
        "index": 102,
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "predicted": "select t1.manufacturer, t1.year from manufacturers as t1 join cars_data as t2 on t1.id = t2.machine_id order by t2.accelerator_year asc limit 1",
        "gold": "select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);",
        "db_id": "car_1"
      },
      {
        "index": 103,
        "question": "Which distinct car models are the produced after 1980?",
        "predicted": "select distinct model_model from cars_data where year > 1980",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id where t3.year  >  1980;",
        "db_id": "car_1"
      },
      {
        "index": 104,
        "question": "What are the different models for the cards produced after 1980?",
        "predicted": "select distinct model from model_list where year > 1980",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id where t3.year  >  1980;",
        "db_id": "car_1"
      },
      {
        "index": 105,
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "predicted": "select t1.country_name, count(*) from countries as t1 join carriers as t2 on t1.country_id = t2.country group by t1.country_name",
        "gold": "select t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent join car_makers as t3 on t2.countryid  =  t3.country group by t1.continent;",
        "db_id": "car_1"
      },
      {
        "index": 106,
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "predicted": "select t1.country_name, count(*) from continents as t1 join car_mades as t2 on t1.country_id = t2.country group by t1. continent",
        "gold": "select t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent join car_makers as t3 on t2.countryid  =  t3.country group by t1.continent;",
        "db_id": "car_1"
      },
      {
        "index": 107,
        "question": "Which of the countries has the most car makers? List the country name.",
        "predicted": "select t1.country_name from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_name order by count(*) desc limit 1",
        "gold": "select t2.countryname from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid group by t1.country order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 108,
        "question": "What is the name of the country with the most car makers?",
        "predicted": "select t1.country_name from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_name order by count(*) desc limit 1",
        "gold": "select t2.countryname from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid group by t1.country order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 109,
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "predicted": "select count(*), t1.fname from models as t1 join car_factories as t2 on t1.model_id = t2.model_id group by t1.manufacturer_id",
        "gold": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "db_id": "car_1"
      },
      {
        "index": 110,
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "predicted": "select count(*), t1.fname, t1.fname from models as t1 join car_factories as t2 on t1.model_id = t2.model_id group by t1.manufacturer_id",
        "gold": "select count(*) ,  t2.fullname ,  t2.id from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "db_id": "car_1"
      },
      {
        "index": 111,
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "predicted": "select t1.accelerator from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.machine_name = \"acquired\" and t1.machine_name = \"sw\"",
        "gold": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.make  =  'amc hornet sportabout (sw)';",
        "db_id": "car_1"
      },
      {
        "index": 112,
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "predicted": "select sum(t1.weight) from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.model = 'acquired' and t2.weight = (select sportname from cars_data as t1 join cars as t2 on t1.machine_id = t2.machine_id where t1.machine = 'abrait sportabout')",
        "gold": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.make  =  'amc hornet sportabout (sw)';",
        "db_id": "car_1"
      },
      {
        "index": 117,
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "predicted": "select avg(miles_per_year) from cars_data where cylinders = 4",
        "gold": "select avg(mpg) from cars_data where cylinders  =  4;",
        "db_id": "car_1"
      },
      {
        "index": 118,
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "predicted": "select avg(miles_per_year) from cars_data where cylinders = 4",
        "gold": "select avg(mpg) from cars_data where cylinders  =  4;",
        "db_id": "car_1"
      },
      {
        "index": 121,
        "question": "What are all the makers and models?",
        "predicted": "select t1.manufacturer, t1.model_model from car_makers as t1 join model_model as t2 on t1.model_id = t2.model_id",
        "gold": "select maker ,  model from model_list;",
        "db_id": "car_1"
      },
      {
        "index": 122,
        "question": "What are the makers and models?",
        "predicted": "select t1.machine, t1.model_model from car_makers as t1 join model_model as t2 on t1.model_id = t2.model_id",
        "gold": "select maker ,  model from model_list;",
        "db_id": "car_1"
      },
      {
        "index": 123,
        "question": "What are the countries having at least one car maker? List name and id.",
        "predicted": "select t1.country, t1.country from countries as t1 join car_factories as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) >= 1",
        "gold": "select t1.countryname ,  t1.countryid from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >=  1;",
        "db_id": "car_1"
      },
      {
        "index": 124,
        "question": "What are the names and ids of all countries with at least one car maker?",
        "predicted": "select t1.country, t1.country_id from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) >= 1",
        "gold": "select t1.countryname ,  t1.countryid from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >=  1;",
        "db_id": "car_1"
      },
      {
        "index": 127,
        "question": "What is the average weight of cars each year?",
        "predicted": "select avg(weight), year from cars group by year",
        "gold": "select avg(weight) ,  year from cars_data group by year;",
        "db_id": "car_1"
      },
      {
        "index": 128,
        "question": "What is the average weight and year for each year?",
        "predicted": "select avg(weight), avg(year), year from vehicles group by year",
        "gold": "select avg(weight) ,  year from cars_data group by year;",
        "db_id": "car_1"
      },
      {
        "index": 129,
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "predicted": "select t1.country from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) >= 3",
        "gold": "select t1.countryname from countries as t1 join continents as t2 on t1.continent  =  t2.contid join car_makers as t3 on t1.countryid  =  t3.country where t2.continent  =  'europe' group by t1.countryname having count(*)  >=  3;",
        "db_id": "car_1"
      },
      {
        "index": 130,
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "predicted": "select t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id where t1.country = \"europea\" group by t1.country_name having count(*) >= 3",
        "gold": "select t1.countryname from countries as t1 join continents as t2 on t1.continent  =  t2.contid join car_makers as t3 on t1.countryid  =  t3.country where t2.continent  =  'europe' group by t1.countryname having count(*)  >=  3;",
        "db_id": "car_1"
      },
      {
        "index": 131,
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "predicted": "select max(t1.machine), max(t1.machine_make) from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.cylinders = 3",
        "gold": "select t2.horsepower ,  t1.make from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 132,
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "predicted": "select max(t1.supplier), t1.model_make from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.number = 3",
        "gold": "select t2.horsepower ,  t1.make from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 133,
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "predicted": "select model_name from cars_data order by horsepower desc limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 134,
        "question": "What is the car model with the highest mpg ?",
        "predicted": "select model_name from cars order by horsepower desc limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 135,
        "question": "What is the average horsepower of the cars before 1980?",
        "predicted": "select avg(traints) from cars_data where accelerate_year  1980",
        "gold": "select avg(horsepower) from cars_data where year  <  1980;",
        "db_id": "car_1"
      },
      {
        "index": 136,
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "predicted": "select avg(traints) from cars_data where year  1980",
        "gold": "select avg(horsepower) from cars_data where year  <  1980;",
        "db_id": "car_1"
      },
      {
        "index": 137,
        "question": "What is the average edispl of the cars of model volvo?",
        "predicted": "select avg(t1.edisplled) from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.model = 'volvo'",
        "gold": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t1.model  =  'volvo';",
        "db_id": "car_1"
      },
      {
        "index": 138,
        "question": "What is the average edispl for all volvos?",
        "predicted": "select avg(edisplish) from cars_data",
        "gold": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t1.model  =  'volvo';",
        "db_id": "car_1"
      },
      {
        "index": 139,
        "question": "What is the maximum accelerate for different number of cylinders?",
        "predicted": "select max(accelerator), count(*) from cars_data group by count(*)",
        "gold": "select max(accelerate) ,  cylinders from cars_data group by cylinders;",
        "db_id": "car_1"
      },
      {
        "index": 140,
        "question": "What is the maximum accelerate for all the different cylinders?",
        "predicted": "select max(accelerator), cycles from cars_data group by cycles",
        "gold": "select max(accelerate) ,  cylinders from cars_data group by cylinders;",
        "db_id": "car_1"
      },
      {
        "index": 141,
        "question": "Which model has the most version(make) of cars?",
        "predicted": "select model_name from cars_data order by count(*) desc limit 1",
        "gold": "select model from car_names group by model order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 142,
        "question": "What model has the most different versions?",
        "predicted": "select model_name from model_lists group by model_name order by count(distinct model_id) desc limit 1",
        "gold": "select model from car_names group by model order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 149,
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "predicted": "select t1.fname, t1.fname, t1.machine_id from car_makers as t1 join cars as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) > 3",
        "gold": "select t1.fullname ,  t1.id from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 150,
        "question": "What are the names and ids of all makers with more than 3 models?",
        "predicted": "select t1.fname, t1.facid from car_makers as t1 join model_company as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) > 3",
        "gold": "select t1.fullname ,  t1.id from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 151,
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "predicted": "select distinct t1.model from model_model as t1 join manufacturers as t2 on t1.manufacturer = t2.id where t2.full_name = \"general motors\" or t2.weight > 3500",
        "gold": "select distinct t2.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model join car_makers as t3 on t2.maker  =  t3.id join cars_data as t4 on t1.makeid  =  t4.id where t3.fullname  =  'general motors' or t4.weight  >  3500;",
        "db_id": "car_1"
      },
      {
        "index": 152,
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "predicted": "select distinct t1.model from model_list as t1 join models as t2 on t1.model_id = t2.model_id where t2.name = \"general motors\" or t2.weight > 3500",
        "gold": "select distinct t2.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model join car_makers as t3 on t2.maker  =  t3.id join cars_data as t4 on t1.makeid  =  t4.id where t3.fullname  =  'general motors' or t4.weight  >  3500;",
        "db_id": "car_1"
      },
      {
        "index": 155,
        "question": "What is the horsepower of the car with the largest accelerate?",
        "predicted": "select horsepower from cars_data order by accelerate_year desc limit 1",
        "gold": "select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 156,
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "predicted": "select horsepower from cars_data order by accelerate_year desc limit 1",
        "gold": "select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 157,
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "predicted": "select count(*) from cars_data where model_id = (select model_id from cars_data order by accelerate_year asc limit 1)",
        "gold": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 158,
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "predicted": "select count(*) from cars_data where model = (select model_id from cars_data group by model_id order by count(*) asc limit 1)",
        "gold": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 165,
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "predicted": "select model_name from cars_data where horsepower = 4",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 166,
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "predicted": "select model_name from cars_data order by horsepower desc limit 4",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 167,
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "predicted": "select distinct t1.driver, t1.make_name from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.mpg > 3",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <=  3;",
        "db_id": "car_1"
      },
      {
        "index": 168,
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "predicted": "select t1.machine_id, t1.make_name from cars as t1 join cars_data as t2 on t1.machine_id = t2.machine_id where t1.supplier!= 4",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "db_id": "car_1"
      },
      {
        "index": 169,
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "predicted": "select max(t1.miles_per_year) from cars as t1 join cars_data as t2 on t1.id = t2.driver_id where t2.number = \"8\" or t2.year  1980",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "db_id": "car_1"
      },
      {
        "index": 170,
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "predicted": "select max(t1.mpg) from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t2.machine_year  1980",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "db_id": "car_1"
      },
      {
        "index": 171,
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "predicted": "select model_name from models where weight  3500 except select model_name from model_company where built_name = 'ford motor company'",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id join car_makers as t4 on t1.maker  =  t4.id where t3.weight  <  3500 and t4.fullname != 'ford motor company';",
        "db_id": "car_1"
      },
      {
        "index": 172,
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "predicted": "select distinct model_model from model_list where weight  3500 except select distinct model_model from model_company where manufacturer_name = \"for ford motor company\"",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id join car_makers as t4 on t1.maker  =  t4.id where t3.weight  <  3500 and t4.fullname != 'ford motor company';",
        "db_id": "car_1"
      },
      {
        "index": 173,
        "question": "What are the name of the countries where there is not a single car maker?",
        "predicted": "select country_name from countries where country_id not in (select country_id from car_factories)",
        "gold": "select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country;",
        "db_id": "car_1"
      },
      {
        "index": 174,
        "question": "What are the names of the countries with no car makers?",
        "predicted": "select country_name from countries except select t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id",
        "gold": "select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country;",
        "db_id": "car_1"
      },
      {
        "index": 175,
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "predicted": "select t1.manufacturer_id from car_suppliers as t1 join car_factories as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) >= 2 intersect select t1.machine_id, t1.machine_make from car_suppliers as t1 join car_suppliers as t2 on t1.model_id = t2.model_id group by t1.manufacturer_id having count(*) > 3",
        "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 176,
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "predicted": "select t1.machine_id, t1.machine_make from car_makers as t1 join cars as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) >= 2 intersect select t1.machine_id, t1.machine_make from car_makers as t1 join cars as t2 on t1.model_id = t2.model_id group by t1.machine_model having count(*) > 3",
        "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 177,
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "predicted": "select t1.country, t1.country_name from countries as t1 join car_factories as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) > 3 union select t1.country_id, t1.country_name from countries as t1 join car_factories as t2 on t1.country_id = t2.country_id join model_name from countries as t3 on t2.country = t3.country_id where t3.model = 'fiat'",
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "db_id": "car_1"
      },
      {
        "index": 178,
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "predicted": "select t1.country_id, t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) > 3 union select t1.country_id, t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id group by t1.id having count(*) > 3",
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "db_id": "car_1"
      },
      {
        "index": 180,
        "question": "What country is Jetblue Airways affiliated with?",
        "predicted": "select t1.country from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"jilblue airways\"",
        "gold": "select country from airlines where airline  =  \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 183,
        "question": "List all airline names and their abbreviations in \"USA\".",
        "predicted": "select airline_name, abbreviation from airlines where country = \"usa\"",
        "gold": "select airline ,  abbreviation from airlines where country  =  \"usa\"",
        "db_id": "flight_2"
      },
      {
        "index": 184,
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "predicted": "select airline_name, abbreviation from airlines where country = 'usa'",
        "gold": "select airline ,  abbreviation from airlines where country  =  \"usa\"",
        "db_id": "flight_2"
      },
      {
        "index": 185,
        "question": "List the airport code and name in the city of Anthony.",
        "predicted": "select city_apid, airport_name from airports where city = \"anonymous\"",
        "gold": "select airportcode ,  airportname from airports where city  =  \"anthony\"",
        "db_id": "flight_2"
      },
      {
        "index": 186,
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "predicted": "select city_apid, airport_name from airports where city = \"anonymous\"",
        "gold": "select airportcode ,  airportname from airports where city  =  \"anthony\"",
        "db_id": "flight_2"
      },
      {
        "index": 197,
        "question": "Which city and country is the Alton airport at?",
        "predicted": "select city, country from airports where city = \"a alton\"",
        "gold": "select city ,  country from airports where airportname  =  \"alton\"",
        "db_id": "flight_2"
      },
      {
        "index": 198,
        "question": "Give the city and country for the Alton airport.",
        "predicted": "select city, country from airports where city = \"a alton\"",
        "gold": "select city ,  country from airports where airportname  =  \"alton\"",
        "db_id": "flight_2"
      },
      {
        "index": 199,
        "question": "What is the airport name for airport 'AKO'?",
        "predicted": "select airport_name from airports where airport_name = \"ako\"",
        "gold": "select airportname from airports where airportcode  =  \"ako\"",
        "db_id": "flight_2"
      },
      {
        "index": 200,
        "question": "Return the name of the airport with code 'AKO'.",
        "predicted": "select airport_name from airports where airport_code = 'ako'",
        "gold": "select airportname from airports where airportcode  =  \"ako\"",
        "db_id": "flight_2"
      },
      {
        "index": 201,
        "question": "What are airport names at City 'Aberdeen'?",
        "predicted": "select airport_name from airports where city = 'aberdeen'",
        "gold": "select airportname from airports where city = \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 202,
        "question": "What are the names of airports in Aberdeen?",
        "predicted": "select airport_name from airports where city = 'abern'",
        "gold": "select airportname from airports where city = \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 222,
        "question": "Which city has the most frequent destination airport?",
        "predicted": "select city from airports group by city order by count(*) desc limit 1",
        "gold": "select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 224,
        "question": "Which city is the most frequent source airport?",
        "predicted": "select city from airports group by city order by count(*) desc limit 1",
        "gold": "select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 225,
        "question": "What is the code of airport that has the highest number of flights?",
        "predicted": "select airport_code from flights group by airport_code order by count(*) desc limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 226,
        "question": "What is the airport code of the airport with the most flights?",
        "predicted": "select airport_code from flights group by airport_code order by count(*) desc limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 227,
        "question": "What is the code of airport that has fewest number of flights?",
        "predicted": "select airport_code from flights group by airport_code order by count(*) limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 228,
        "question": "Give the code of the airport with the least flights.",
        "predicted": "select airport_code from flights group by airport_code order by count(*) limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 229,
        "question": "Which airline has most number of flights?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 230,
        "question": "What airline serves the most flights?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 231,
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "predicted": "select t1.amenation, t1.country from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name order by count(*) limit 1",
        "gold": "select t1.abbreviation ,  t1.country from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 232,
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "predicted": "select t1.amenation, t1.country from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.country order by count(*) limit 1",
        "gold": "select t1.abbreviation ,  t1.country from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 233,
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select apid from airlines where airport = 'ahd')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 234,
        "question": "Which airlines have a flight with source airport AHD?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.name from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.src_apid = t2.apid join airlines as t3 on t2.alid = t3.alid where t1.alid = \"ahd\"",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 235,
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid = 'ahd')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.destairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 236,
        "question": "Which airlines have a flight with destination airport AHD?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.dst_apid = t2.apid where t1.apid in (select apid from airlines where airport = 'ahd')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.destairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 237,
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.alid from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.apid from airlines as t3 on t1.apid = t3.apid where t1.apid in (select t1.apid = 'cvo')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\"",
        "db_id": "flight_2"
      },
      {
        "index": 238,
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.name from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.apid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join flights as t4 on t3.alid = t4.alid where t3.apid in (select t1.apid in (select t1.apid from airlines as t3 join airports as t4 on t3.apid = t4.apid where t3.apid in (select t1.apid from airlines as t3 join airlines as t4 on t3.alid = t4.apid where t3.apid in (select t1.apid in (select t3.apid from airlines as t4 on t3.alid = t4.apid where t3.apid in (select t1.apid in (select t1.apid from airlines as t4 on t3.alid = t4.apid where t4.apid in (select t1.apid in (select t1.apid from airlines as t4 on t3.alid = t4.apid where t4.apid in (select t1.apid from airlines as t4 on t3.alid",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\"",
        "db_id": "flight_2"
      },
      {
        "index": 239,
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.alid from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.alid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t3 join airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t4.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t4.apid in (select t3.alid from airlines as t4 on t3.alid =",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 240,
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t1.alid = \"cvo\" except select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.alid = t3.apid where t1.apid in (select t1.alid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.alid = t3.alid where t1.alid = \"apg\")",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 241,
        "question": "Find all airlines that have at least 10 flights.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name having count(*) >= 10",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  >  10",
        "db_id": "flight_2"
      },
      {
        "index": 242,
        "question": "Which airlines have at least 10 flights?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name having count(*) >= 10",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  >  10",
        "db_id": "flight_2"
      },
      {
        "index": 243,
        "question": "Find all airlines that have fewer than 200 flights.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name having count(*)  200",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  <  200",
        "db_id": "flight_2"
      },
      {
        "index": 244,
        "question": "Which airlines have less than 200 flights?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name having count(*)  200",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  <  200",
        "db_id": "flight_2"
      },
      {
        "index": 245,
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "predicted": "select flno from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"airline\" and t1.alid = \"united airlines\"",
        "gold": "select t1.flightno from flights as t1 join airlines as t2 on t2.uid  =  t1.airline where t2.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 246,
        "question": "Which flight numbers correspond to United Airlines flights?",
        "predicted": "select flno from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.alid = \"united airlines\"",
        "gold": "select t1.flightno from flights as t1 join airlines as t2 on t2.uid  =  t1.airline where t2.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 247,
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "predicted": "select flno from flights where dst_apid in (select apid from airports where airport_name = \"apg\")",
        "gold": "select flightno from flights where sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 248,
        "question": "Give the flight numbers of flights leaving from APG.",
        "predicted": "select flno from flights where origin_apid in (select apid from flights where origin_apid in (select apid from flights where destination = \"apg\")",
        "gold": "select flightno from flights where sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 249,
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "predicted": "select t1.flno from flights as t1 join airports as t2 on t1.dst_apid = t2.apid where t2.apid in (select apid from airports as t1 join flights as t2 on t1.apid = t2.dst_apid where t1.apid in (select apid from airports where airport_name = \"apg\")",
        "gold": "select flightno from flights where destairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 250,
        "question": "Give the flight numbers of flights landing at APG.",
        "predicted": "select flno from flights where airport = \"apg\"",
        "gold": "select flightno from flights where destairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 251,
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "predicted": "select flno from flights where origin_apid in (select apid from airports where city = \"aberdeen\")",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 252,
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "predicted": "select flno from flights where destination = 'atlanta'",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 253,
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "predicted": "select flno from flights where city = \"aberdeen\"",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.destairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 254,
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "predicted": "select flno from flights where destination = 'atlanta'",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.destairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 257,
        "question": "Find the name of airports which do not have any flight in and out.",
        "predicted": "select airport_name from airports where airport_code not in (select airport_code from flights)",
        "gold": "select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "db_id": "flight_2"
      },
      {
        "index": 258,
        "question": "Which airports do not have departing or arriving flights?",
        "predicted": "select airport_name from airports except select dst_apid from flights",
        "gold": "select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "db_id": "flight_2"
      },
      {
        "index": 263,
        "question": "What is the number of employees from each city?",
        "predicted": "select count(*), city from employee group by city",
        "gold": "select count(*) ,  city from employee group by city",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 264,
        "question": "Count the number of employees for each city.",
        "predicted": "select count(*), city from employee group by city",
        "gold": "select count(*) ,  city from employee group by city",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 267,
        "question": "Find the number of shops in each location.",
        "predicted": "select location, count(*) from shop group by location",
        "gold": "select count(*) ,  location from shop group by location",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 268,
        "question": "How many shops are there in each location?",
        "predicted": "select location, count(*) from shop group by location",
        "gold": "select count(*) ,  location from shop group by location",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 269,
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "predicted": "select manager_name, district from shop order by products desc limit 1",
        "gold": "select manager_name ,  district from shop order by number_products desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 270,
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "predicted": "select t2.manager_name, t2.district from products as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "gold": "select manager_name ,  district from shop order by number_products desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 271,
        "question": "find the minimum and maximum number of products of all stores.",
        "predicted": "select min(products), max(products) from shop",
        "gold": "select min(number_products) ,  max(number_products) from shop",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 272,
        "question": "What are the minimum and maximum number of products across all the shops?",
        "predicted": "select min(products), max(products) from shop",
        "gold": "select min(number_products) ,  max(number_products) from shop",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 273,
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "predicted": "select name, location, district from shop order by products desc",
        "gold": "select name ,  location ,  district from shop order by number_products desc",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 274,
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "predicted": "select name, location, district from shop order by count(*) desc",
        "gold": "select name ,  location ,  district from shop order by number_products desc",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 287,
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "predicted": "select t2.name, count(*) from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id",
        "gold": "select count(*) ,  t2.name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t2.name",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 288,
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "predicted": "select t1.name, count(*) from shop as t1 join employee as t2 on t1.shop_id = t2.shop_id group by t1.shop_id",
        "gold": "select count(*) ,  t2.name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t2.name",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 290,
        "question": "Find the total amount of bonus given in all the evaluations.",
        "predicted": "select sum(amount) from evaluation",
        "gold": "select sum(bonus) from evaluation",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 296,
        "question": "Count the number of distinct store locations.",
        "predicted": "select count(course_location) from shop",
        "gold": "select count(distinct location) from shop",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 299,
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "predicted": "select document_id, document_name, document_description from documents",
        "gold": "select document_id ,  document_name ,  document_description from documents",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 300,
        "question": "What are the ids, names, and descriptions for all documents?",
        "predicted": "select document_id, document_name, document_description from documents",
        "gold": "select document_id ,  document_name ,  document_description from documents",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 301,
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "predicted": "select document_name, document_type_id from documents where document_description like '%w%'",
        "gold": "select document_name ,  template_id from documents where document_description like \"%w%\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 302,
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "predicted": "select document_name, document_name from documents where document_description like '%w%'",
        "gold": "select document_name ,  template_id from documents where document_description like \"%w%\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 303,
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "predicted": "select t1.document_id, t1.document_id, t2.document_description from documents as t1 join documents as t2 on t1.document_id = t2.document_id where t1.document_name = \"robbin cv\"",
        "gold": "select document_id ,  template_id ,  document_description from documents where document_name  =  \"robbin cv\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 304,
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "predicted": "select document_id, document_name, document_description from documents where document_name = \"robbin cv\"",
        "gold": "select document_id ,  template_id ,  document_description from documents where document_name  =  \"robbin cv\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 305,
        "question": "How many different templates do all document use?",
        "predicted": "select count(*) from documents",
        "gold": "select count(distinct template_id) from documents",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 309,
        "question": "Show all template ids and number of documents using each template.",
        "predicted": "select template_id, count(*) from documents group by template_id",
        "gold": "select template_id ,  count(*) from documents group by template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 310,
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "predicted": "select template_id, count(*) from documents group by template_id",
        "gold": "select template_id ,  count(*) from documents group by template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 311,
        "question": "What is the id and type code for the template used by the most documents?",
        "predicted": "select t1.document_id, t1.document_type_code from templates as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.template_id ,  t2.template_type_code from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 312,
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "predicted": "select t1.document_id, t1.document_type_code from templates as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.template_id ,  t2.template_type_code from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 319,
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "predicted": "select template_id, version_number, template_type_code from templates",
        "gold": "select template_id ,  version_number ,  template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 320,
        "question": "What are the ids, version numbers, and type codes for each template?",
        "predicted": "select template_id, version_number, template_type_code from templates",
        "gold": "select template_id ,  version_number ,  template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 327,
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "predicted": "select t1.document_number, t1.document_type_code from templates as t1 join templates as t2 on t1.document_type_code = t2.document_type_code where t1.date_of_date > 5",
        "gold": "select version_number ,  template_type_code from templates where version_number  >  5",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 328,
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "predicted": "select t1.document_number, t1.document_type_code from templates as t1 join templates as t2 on t1. templates_id = t2. templates_id where t1.date_number > 5",
        "gold": "select version_number ,  template_type_code from templates where version_number  >  5",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 329,
        "question": "Show all template type codes and number of templates for each.",
        "predicted": "select template_type_code, count(*) from templates group by template_type_code",
        "gold": "select template_type_code ,  count(*) from templates group by template_type_code",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 330,
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "predicted": "select template_type_code, count(*) from templates group by template_type_code",
        "gold": "select template_type_code ,  count(*) from templates group by template_type_code",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 335,
        "question": "What the smallest version number and its template type code?",
        "predicted": "select min(version_number), template_type_code from templates",
        "gold": "select min(version_number) ,  template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 336,
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "predicted": "select min(version_number), template_type_code from templates;",
        "gold": "select min(version_number) ,  template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 337,
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "predicted": "select t2.model_type_code from documents as t1 join templates as t2 on t1.document_id = t2.document_id where t1.document_name = \"data base\"",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t2.document_name  =  \"data base\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 338,
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "predicted": "select t2.document_type_code from documents as t1 join templates as t2 on t1.document_id = t2.document_id where t1.document_name = \"data base\"",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t2.document_name  =  \"data base\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 339,
        "question": "Show all document names using templates with template type code BK.",
        "predicted": "select document_name from documents where template_type_code = \"bk\"",
        "gold": "select t2.document_name from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t1.template_type_code  =  \"bk\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 340,
        "question": "What are the names of documents that use templates with the code BK?",
        "predicted": "select document_name from documents where template_id = \"bk\"",
        "gold": "select t2.document_name from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t1.template_type_code  =  \"bk\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 341,
        "question": "Show all template type codes and the number of documents using each type.",
        "predicted": "select template_type_code, count(*) from documents group by template_type_code",
        "gold": "select t1.template_type_code ,  count(*) from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 342,
        "question": "What are the different template type codes, and how many documents use each type?",
        "predicted": "select template_type_code, count(*) from documents group by template_type_code",
        "gold": "select t1.template_type_code ,  count(*) from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 343,
        "question": "Which template type code is used by most number of documents?",
        "predicted": "select template_type_code from documents group by template_type_code order by count(*) desc limit 1",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 344,
        "question": "Return the code of the template type that is most commonly used in documents.",
        "predicted": "select template_type_code from documents group by template_type_code order by count(*) desc limit 1",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 347,
        "question": "Show all template type codes and descriptions.",
        "predicted": "select template_type_code, template_type_description from ref_document_types",
        "gold": "select template_type_code ,  template_type_description from ref_template_types",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 348,
        "question": "What are the type codes and descriptions for all template types?",
        "predicted": "select template_type_code, template_type_description from ref_document_types",
        "gold": "select template_type_code ,  template_type_description from ref_template_types",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 353,
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "predicted": "select distinct t1.document_type_description from ref_ templates as t1 join documents as t2 on t1.document_type_code = t2.document_type_code",
        "gold": "select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code join documents as t3 on t2.template_id  =  t3.template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 354,
        "question": "Return the different descriptions for templates that have been used in a document.",
        "predicted": "select distinct template_description from documents",
        "gold": "select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code join documents as t3 on t2.template_id  =  t3.template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 355,
        "question": "What are the template ids with template type description \"Presentation\".",
        "predicted": "select template_id from ref_shipping_types where template_type_description = \"presentation\"",
        "gold": "select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code where t1.template_type_description  =  \"presentation\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 356,
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "predicted": "select template_id from templates where template_description = 'presentation'",
        "gold": "select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code where t1.template_type_description  =  \"presentation\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 361,
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "predicted": "select paragraph_details from paragraphs where text like '%korea%'",
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 362,
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "predicted": "select paragraph_details from paragraphs where paragraph_text like '%korea%'",
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 363,
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "predicted": "select t1.parat_id, t1.title_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"welcome to ny\"",
        "gold": "select t1.paragraph_id ,   t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'welcome to ny'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 364,
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "predicted": "select t1.parat_id, t1.parat_text from paragraphs as t1 join documents as t2 on t1.parat_id = t2.parat_id where t2.document_name = \"welcome to ny\"",
        "gold": "select t1.paragraph_id ,   t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'welcome to ny'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 365,
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "predicted": "select t1.parat_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"customer reviews\"",
        "gold": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  \"customer reviews\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 366,
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "predicted": "select t1.parat_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"customer reviews\"",
        "gold": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  \"customer reviews\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 367,
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "predicted": "select document_id, count(*) from paragraphs group by document_id order by document_id",
        "gold": "select document_id ,  count(*) from paragraphs group by document_id order by document_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 368,
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "predicted": "select document_id, count(*) from paragraphs group by document_id order by document_id",
        "gold": "select document_id ,  count(*) from paragraphs group by document_id order by document_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 369,
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "predicted": "select t1.document_id, t1.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "gold": "select t1.document_id ,  t2.document_name ,  count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 370,
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "predicted": "select t1.document_id, t1.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "gold": "select t1.document_id ,  t2.document_name ,  count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 373,
        "question": "What is the document id and name with greatest number of paragraphs?",
        "predicted": "select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.document_id ,  t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 374,
        "question": "Return the id and name of the document with the most paragraphs.",
        "predicted": "select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.document_id ,  t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 385,
        "question": "What are the age and hometown of teachers?",
        "predicted": "select age, hometown from teacher",
        "gold": "select age ,  hometown from teacher",
        "db_id": "course_teach"
      },
      {
        "index": 386,
        "question": "What is the age and hometown of every teacher?",
        "predicted": "select age, hometown from teacher",
        "gold": "select age ,  hometown from teacher",
        "db_id": "course_teach"
      },
      {
        "index": 391,
        "question": "What is the hometown of the youngest teacher?",
        "predicted": "select t2.hometown from course as t1 join teacher as t2 on t1.instructor = t2.instructor_id order by t1.age limit 1",
        "gold": "select hometown from teacher order by age asc limit 1",
        "db_id": "course_teach"
      },
      {
        "index": 392,
        "question": "Where is the youngest teacher from?",
        "predicted": "select t1.name from teacher as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id order by t2.age limit 1",
        "gold": "select hometown from teacher order by age asc limit 1",
        "db_id": "course_teach"
      },
      {
        "index": 393,
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "predicted": "select t2.hometown, count(*) from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.hometown",
        "gold": "select hometown ,  count(*) from teacher group by hometown",
        "db_id": "course_teach"
      },
      {
        "index": 394,
        "question": "For each hometown, how many teachers are there?",
        "predicted": "select t2.hometown, count(*) from instructor as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.hometown",
        "gold": "select hometown ,  count(*) from teacher group by hometown",
        "db_id": "course_teach"
      },
      {
        "index": 398,
        "question": "What are the towns from which at least two teachers come from?",
        "predicted": "select t1.hometown from teacher as t1 join teacher as t2 on t1.instructor_id = t2.instructor_id group by t1.hometown having count(*) >= 2",
        "gold": "select hometown from teacher group by hometown having count(*)  >=  2",
        "db_id": "course_teach"
      },
      {
        "index": 399,
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "predicted": "select t2.name, t1.course_id from course_order as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id",
        "db_id": "course_teach"
      },
      {
        "index": 400,
        "question": "What is the name of each teacher and what course they teach?",
        "predicted": "select t2.name, t1.course_id from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id",
        "db_id": "course_teach"
      },
      {
        "index": 401,
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "predicted": "select t2.name, t1.course_id from course_order as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id order by t2.name asc",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id order by t3.name",
        "db_id": "course_teach"
      },
      {
        "index": 402,
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "predicted": "select t2.name, t1.course_id from course as t1 join teachers as t2 on t1.teacher_id = t2.teacher_id order by t2.name",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id order by t3.name",
        "db_id": "course_teach"
      },
      {
        "index": 403,
        "question": "Show the name of the teacher for the math course.",
        "predicted": "select t2.name from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t1.course_name = \"math\"",
        "gold": "select t3.name from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id where t2.course  =  \"math\"",
        "db_id": "course_teach"
      },
      {
        "index": 404,
        "question": "What are the names of the people who teach math courses?",
        "predicted": "select t2.name from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t1.course_id = 'math'",
        "gold": "select t3.name from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id where t2.course  =  \"math\"",
        "db_id": "course_teach"
      },
      {
        "index": 405,
        "question": "Show names of teachers and the number of courses they teach.",
        "predicted": "select t2.name, count(*) from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id",
        "gold": "select t2.name ,  count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t2.name",
        "db_id": "course_teach"
      },
      {
        "index": 406,
        "question": "What are the names of the teachers and how many courses do they teach?",
        "predicted": "select t2.name, count(*) from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id",
        "gold": "select t2.name ,  count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t2.name",
        "db_id": "course_teach"
      },
      {
        "index": 414,
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "predicted": "select name, level_of_membership from customer where age > 4 order by age",
        "gold": "select name ,  level_of_membership from visitor where level_of_membership  >  4 order by age desc",
        "db_id": "museum_visit"
      },
      {
        "index": 415,
        "question": "Find the id and name of the museum that has the most staff members?",
        "predicted": "select museum_id, name from museum order by num_of_staff desc limit 1",
        "gold": "select museum_id ,  name from museum order by num_of_staff desc limit 1",
        "db_id": "museum_visit"
      },
      {
        "index": 417,
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "predicted": "select open_year, num_of_staff from museum where name = 'place museum'",
        "gold": "select num_of_staff ,  open_year from museum where name  =  'plaza museum'",
        "db_id": "museum_visit"
      },
      {
        "index": 419,
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "predicted": "select t1.customer_id, t1.name, t1.age from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id group by t1.customer_id having count(*) > 1",
        "gold": "select t1.id ,  t1.name ,  t1.age from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id group by t1.id having count(*)  >  1",
        "db_id": "museum_visit"
      },
      {
        "index": 420,
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "predicted": "select t1.customer_id, t1.name, t2.level from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id group by t1.customer_id order by sum(total_cost_cost) desc limit 1",
        "gold": "select t2.visitor_id ,  t1.name ,  t1.level_of_membership from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id group by t2.visitor_id order by sum(t2.total_spent) desc limit 1",
        "db_id": "museum_visit"
      },
      {
        "index": 421,
        "question": "What are the id and name of the museum visited most times?",
        "predicted": "select t1.museum_id, t1.name from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id group by t1.museum_id order by count(*) desc limit 1",
        "gold": "select t2.museum_id ,  t1.name from museum as t1 join visit as t2 on t1.museum_id  =  t2.museum_id group by t2.museum_id order by count(*) desc limit 1",
        "db_id": "museum_visit"
      },
      {
        "index": 423,
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "predicted": "select t1.name, t1.age from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id group by t1.customer_id order by sum(total_ticket_total) desc limit 1",
        "gold": "select t1.name ,  t1.age from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id order by t2.num_of_ticket desc limit 1",
        "db_id": "museum_visit"
      },
      {
        "index": 424,
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "predicted": "select avg(num_of_tickets), max(num_of_tickets) from visit",
        "gold": "select avg(num_of_ticket) ,  max(num_of_ticket) from visit",
        "db_id": "museum_visit"
      },
      {
        "index": 425,
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "predicted": "select sum(total_cost_cost) from customer where level = 1",
        "gold": "select sum(t2.total_spent) from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id where t1.level_of_membership  =  1",
        "db_id": "museum_visit"
      },
      {
        "index": 433,
        "question": "List the first name and birth date of all players from the country with code USA.",
        "predicted": "select first_name, birth_date from players where country_code = \"usa\"",
        "gold": "select first_name ,  birth_date from players where country_code  =  'usa'",
        "db_id": "wta_1"
      },
      {
        "index": 434,
        "question": "What are the first names and birth dates of players from the USA?",
        "predicted": "select first_name, birth_date from players where country_code = \"usa\"",
        "gold": "select first_name ,  birth_date from players where country_code  =  'usa'",
        "db_id": "wta_1"
      },
      {
        "index": 435,
        "question": "Find the average age of losers and winners of all matches.",
        "predicted": "select avg(t1.age), avg(t1.winner) from matches as t1 join match as t2 on t1.player_id = t2.player_id",
        "gold": "select avg(loser_age) ,  avg(winner_age) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 436,
        "question": "What are the average ages of losers and winners across matches?",
        "predicted": "select avg(t1.age), avg(t1.winner) from matches as t1 join match as t2 on t1.match_id = t2.match_id",
        "gold": "select avg(loser_age) ,  avg(winner_age) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 437,
        "question": "Find the average rank of winners in all matches.",
        "predicted": "select avg(rank) from match",
        "gold": "select avg(winner_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 438,
        "question": "What is the average rank for winners in all matches?",
        "predicted": "select avg(rank) from matchs",
        "gold": "select avg(winner_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 439,
        "question": "Find the highest rank of losers in all matches.",
        "predicted": "select rank from players order by rank asc limit 1",
        "gold": "select min(loser_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 440,
        "question": "What is the best rank of losers across all matches?",
        "predicted": "select rank from players order by distance desc limit 1",
        "gold": "select min(loser_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 443,
        "question": "Find the number of distinct name of losers.",
        "predicted": "select count(distinct name) from players",
        "gold": "select count(distinct loser_name) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 444,
        "question": "How many different loser names are there?",
        "predicted": "select count(distinct loser) from match",
        "gold": "select count(distinct loser_name) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 445,
        "question": "Find the name of tourney that has more than 10 matches.",
        "predicted": "select t1.name from tourneys as t1 join matchs as t2 on t1.tournament_id = t2.tournament_id group by t2.tournament_name having count(*) > 10",
        "gold": "select tourney_name from matches group by tourney_name having count(*)  >  10",
        "db_id": "wta_1"
      },
      {
        "index": 446,
        "question": "What are the names of tournaments that have more than 10 matches?",
        "predicted": "select t2.name from matches as t1 join tournaments as t2 on t1.tournament_id = t2.tournament_id group by t2.name having count(*) > 10",
        "gold": "select tourney_name from matches group by tourney_name having count(*)  >  10",
        "db_id": "wta_1"
      },
      {
        "index": 447,
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "predicted": "select t2.winner_name from rankings as t1 join team as t2 on t1.team = t2.team_id where t1.year = 2014 intersect select t2.winner_name from rankings as t1 join matches as t2 on t1.winning_id = t2.winning_id where t1.year = 2016",
        "gold": "select winner_name from matches where year  =  2013 intersect select winner_name from matches where year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 448,
        "question": "What are the names of players who won in both 2013 and 2016?",
        "predicted": "select t2.name from rankings as t1 join player as t2 on t1.player_id = t2.player_id where t1.year = 2013 intersect select t2.name from rankings as t1 join players as t2 on t1.player_id = t2.player_id where t1.year = 2016",
        "gold": "select winner_name from matches where year  =  2013 intersect select winner_name from matches where year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 451,
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "predicted": "select t1.country_code, t1.first_name from players as t1 join matchs as t2 on t1.player_id = t2.player_id where t2.winning_name = \"australia open\" intersect select t1.country_code, t1.winning_name from players as t1 join matchs as t2 on t1.player_id = t2.player_id where t2.winning_year = \"tournament\"",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'wta championships' intersect select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'australian open'",
        "db_id": "wta_1"
      },
      {
        "index": 452,
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "predicted": "select t2.first_name, t2.country_code from ratings as t1 join players as t2 on t1.player_id = t2.player_id where t1.rank = \"wta championship\" intersect select t2.first_name, t1.country_code from ratings as t1 join matches as t2 on t1.winning_id = t2.winning_id where t1.name = \"australia open\"",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'wta championships' intersect select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'australian open'",
        "db_id": "wta_1"
      },
      {
        "index": 453,
        "question": "Find the first name and country code of the oldest player.",
        "predicted": "select firstname, country_code from player order by age desc limit 1",
        "gold": "select first_name ,  country_code from players order by birth_date limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 454,
        "question": "What is the first name and country code of the oldest player?",
        "predicted": "select firstname, country_code from player order by age desc limit 1",
        "gold": "select first_name ,  country_code from players order by birth_date limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 455,
        "question": "List the first and last name of all players in the order of birth date.",
        "predicted": "select first_name, last_name from players order by birth_date",
        "gold": "select first_name ,  last_name from players order by birth_date",
        "db_id": "wta_1"
      },
      {
        "index": 456,
        "question": "What are the full names of all players, sorted by birth date?",
        "predicted": "select first_name, last_name from players order by birth_date",
        "gold": "select first_name ,  last_name from players order by birth_date",
        "db_id": "wta_1"
      },
      {
        "index": 457,
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "predicted": "select first_name, last_name from players where birth_date = \"left\" order by birth_date",
        "gold": "select first_name ,  last_name from players where hand  =  'l' order by birth_date",
        "db_id": "wta_1"
      },
      {
        "index": 458,
        "question": "What are the full names of all left handed players, in order of birth date?",
        "predicted": "select first_name, last_name from players order by birth_date",
        "gold": "select first_name ,  last_name from players where hand  =  'l' order by birth_date",
        "db_id": "wta_1"
      },
      {
        "index": 459,
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "predicted": "select t2.first_name, t2.country_code from ratings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 460,
        "question": "What is the first name and country code of the player with the most tours?",
        "predicted": "select t2.first_name, t2.country_code from performances as t1 join player as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 463,
        "question": "Find the name and rank points of the winner who won the most times.",
        "predicted": "select t2.name, t2.rank_points from rankings as t1 join match as t2 on t1.tournament_id = t2.winner_id group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name ,  winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 464,
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "predicted": "select t2.winning_name, count(*) from rankings as t1 join team as t2 on t1.team_id = t2.team_id group by t1.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name ,  winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 465,
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "predicted": "select t2.winning_name from rankings as t1 join match as t2 on t1.winning_id = t2.winning_id where t1.country = \"australia open open\" group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 466,
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "predicted": "select t2.winning_name from rankings as t1 join results as t2 on t1.winning_id = t2.winning_id where t1.country = \"australia open open\" group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 467,
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "predicted": "select t2.winning_name, t2.winning_name from matches as t1 join players as t2 on t1.match_id = t2.match_id group by t2.winning_r order by sum(t1.minutes) desc limit 1",
        "gold": "select winner_name ,  loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 468,
        "question": "What are the names of the winner and loser who played in the longest match?",
        "predicted": "select t2.winning_name, t2.loser_r = t1.winning_r where t2.year = (select max(year) from matches)",
        "gold": "select winner_name ,  loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 469,
        "question": "Find the average ranking for each player and their first name.",
        "predicted": "select avg(t1.ranking_points), t2.first_name from ratings as t1 join players as t2 on t1.player_id = t2.player_id group by t2.name",
        "gold": "select avg(ranking) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 470,
        "question": "What are the first names of all players, and their average rankings?",
        "predicted": "select t2.first_name, t2.last_name, avg(t1.ranking_points) from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "gold": "select avg(ranking) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 471,
        "question": "Find the total ranking points for each player and their first name.",
        "predicted": "select t1.ranking_points, t2.first_name from rankings as t1 join players as t2 on t1.player_id = t2.player_id",
        "gold": "select sum(ranking_points) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 472,
        "question": "What are the first names of all players, and their total ranking points?",
        "predicted": "select t2.first_name, t2.ranked_points from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "gold": "select sum(ranking_points) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 473,
        "question": "find the number of players for each country.",
        "predicted": "select count(*), country_code from player group by country_code",
        "gold": "select count(*) ,  country_code from players group by country_code",
        "db_id": "wta_1"
      },
      {
        "index": 474,
        "question": "How many players are from each country?",
        "predicted": "select country_code, count(*) from player group by country_code",
        "gold": "select count(*) ,  country_code from players group by country_code",
        "db_id": "wta_1"
      },
      {
        "index": 479,
        "question": "Find the total number of tours for each ranking date.",
        "predicted": "select ranking_date, count(*) from courses group by ranking_date",
        "gold": "select sum(tours) ,  ranking_date from rankings group by ranking_date",
        "db_id": "wta_1"
      },
      {
        "index": 480,
        "question": "How many total tours were there for each ranking date?",
        "predicted": "select ranking_date, count(*) from courses group by ranking_date",
        "gold": "select sum(tours) ,  ranking_date from rankings group by ranking_date",
        "db_id": "wta_1"
      },
      {
        "index": 481,
        "question": "Find the number of matches happened in each year.",
        "predicted": "select count(*), year from matchs group by year",
        "gold": "select count(*) ,  year from matches group by year",
        "db_id": "wta_1"
      },
      {
        "index": 482,
        "question": "How many matches were played in each year?",
        "predicted": "select count(*), year from matchs group by year",
        "gold": "select count(*) ,  year from matches group by year",
        "db_id": "wta_1"
      },
      {
        "index": 483,
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "predicted": "select t2.winning_name, t2.rank from matches as t1 join players as t2 on t1.player_id = t2.player_id order by t1.age limit 3",
        "gold": "select distinct winner_name ,  winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1"
      },
      {
        "index": 484,
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "predicted": "select t2.winner_name, t2.rank from matches as t1 join rankings as t2 on t1.winning_id = t2.winning_id order by t1.age limit 3",
        "gold": "select distinct winner_name ,  winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1"
      },
      {
        "index": 485,
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "predicted": "select count(*) from matchs where class = \"wta championship\" intersect select count(*) from wins where class = \"left\"",
        "gold": "select count(distinct winner_name) from matches where tourney_name  =  'wta championships' and winner_hand  =  'l'",
        "db_id": "wta_1"
      },
      {
        "index": 486,
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "predicted": "select count(*) from matchs where t2.winning_name = \"left\" and t1.year = \"wta championships\"",
        "gold": "select count(distinct winner_name) from matches where tourney_name  =  'wta championships' and winner_hand  =  'l'",
        "db_id": "wta_1"
      },
      {
        "index": 487,
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "predicted": "select t2.first_name, t1.country_code, t2.birth_name from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select t1.first_name ,  t1.country_code ,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 488,
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "predicted": "select t2.first_name, t1.country_code, t2.birthday from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.first_name ,  t1.country_code ,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 489,
        "question": "Find the number of players for each hand type.",
        "predicted": "select hand_type, count(*) from player group by hand_type",
        "gold": "select count(*) ,  hand from players group by hand",
        "db_id": "wta_1"
      },
      {
        "index": 490,
        "question": "How many players are there for each hand type?",
        "predicted": "select hand_type, count(*) from player group by hand_type",
        "gold": "select count(*) ,  hand from players group by hand",
        "db_id": "wta_1"
      },
      {
        "index": 492,
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "predicted": "select name, tonnage from ship order by name desc",
        "gold": "select name ,  tonnage from ship order by name desc",
        "db_id": "battle_death"
      },
      {
        "index": 493,
        "question": "List the name, date and result of each battle.",
        "predicted": "select name, date, result from battle",
        "gold": "select name ,  date from battle",
        "db_id": "battle_death"
      },
      {
        "index": 494,
        "question": "What is maximum and minimum death toll caused each time?",
        "predicted": "select max(death), min(deaths), time from death group by time",
        "gold": "select max(killed) ,  min(killed) from death",
        "db_id": "battle_death"
      },
      {
        "index": 495,
        "question": "What is the average number of injuries caused each time?",
        "predicted": "select avg(injured), time from death group by time",
        "gold": "select avg(injured) from death",
        "db_id": "battle_death"
      },
      {
        "index": 496,
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "predicted": "select t1.death, t1.injury from death as t1 join ship as t2 on t1.ship_id = t2.ship_id where t2.tonnage!= \"tonnage\"",
        "gold": "select t1.killed ,  t1.injured from death as t1 join ship as t2 on t1.caused_by_ship_id  =  t2.id where t2.tonnage  =  't'",
        "db_id": "battle_death"
      },
      {
        "index": 497,
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "predicted": "select name, t1.result from battle as t1 join commander as t2 on t1.armed = t2.armed where t2.kompetition!= 'boril'",
        "gold": "select name ,  result from battle where bulgarian_commander != 'boril'",
        "db_id": "battle_death"
      },
      {
        "index": 498,
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "predicted": "select distinct t1.id, t2.name from ship as t1 join death as t2 on t1.id = t2.ship_id where t1.type = 'brig'",
        "gold": "select distinct t1.id ,  t1.name from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.ship_type  =  'brig'",
        "db_id": "battle_death"
      },
      {
        "index": 499,
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "predicted": "select t1.id, t2.name from death as t1 join ship as t2 on t1.ship_id = t2.id group by t1.ship_id having count(*) > 10",
        "gold": "select t1.id ,  t1.name from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle join death as t3 on t2.id  =  t3.caused_by_ship_id group by t1.id having sum(t3.killed)  >  10",
        "db_id": "battle_death"
      },
      {
        "index": 500,
        "question": "What is the ship id and name that caused most total injuries?",
        "predicted": "select t1.ship_id, t1.name from ship as t1 join death as t2 on t1.ship_id = t2.ship_id group by t2.ship_id order by sum(t2.injury) desc limit 1",
        "gold": "select t2.id ,  t2.name from death as t1 join ship as t2 on t1.caused_by_ship_id  =  t2.id group by t2.id order by count(*) desc limit 1",
        "db_id": "battle_death"
      },
      {
        "index": 501,
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "predicted": "select distinct t2.name from rank as t1 join battle as t2 on t1.film_id = t2.baldwin i'",
        "gold": "select name from battle where bulgarian_commander  =  'kaloyan' and latin_commander  =  'baldwin i'",
        "db_id": "battle_death"
      },
      {
        "index": 504,
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "predicted": "select t2.name, t2.date from ship as t1 join death as t2 on t1.id = t2.ship_id join ship as t3 on t2.ship_id = t3.id where t1.name = 'lettice' and t2.name = 'hms atalanta'",
        "gold": "select t1.name ,  t1.date from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.name  =  'lettice' intersect select t1.name ,  t1.date from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.name  =  'hms atalanta'",
        "db_id": "battle_death"
      },
      {
        "index": 505,
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "predicted": "select name, results, bulgarian commander from battle where ship_id not in (select ship_id from death where location = 'english channel')",
        "gold": "select name ,  result ,  bulgarian_commander from battle except select t1.name ,  t1.result ,  t1.bulgarian_commander from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.location  =  'english channel'",
        "db_id": "battle_death"
      },
      {
        "index": 507,
        "question": "what are all the addresses including line 1 and line 2?",
        "predicted": "select address_id from addresses where line_1 like \"%\" and line_2",
        "gold": "select line_1 ,  line_2 from addresses",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 508,
        "question": "What is the first and second line for all addresses?",
        "predicted": "select first_name, last_line_1 from addresses",
        "gold": "select line_1 ,  line_2 from addresses",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 515,
        "question": "Which department offers the most number of degrees? List department name and id.",
        "predicted": "select t2.dept_name, t1.dept_id from degrees as t1 join departments as t2 on t1.dept_name = t2.dept_id group by t1.dept_name order by count(*) desc limit 1",
        "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 516,
        "question": "What is the name and id of the department with the most number of degrees ?",
        "predicted": "select dept_name, dept_id from degrees group by dept_name order by count(*) desc limit 1",
        "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 517,
        "question": "How many departments offer any degree?",
        "predicted": "select count(distinct dept_name) from degrees",
        "gold": "select count(distinct department_id) from degree_programs",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 518,
        "question": "How many different departments offer degrees?",
        "predicted": "select count(distinct dept_name) from degrees",
        "gold": "select count(distinct department_id) from degree_programs",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 519,
        "question": "How many different degree names are offered?",
        "predicted": "select count(distinct degree_name) from degree_programs",
        "gold": "select count(distinct degree_summary_name) from degree_programs",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 520,
        "question": "How many different degrees are offered?",
        "predicted": "select count(distinct degrees) from student_programs",
        "gold": "select count(distinct degree_summary_name) from degree_programs",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 523,
        "question": "What are the names and descriptions of all the sections?",
        "predicted": "select section_name, section_description from sections",
        "gold": "select section_name ,  section_description from sections",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 524,
        "question": "What are the names and descriptions for all the sections?",
        "predicted": "select section_name, section_description from sections",
        "gold": "select section_name ,  section_description from sections",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 525,
        "question": "What are the names and id of courses having at most 2 sections?",
        "predicted": "select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) = 2",
        "gold": "select t1.course_name ,  t1.course_id from courses as t1 join sections as t2 on t1.course_id  =  t2.course_id group by t1.course_id having count(*)  <=  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 526,
        "question": "What are the names and ids of every course with less than 2 sections?",
        "predicted": "select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*)  2",
        "gold": "select t1.course_name ,  t1.course_id from courses as t1 join sections as t2 on t1.course_id  =  t2.course_id group by t1.course_id having count(*)  <=  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 529,
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "predicted": "select semester_name, semester_id from student_enrolment group by semester_id order by count(*) desc limit 1",
        "gold": "select t1.semester_name ,  t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id  =  t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 530,
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "predicted": "select t2.semester_name, t1.semester_id from student_enrolment as t1 join semesters as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "gold": "select t1.semester_name ,  t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id  =  t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 531,
        "question": "What is the description of the department whose name has the substring the computer?",
        "predicted": "select dept_description from departments where dept_name like '%comp.%'",
        "gold": "select department_description from departments where department_name like '%computer%'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 532,
        "question": "What is the department description for the one whose name has the word computer?",
        "predicted": "select dept_description from departments where dept_name like '%comp.%'",
        "gold": "select department_description from departments where department_name like '%computer%'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 533,
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name, t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) = 2",
        "gold": "select t1.first_name ,  t1.middle_name ,  t1.last_name ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id having count(*)  =  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 534,
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) = 2",
        "gold": "select t1.first_name ,  t1.middle_name ,  t1.last_name ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id having count(*)  =  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 535,
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t2.degree_code = 'boston red stockings'",
        "gold": "select distinct t1.first_name ,  t1.middle_name ,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id join degree_programs as t3 on t2.degree_program_id  =  t3.degree_program_id where t3.degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 536,
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t2.student_id = 'boston red stockings'",
        "gold": "select distinct t1.first_name ,  t1.middle_name ,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id join degree_programs as t3 on t2.degree_program_id  =  t3.degree_program_id where t3.degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 537,
        "question": "Find the kind of program which most number of students are enrolled in?",
        "predicted": "select t1.type from courses as t1 join student_enrolment as t2 on t1.course_id = t2.course_id group by t1.type order by count(*) desc limit 1",
        "gold": "select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 538,
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "predicted": "select t1.degree from degrees as t1 join student_enrolment as t2 on t1.degree_id = t2.degree_id group by t1.degree_high_name order by count(*) desc limit 1",
        "gold": "select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 539,
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "predicted": "select t1.programm_id, t1.course_name from degrees as t1 join student_enrolment as t2 on t1.course_id = t2.course_id group by t1.course_id order by count(*) desc limit 1",
        "gold": "select t1.degree_program_id ,  t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 540,
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "predicted": "select t1.degree_program_id, t1.degree_surname from degrees as t1 join student_enrolment as t2 on t1.degree_id = t2.degree_id group by t1.degree_id order by count(*) desc limit 1",
        "gold": "select t1.degree_program_id ,  t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 541,
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "predicted": "select t1.student_id, t1.first_name, t1.last_name, count(*), t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "gold": "select t1.student_id ,  t1.first_name ,  t1.middle_name ,  t1.last_name ,  count(*) ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 542,
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name, count(*) from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "gold": "select t1.student_id ,  t1.first_name ,  t1.middle_name ,  t1.last_name ,  count(*) ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 545,
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "predicted": "select t1.course_name from courses as t1 join student_course_enrolment as t2 on t1.course_id = t2.course_id",
        "gold": "select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 546,
        "question": "What are the names of all courses that have some students enrolled?",
        "predicted": "select t1.course_name from courses as t1 join student_enrolment as t2 on t1.course_id = t2.course_id",
        "gold": "select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 551,
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_enrolment as t2 on t1.cript_id = t2.course_id group by t1.cript_id having count(*) >= 2",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id having count(*)  >=  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 552,
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_course_contents as t2 on t1.cript_id = t2.cript_id group by t1.cript_id having count(*) >= 2",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id having count(*)  >=  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 553,
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "predicted": "select phone_number from students where first_name = \"tylan\" and last_name = \"k ward\"",
        "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 554,
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "predicted": "select t2.mobile_number from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t1.first_name = \"tilmothy ward\"",
        "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 555,
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_first_registered asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 556,
        "question": "What is the first, middle, and last name of the first student to register?",
        "predicted": "select t2.first_name, t2.middle_name, t2.last_name from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id order by t1.date_registration_date asc limit 1",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_first_registered asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 557,
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id order by t2.date_undergraduated limit 1",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_left asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 558,
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "predicted": "select first_name, middle_name, last_name from students order by date desc limit 1",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_left asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 559,
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "predicted": "select first_name, last_name from students where permanent_address_id!= \"null\" group by first_name",
        "gold": "select first_name from students where current_address_id != permanent_address_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 560,
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "predicted": "select t1.first_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id",
        "gold": "select first_name from students where current_address_id != permanent_address_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 561,
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "predicted": "select t1.address_id, t1.line_1 from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.address_id group by t1.address_id order by count(*) desc limit 1",
        "gold": "select t1.address_id ,  t1.line_1 ,  t1.line_2 from addresses as t1 join students as t2 on t1.address_id  =  t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 562,
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "predicted": "select t1.address_id, t1.line_1, t1.line_2 from addresses as t1 join student_enrolments as t2 on t1.address_id = t2.address_id group by t1.address_id order by count(*) desc limit 1",
        "gold": "select t1.address_id ,  t1.line_1 ,  t1.line_2 from addresses as t1 join students as t2 on t1.address_id  =  t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 563,
        "question": "On average, when were the transcripts printed?",
        "predicted": "select avg(transaction_date) from transcripts",
        "gold": "select avg(transcript_date) from transcripts",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 564,
        "question": "What is the average transcript date?",
        "predicted": "select avg(transaction_date) from transcripts",
        "gold": "select avg(transcript_date) from transcripts",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 565,
        "question": "When is the first transcript released? List the date and details.",
        "predicted": "select t1.date, t1.other_details from transcripts as t1 join student_enrolment as t2 on t1.journal_id = t2.journal_id order by t1.date asc limit 1",
        "gold": "select transcript_date ,  other_details from transcripts order by transcript_date asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 566,
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "predicted": "select t1.date, t1.other_details from transcripts as t1 join transcript_contents as t2 on t1.cript_id = t2.transaction_id order by t1.date asc limit 1",
        "gold": "select transcript_date ,  other_details from transcripts order by transcript_date asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 569,
        "question": "What is the last transcript release date?",
        "predicted": "select t1.transaction_date from transcripts as t1 join transcript_contents as t2 on t1.transaction_id = t2.transaction_id",
        "gold": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 570,
        "question": "When was the last transcript released?",
        "predicted": "select date from transcripts order by date desc limit 1",
        "gold": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 571,
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "predicted": "select count(*), student_course_id from student_enrolment group by student_course_id order by count(*) desc limit 1",
        "gold": "select count(*) ,  student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 572,
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "predicted": "select t1.student_course_id, count(*) from student_course_enrolment as t1 join student_enrolment as t2 on t1.student_course_id = t2.course_id group by t1.course_id order by count(*) desc limit 1",
        "gold": "select count(*) ,  student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 573,
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_contents as t2 on t1.cript_id = t2.cript_id group by t1.cript_id order by count(*) asc limit 1",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 574,
        "question": "What is the date and id of the transcript with the least number of results?",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_enrolment as t2 on t1.cript_id = t2.course_id group by t1.cript_id order by count(*) asc limit 1",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 575,
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "predicted": "select semester from student_enrolment where student_id = 'm' intersect select semester from student_enrolment where student_id = 'birth'",
        "gold": "select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 576,
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "predicted": "select semester_id from student_enrolment where student_id = 'm' intersect select semester_id from student_enrolment where student_id = 'birth'",
        "gold": "select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 577,
        "question": "How many different addresses do the students currently live?",
        "predicted": "select count(distinct address_id) from students",
        "gold": "select count(distinct current_address_id) from students",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 578,
        "question": "What are the different addresses that have students living there?",
        "predicted": "select distinct t1.address_id from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.address_id",
        "gold": "select count(distinct current_address_id) from students",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 579,
        "question": "List all the student details in reversed lexicographical order.",
        "predicted": "select * from student_details order by student_details desc",
        "gold": "select other_student_details from students order by other_student_details desc",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 580,
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "predicted": "select other_details from students order by other_details desc",
        "gold": "select other_student_details from students order by other_student_details desc",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 581,
        "question": "Describe the section h.",
        "predicted": "select section_name from sections where semester_name = \"h\"",
        "gold": "select section_description from sections where section_name  =  'h'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 591,
        "question": "list all cartoon titles and their directors ordered by their air date",
        "predicted": "select title, directed_by from cartoon order by air_date",
        "gold": "select title ,  directed_by from cartoon order by original_air_date",
        "db_id": "tvshow"
      },
      {
        "index": 592,
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "predicted": "select title, directed_by from cartoon order by air_date",
        "gold": "select title ,  directed_by from cartoon order by original_air_date",
        "db_id": "tvshow"
      },
      {
        "index": 595,
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "predicted": "select country, count(*) from television_channel group by country order by count(*) desc limit 1",
        "gold": "select country ,  count(*) from tv_channel group by country order by count(*) desc limit 1;",
        "db_id": "tvshow"
      },
      {
        "index": 596,
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "predicted": "select country, count(*) from channel group by country order by count(*) desc limit 1",
        "gold": "select country ,  count(*) from tv_channel group by country order by count(*) desc limit 1;",
        "db_id": "tvshow"
      },
      {
        "index": 597,
        "question": "List the number of different series names and contents in the TV Channel table.",
        "predicted": "select count(distinct t1.series_name), count(distinct t1.contents) from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.title = \"tv channel\"",
        "gold": "select count(distinct series_name) ,  count(distinct content) from tv_channel;",
        "db_id": "tvshow"
      },
      {
        "index": 598,
        "question": "How many different series and contents are listed in the TV Channel table?",
        "predicted": "select count(distinct t1.series_name), count(distinct t1.contents) from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.title = \"tv channel\"",
        "gold": "select count(distinct series_name) ,  count(distinct content) from tv_channel;",
        "db_id": "tvshow"
      },
      {
        "index": 602,
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "predicted": "select t1.paket_option from t1.paket_option as t1 join t1.channel as t2 on t1.id = t2.channel_id join series as t3 on t1.series_id = t3.id where t3.series_name = \"c sky radio\"",
        "gold": "select package_option from tv_channel where series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 605,
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "predicted": "select language, count(*) from television_channel group by language order by count(*) asc limit 1",
        "gold": "select language ,  count(*) from tv_channel group by language order by count(*) asc limit 1;",
        "db_id": "tvshow"
      },
      {
        "index": 606,
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "predicted": "select languages, count(*) from channel group by languages order by count(*) asc limit 1",
        "gold": "select language ,  count(*) from tv_channel group by language order by count(*) asc limit 1;",
        "db_id": "tvshow"
      },
      {
        "index": 607,
        "question": "List each language and the number of TV Channels using it.",
        "predicted": "select language, count(*) from television_channel group by languages",
        "gold": "select language ,  count(*) from tv_channel group by language",
        "db_id": "tvshow"
      },
      {
        "index": 608,
        "question": "For each language, list the number of TV Channels that use it.",
        "predicted": "select language, count(*) from television_channel group by languages",
        "gold": "select language ,  count(*) from tv_channel group by language",
        "db_id": "tvshow"
      },
      {
        "index": 609,
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "predicted": "select t2.series_name from cartoon as t1 join t1.series as t2 on t1.id = t2.series_id join tv_channel as t3 on t1.id = t3.channel_id where t1.title = \"the rise of the blue beetle\"",
        "gold": "select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"the rise of the blue beetle!\";",
        "db_id": "tvshow"
      },
      {
        "index": 611,
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "predicted": "select t1.title from cartoon as t1 join t1.characteristic as t2 on t1.id = t2.characteristic_id join series as t3 on t2.series_id = t3.id where t3.series_name = \"sky radio\"",
        "gold": "select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 612,
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "predicted": "select t3.title from television as t1 join t1.series as t2 on t1.id = t2.station_id join cartoon as t3 on t1.series_id = t3.id where t1.series_name = \"ttv channel\" and t1.series_name = \"sky radio\"",
        "gold": "select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 614,
        "question": "What are all of the episodes ordered by ratings?",
        "predicted": "select * from episode order by rating",
        "gold": "select episode from tv_series order by rating",
        "db_id": "tvshow"
      },
      {
        "index": 615,
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "predicted": "select episode, rating from tv_series order by rating desc limit 3",
        "gold": "select episode ,  rating from tv_series order by rating desc limit 3;",
        "db_id": "tvshow"
      },
      {
        "index": 616,
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "predicted": "select having count(*), t1.rating from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id where t2.title = \"tv series\" group by t1.id order by count(*) desc limit 3",
        "gold": "select episode ,  rating from tv_series order by rating desc limit 3;",
        "db_id": "tvshow"
      },
      {
        "index": 617,
        "question": "What is minimum and maximum share of TV series?",
        "predicted": "select min(share_times), max(share_times) from t1.series",
        "gold": "select max(share) , min(share) from tv_series;",
        "db_id": "tvshow"
      },
      {
        "index": 618,
        "question": "What is the maximum and minimum share for the TV series?",
        "predicted": "select max(share_time), min(share_time_staff) from t1.series",
        "gold": "select max(share) , min(share) from tv_series;",
        "db_id": "tvshow"
      },
      {
        "index": 619,
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "predicted": "select t2.airport_date from tv_series as t1 join series as t2 on t1.series_id = t2.id where t1.title = \"a love of a lifetime\"",
        "gold": "select air_date from tv_series where episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 620,
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "predicted": "select date from aircraft where title = \"a love of a lifetime\"",
        "gold": "select air_date from tv_series where episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 623,
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "predicted": "select t2.platform_name from episodes as t1 join tv_channel as t2 on t1.id = t2.tv_channel_id where t1.title = \"a love of a lifetime\"",
        "gold": "select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 624,
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "predicted": "select t2.series_name from episode as t1 join series as t2 on t1.series_id = t2.id where t1.title = \"a love of a lifetime\"",
        "gold": "select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 625,
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "predicted": "select t1.event from tv_series as t1 join t1.series as t2 on t1.id = t2.series_id join tv_series as t3 on t2.series_id = t3.id where t3.series_name = \"sky radio\"",
        "gold": "select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 626,
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "predicted": "select t1.event from t1.event as t1 join series as t2 on t1.series_id = t2.id where t2.title = \"sky radio\"",
        "gold": "select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 627,
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "predicted": "select directed_by, count(*) from cartoon group by directed_by",
        "gold": "select count(*) ,  directed_by from cartoon group by directed_by",
        "db_id": "tvshow"
      },
      {
        "index": 628,
        "question": "How many cartoons did each director create?",
        "predicted": "select created_by, count(*) from cartoon group by created_by",
        "gold": "select count(*) ,  directed_by from cartoon group by directed_by",
        "db_id": "tvshow"
      },
      {
        "index": 629,
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "predicted": "select production_code, channel from cartoon order by date desc limit 1",
        "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "db_id": "tvshow"
      },
      {
        "index": 630,
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "predicted": "select produdction_code, channel from cartoon order by date desc limit 1",
        "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "db_id": "tvshow"
      },
      {
        "index": 631,
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "predicted": "select t1.paket_name, t1.series_name from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.channel = \"tv\" group by t2.channel order by count(*) desc limit 1",
        "gold": "select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\"",
        "db_id": "tvshow"
      },
      {
        "index": 632,
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "predicted": "select t1.paket_name, t1.series_name from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id join tv as t3 on t2.tv_channel = t3.id where t3.channel = \"tv channel\" order by high_definition desc limit 1",
        "gold": "select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\"",
        "db_id": "tvshow"
      },
      {
        "index": 637,
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "predicted": "select t2.series_name, t2.country from t1.channel as t1 join t1.series as t2 on t1.id = t2.channel_id join cartoon as t3 on t1.series_id = t3.id where t3.directed_by = \"billy jones\" intersect select t2.series_name, t1.country from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel where t3.directed_by = \"michael chang\"",
        "gold": "select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'michael chang' intersect select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 638,
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "predicted": "select t2.series_name, t2.country from t1.channel as t1 join t1.series as t2 on t1.id = t2.channel_id join cartoon as t3 on t1.series_id = t3.id where t3.directed_by = t2.by t3.directed_by = t1.id join channel as t4 on t3.channel_id = t4.id where t4.directed_by = 'beijing chang'",
        "gold": "select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'michael chang' intersect select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 639,
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "predicted": "select pixel_actor, country from t1.id where t1.pixel_actory!= 'english'",
        "gold": "select pixel_aspect_ratio_par ,  country from tv_channel where language != 'english'",
        "db_id": "tvshow"
      },
      {
        "index": 640,
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "predicted": "select pixel_attribute_rate, country from tv_channel where channel!= \"english\"",
        "gold": "select pixel_aspect_ratio_par ,  country from tv_channel where language != 'english'",
        "db_id": "tvshow"
      },
      {
        "index": 641,
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "predicted": "select t1.id from t1.country as t1 join t1.country as t2 on t1.id = t2.country group by t2.country having count(*) > 2",
        "gold": "select id from tv_channel group by country having count(*)  >  2",
        "db_id": "tvshow"
      },
      {
        "index": 642,
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "predicted": "select channel from t1.id group by channel having count(*) > 2",
        "gold": "select id from tv_channel group by country having count(*)  >  2",
        "db_id": "tvshow"
      },
      {
        "index": 644,
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "predicted": "select channel from tv_channel except select channel from cartoon where directed_by = \"benn jones\"",
        "gold": "select id from tv_channel except select channel from cartoon where directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 645,
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "predicted": "select t1.paket_option from t1.channel except select t1.paket_option from t1.channel as t1 join t2.channel_id from t1.channel_id as t2 on t1.id = t2.channel_id join cartoon as t3 on t2.characteristic_id = t3.id where t3.directed_by = \"benn jones\"",
        "gold": "select package_option from tv_channel where id not in (select channel from cartoon where directed_by  =  'ben jones')",
        "db_id": "tvshow"
      },
      {
        "index": 646,
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "predicted": "select distinct channel from t1.channel except select t1.paket_option from t1.channel as t1 join t2.channel as t2 on t1.id = t2.channel_id join cartoon as t3 on t2.characteristic_id = t3.id where t3.directed_by = \"benn jones\"",
        "gold": "select package_option from tv_channel where id not in (select channel from cartoon where directed_by  =  'ben jones')",
        "db_id": "tvshow"
      },
      {
        "index": 649,
        "question": "List the earnings of poker players in descending order.",
        "predicted": "select profit from poker_player order by profit desc",
        "gold": "select earnings from poker_player order by earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 650,
        "question": "What are the earnings of poker players, ordered descending by value?",
        "predicted": "select t1.money from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.professor desc",
        "gold": "select earnings from poker_player order by earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 651,
        "question": "List the final tables made and the best finishes of poker players.",
        "predicted": "select t1.lat_table_made, t1.date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.best_score desc limit 1",
        "gold": "select final_table_made ,  best_finish from poker_player",
        "db_id": "poker_player"
      },
      {
        "index": 652,
        "question": "What are the final tables made and best finishes for all poker players?",
        "predicted": "select t1.lat_table_made, t2.max(t2.money_date) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "gold": "select final_table_made ,  best_finish from poker_player",
        "db_id": "poker_player"
      },
      {
        "index": 653,
        "question": "What is the average earnings of poker players?",
        "predicted": "select avg(money) from poker_player",
        "gold": "select avg(earnings) from poker_player",
        "db_id": "poker_player"
      },
      {
        "index": 654,
        "question": "Return the average earnings across all poker players.",
        "predicted": "select avg(money) from poker_player",
        "gold": "select avg(earnings) from poker_player",
        "db_id": "poker_player"
      },
      {
        "index": 655,
        "question": "What is the money rank of the poker player with the highest earnings?",
        "predicted": "select t1.money_ranking from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc limit 1",
        "gold": "select money_rank from poker_player order by earnings desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 657,
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "predicted": "select max(t1.lat_table_made) from poker_player as t1 join people as t2 on t1.phone_id = t2.people_id where t1.money  200000",
        "gold": "select max(final_table_made) from poker_player where earnings  <  200000",
        "db_id": "poker_player"
      },
      {
        "index": 658,
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "predicted": "select max(t1.lat_table_made) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.assets  200000",
        "gold": "select max(final_table_made) from poker_player where earnings  <  200000",
        "db_id": "poker_player"
      },
      {
        "index": 659,
        "question": "What are the names of poker players?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id",
        "db_id": "poker_player"
      },
      {
        "index": 660,
        "question": "Return the names of all the poker players.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id",
        "db_id": "poker_player"
      },
      {
        "index": 661,
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.money > 300000",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t2.earnings  >  300000",
        "db_id": "poker_player"
      },
      {
        "index": 662,
        "question": "Give the names of poker players who have earnings above 300000.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.money > 300000",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t2.earnings  >  300000",
        "db_id": "poker_player"
      },
      {
        "index": 663,
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.date asc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.final_table_made",
        "db_id": "poker_player"
      },
      {
        "index": 664,
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.date asc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.final_table_made",
        "db_id": "poker_player"
      },
      {
        "index": 665,
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "predicted": "select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc limit 1",
        "gold": "select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings asc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 666,
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "predicted": "select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money asc limit 1",
        "gold": "select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings asc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 667,
        "question": "What is the money rank of the tallest poker player?",
        "predicted": "select t1.money_ranking from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "gold": "select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t1.height desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 668,
        "question": "Return the money rank of the poker player with the greatest height.",
        "predicted": "select t1.money_rank from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "gold": "select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t1.height desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 669,
        "question": "What is the average earnings of poker players with height higher than 200?",
        "predicted": "select avg(t1.money) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200",
        "gold": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t1.height  >  200",
        "db_id": "poker_player"
      },
      {
        "index": 670,
        "question": "Give average earnings of poker players who are taller than 200.",
        "predicted": "select avg(t1.money) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200",
        "gold": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t1.height  >  200",
        "db_id": "poker_player"
      },
      {
        "index": 671,
        "question": "What are the names of poker players in descending order of earnings?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.profits desc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 672,
        "question": "Return the names of poker players sorted by their earnings descending.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 673,
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "predicted": "select nationality, count(*) from people group by nationality",
        "gold": "select nationality ,  count(*) from people group by nationality",
        "db_id": "poker_player"
      },
      {
        "index": 674,
        "question": "How many people are there of each nationality?",
        "predicted": "select nationality, count(*) from people group by nationality",
        "gold": "select nationality ,  count(*) from people group by nationality",
        "db_id": "poker_player"
      },
      {
        "index": 679,
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "predicted": "select name, birth_date from people order by name asc",
        "gold": "select name ,  birth_date from people order by name asc",
        "db_id": "poker_player"
      },
      {
        "index": 680,
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "predicted": "select name, birth_date from people order by name asc",
        "gold": "select name ,  birth_date from people order by name asc",
        "db_id": "poker_player"
      },
      {
        "index": 688,
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "predicted": "select contestant_number, name from contestants order by contestant_name desc",
        "gold": "select contestant_number ,  contestant_name from contestants order by contestant_name desc",
        "db_id": "voter_1"
      },
      {
        "index": 689,
        "question": "List the vote ids, phone numbers and states of all votes.",
        "predicted": "select vote_id, phone_number, state from votes",
        "gold": "select vote_id ,  phone_number ,  state from votes",
        "db_id": "voter_1"
      },
      {
        "index": 690,
        "question": "What are the maximum and minimum values of area codes?",
        "predicted": "select max(area_code), min(area_code) from area_code",
        "gold": "select max(area_code) ,  min(area_code) from area_code_state",
        "db_id": "voter_1"
      },
      {
        "index": 691,
        "question": "What is last date created of votes from the state 'CA'?",
        "predicted": "select t1.latin_date from votes as t1 join state as t2 on t1.state = t2.district where t2.state = \"ca\"",
        "gold": "select max(created) from votes where state  =  'ca'",
        "db_id": "voter_1"
      },
      {
        "index": 693,
        "question": "What are the distinct states and create time of all votes?",
        "predicted": "select distinct t1.state, t1.created from state as t1 join votes as t2 on t1.state = t2.state",
        "gold": "select distinct state ,  created from votes",
        "db_id": "voter_1"
      },
      {
        "index": 694,
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "predicted": "select t2.advisor_number, t1.name from votes as t1 join contestants as t2 on t1.country_tony = t2.country group by t1.country_number having count(*) >= 2",
        "gold": "select t1.contestant_number , t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number group by t1.contestant_number having count(*)  >=  2",
        "db_id": "voter_1"
      },
      {
        "index": 695,
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "predicted": "select t2.advisor, t2.name from votes as t1 join contestants as t2 on t1.tony = t2.tony_number group by t2.tony_number order by count(*) asc limit 1",
        "gold": "select t1.contestant_number , t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number group by t1.contestant_number order by count(*) asc limit 1",
        "db_id": "voter_1"
      },
      {
        "index": 699,
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "predicted": "select t1.date, t1.state, t1.phone_number from votes as t1 join contestants as t2 on t1.vote = t2.vote_id where t2.name = 'tabatha gehling'",
        "gold": "select t2.created ,  t2.state ,  t2.phone_number from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number where t1.contestant_name  =  'tabatha gehling'",
        "db_id": "voter_1"
      },
      {
        "index": 700,
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "predicted": "select t1.area_code from areas as t1 join votes as t2 on t1.area_code = t2.area_code join contestants as t3 on t1.country_id = t3.country where t3.title = 'tabatha' and t2.affirmation = 'kelly clauss'",
        "gold": "select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number join area_code_state as t3 on t2.state  =  t3.state where t1.contestant_name  =  'tabatha gehling' intersect select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number join area_code_state as t3 on t2.state  =  t3.state where t1.contestant_name  =  'kelly clauss'",
        "db_id": "voter_1"
      },
      {
        "index": 705,
        "question": "How many countries have governments that are republics?",
        "predicted": "select count(distinct country_code) from country",
        "gold": "select count(*) from country where governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 706,
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "predicted": "select sum(surface_area) from country where country = 'cancelled'",
        "gold": "select sum(surfacearea) from country where region  =  \"caribbean\"",
        "db_id": "world_1"
      },
      {
        "index": 707,
        "question": "How much surface area do the countires in the Carribean cover together?",
        "predicted": "select count(*) from country as t1 join sqlite_area as t2 on t1.id = t2.country_code where t1.name = \"carribean\"",
        "gold": "select sum(surfacearea) from country where region  =  \"caribbean\"",
        "db_id": "world_1"
      },
      {
        "index": 709,
        "question": "What is the continent name which Anguilla belongs to?",
        "predicted": "select t1.continent from country as t1 join country as t2 on t1.country_code = t2.country where t2.name = \"anguilla\"",
        "gold": "select continent from country where name  =  \"anguilla\"",
        "db_id": "world_1"
      },
      {
        "index": 710,
        "question": "Which region is the city Kabul located in?",
        "predicted": "select t1.area from country as t1 join country as t2 on t1.country_code = t2.country where t2.name = \"kayaking\"",
        "gold": "select region from country as t1 join city as t2 on t1.code  =  t2.countrycode where t2.name  =  \"kabul\"",
        "db_id": "world_1"
      },
      {
        "index": 712,
        "question": "Which language is the most popular in Aruba?",
        "predicted": "select language from country_language where country_name = \"aruba\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 713,
        "question": "What language is predominantly spoken in Aruba?",
        "predicted": "select language from country_language where country_name = \"aruba\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 714,
        "question": "What are the population and life expectancies in Brazil?",
        "predicted": "select population, life_attendance from country where country = 'brazil'",
        "gold": "select population ,  lifeexpectancy from country where name  =  \"brazil\"",
        "db_id": "world_1"
      },
      {
        "index": 715,
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "predicted": "select population, life_attendance from country where country = \"brazil\"",
        "gold": "select population ,  lifeexpectancy from country where name  =  \"brazil\"",
        "db_id": "world_1"
      },
      {
        "index": 716,
        "question": "What are the region and population of Angola?",
        "predicted": "select region, population from country where country = \"agola\"",
        "gold": "select population ,  region from country where name  =  \"angola\"",
        "db_id": "world_1"
      },
      {
        "index": 717,
        "question": "What region does Angola belong to and what is its population?",
        "predicted": "select t1.region, t1.population from country as t1 join country as t2 on t1.country_code = t2.country_code where t2.name = \"angola\"",
        "gold": "select population ,  region from country where name  =  \"angola\"",
        "db_id": "world_1"
      },
      {
        "index": 718,
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.region_code = \"central africa\"",
        "gold": "select avg(lifeexpectancy) from country where region  =  \"central africa\"",
        "db_id": "world_1"
      },
      {
        "index": 719,
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country = \"central africa\"",
        "gold": "select avg(lifeexpectancy) from country where region  =  \"central africa\"",
        "db_id": "world_1"
      },
      {
        "index": 722,
        "question": "What is the total population and maximum GNP in Asia?",
        "predicted": "select sum(population), max(gnp) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"aspan\"",
        "gold": "select sum(population) ,  max(gnp) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 723,
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "predicted": "select count(*), country_code from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"aspan\" group by t1.country_code order by count(*) desc limit 1",
        "gold": "select sum(population) ,  max(gnp) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 724,
        "question": "What is the average life expectancy in African countries that are republics?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"africa\"",
        "gold": "select avg(lifeexpectancy) from country where continent  =  \"africa\" and governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 725,
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country = \"africa\"",
        "gold": "select avg(lifeexpectancy) from country where continent  =  \"africa\" and governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 726,
        "question": "What is the total surface area of the continents Asia and Europe?",
        "predicted": "select sum(surface_area) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"asia\" intersect select sum(t1.surface_area) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"europea\"",
        "gold": "select sum(surfacearea) from country where continent  =  \"asia\" or continent  =  \"europe\"",
        "db_id": "world_1"
      },
      {
        "index": 727,
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "predicted": "select sum(surface_area) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"aspan\" or t1.country_code = \"europea\"",
        "gold": "select sum(surfacearea) from country where continent  =  \"asia\" or continent  =  \"europe\"",
        "db_id": "world_1"
      },
      {
        "index": 728,
        "question": "How many people live in Gelderland district?",
        "predicted": "select count(*) from city as t1 join city as t2 on t1.city_code = t2.id where t1.district = \"monerland\"",
        "gold": "select sum(population) from city where district  =  \"gelderland\"",
        "db_id": "world_1"
      },
      {
        "index": 730,
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "predicted": "select avg(t1.gnp), sum(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.governor = \"united states\"",
        "gold": "select avg(gnp) ,  sum(population) from country where governmentform  =  \"us territory\"",
        "db_id": "world_1"
      },
      {
        "index": 731,
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "predicted": "select avg(t1.gnp), sum(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country_code = \"united states\"",
        "gold": "select avg(gnp) ,  sum(population) from country where governmentform  =  \"us territory\"",
        "db_id": "world_1"
      },
      {
        "index": 734,
        "question": "How many type of governments are in Africa?",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"africa\"",
        "gold": "select count(distinct governmentform) from country where continent  =  \"africa\"",
        "db_id": "world_1"
      },
      {
        "index": 735,
        "question": "How many different forms of governments are there in Africa?",
        "predicted": "select count(distinct government_form) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country = \"africa\"",
        "gold": "select count(distinct governmentform) from country where continent  =  \"africa\"",
        "db_id": "world_1"
      },
      {
        "index": 736,
        "question": "What is the total number of languages used in Aruba?",
        "predicted": "select count(*) from country as t1 join country_language as t2 on t1.country_code = t2.country where t1.country = \"aruba\"",
        "gold": "select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\"",
        "db_id": "world_1"
      },
      {
        "index": 737,
        "question": "How many languages are spoken in Aruba?",
        "predicted": "select count(*) from country_language where country = \"aruba\"",
        "gold": "select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\"",
        "db_id": "world_1"
      },
      {
        "index": 740,
        "question": "What is name of the country that speaks the largest number of languages?",
        "predicted": "select t1.country_name from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code order by count(*) desc limit 1",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 742,
        "question": "Which continent has the most diverse languages?",
        "predicted": "select t1.country from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country order by count(*) desc limit 1",
        "gold": "select t1.continent from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 743,
        "question": "Which continent speaks the most languages?",
        "predicted": "select t1.country from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code order by count(*) desc limit 1",
        "gold": "select t1.continent from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 746,
        "question": "What are the names of nations speak both English and French?",
        "predicted": "select name from country where language = \"english\" intersect select name from country where language = \"franchise\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\"",
        "db_id": "world_1"
      },
      {
        "index": 750,
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "predicted": "select count(distinct continent) from country where language = \"chinese\"",
        "gold": "select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"chinese\"",
        "db_id": "world_1"
      },
      {
        "index": 751,
        "question": "How many continents speak Chinese?",
        "predicted": "select count(*) from country where language = \"chinese\"",
        "gold": "select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"chinese\"",
        "db_id": "world_1"
      },
      {
        "index": 752,
        "question": "What are the regions that use English or Dutch?",
        "predicted": "select region from country where languages = \"english\" or languages = \"english\"",
        "gold": "select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" or t2.language  =  \"dutch\"",
        "db_id": "world_1"
      },
      {
        "index": 753,
        "question": "Which regions speak Dutch or English?",
        "predicted": "select region from country where language = \"english\" or language = \"english\"",
        "gold": "select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" or t2.language  =  \"dutch\"",
        "db_id": "world_1"
      },
      {
        "index": 754,
        "question": "What are the countries where either English or Dutch is the official language ?",
        "predicted": "select country from country where languages = \"english\" or languages = \"native\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 755,
        "question": "Which countries have either English or Dutch as an official language?",
        "predicted": "select t1.country from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" or t2.language = \"native\"",
        "gold": "select * from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select * from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 756,
        "question": "Which language is the most popular on the Asian continent?",
        "predicted": "select language from country where t1.country = \"asian\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  \"asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 757,
        "question": "What is the language that is used by the largest number of Asian nations?",
        "predicted": "select language from country_language where country_name = \"asian\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  \"asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 758,
        "question": "Which languages are spoken by only one country in republic governments?",
        "predicted": "select language from country_language group by language having count(*) = 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.governmentform  =  \"republic\" group by t2.language having count(*)  =  1",
        "db_id": "world_1"
      },
      {
        "index": 759,
        "question": "What languages are only used by a single country with a republic government?",
        "predicted": "select language from country where state = \"japan\" group by language",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.governmentform  =  \"republic\" group by t2.language having count(*)  =  1",
        "db_id": "world_1"
      },
      {
        "index": 760,
        "question": "Find the city with the largest population that uses English.",
        "predicted": "select city from city where country_code = \"english\" group by city_code order by population desc limit 1",
        "gold": "select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 761,
        "question": "What is the most populace city that speaks English?",
        "predicted": "select city from city where country_code = \"english\" group by city order by count(*) desc limit 1",
        "gold": "select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 762,
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "predicted": "select name, population, expected_from country from country where country = 'asian' order by population desc limit 1",
        "gold": "select name ,  population ,  lifeexpectancy from country where continent  =  \"asia\" order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 763,
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "predicted": "select name, population, life_attendancy from country where country = 'asian' order by country_name desc limit 1",
        "gold": "select name ,  population ,  lifeexpectancy from country where continent  =  \"asia\" order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 764,
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "predicted": "select avg(life_attendance) from country where country!= \"english\"",
        "gold": "select avg(lifeexpectancy) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\")",
        "db_id": "world_1"
      },
      {
        "index": 765,
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "predicted": "select avg(life_attendance) from country where country!= \"english\"",
        "gold": "select avg(lifeexpectancy) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\")",
        "db_id": "world_1"
      },
      {
        "index": 766,
        "question": "What is the total number of people living in the nations that do not use English?",
        "predicted": "select count(*) from country where country_code not in (select country_code from country where languages = \"english\")",
        "gold": "select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\")",
        "db_id": "world_1"
      },
      {
        "index": 767,
        "question": "How many people live in countries that do not speak English?",
        "predicted": "select count(*) from country where country_code not in (select country_code from country where languages = \"english\")",
        "gold": "select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\")",
        "db_id": "world_1"
      },
      {
        "index": 768,
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "predicted": "select t1.official_female from country_language as t1 join country as t2 on t1.country_code = t2.country where t2.heightrix\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.headofstate  =  \"beatrix\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 769,
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "predicted": "select t1.official_female from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.heightrix\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.headofstate  =  \"beatrix\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 770,
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "predicted": "select count(distinct t1.official_percentage) from country as t1 join country_language as t2 on t1.country_code = t2.country where t1.year  1930",
        "gold": "select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where  indepyear  <  1930 and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 771,
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "predicted": "select count(distinct t1.official_population) from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.founded  1930",
        "gold": "select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where  indepyear  <  1930 and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 772,
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "predicted": "select country_code from country where surface > (select max(surface_area) from country where country = \"europea\")",
        "gold": "select name from country where surfacearea  >  (select min(surfacearea) from country where continent  =  \"europe\")",
        "db_id": "world_1"
      },
      {
        "index": 773,
        "question": "Which countries have greater area than that of any country in Europe?",
        "predicted": "select country from country where area > (select max(area) from country where country = \"europea\")",
        "gold": "select name from country where surfacearea  >  (select min(surfacearea) from country where continent  =  \"europe\")",
        "db_id": "world_1"
      },
      {
        "index": 774,
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "predicted": "select country from country where population  (select max(population) from country where country = 'asie')",
        "gold": "select name from country where continent  =  \"africa\"  and population  <  (select max(population) from country where continent  =  \"asia\")",
        "db_id": "world_1"
      },
      {
        "index": 775,
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "predicted": "select country from country where population  (select min(population) from country where country = 'asie')",
        "gold": "select name from country where continent  =  \"africa\"  and population  <  (select min(population) from country where continent  =  \"asia\")",
        "db_id": "world_1"
      },
      {
        "index": 776,
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "predicted": "select country from country where population > (select max(population) from country where country = 'africa')",
        "gold": "select name from country where continent  =  \"asia\"  and population  >  (select max(population) from country where continent  =  \"africa\")",
        "db_id": "world_1"
      },
      {
        "index": 777,
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "predicted": "select country from country where population > (select max(population) from country where country = 'africa')",
        "gold": "select name from country where continent  =  \"asia\"  and population  >  (select min(population) from country where continent  =  \"africa\")",
        "db_id": "world_1"
      },
      {
        "index": 778,
        "question": "What are the country codes for countries that do not speak English?",
        "predicted": "select country_code from country where country_code not in (select country_code from country_language where languages = \"english\")",
        "gold": "select countrycode from countrylanguage except select countrycode from countrylanguage where language  =  \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 779,
        "question": "Return the country codes for countries that do not speak English.",
        "predicted": "select country_code from country where country_code not in (select country_code from country_language where languages = \"english\")",
        "gold": "select countrycode from countrylanguage except select countrycode from countrylanguage where language  =  \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 780,
        "question": "What are the country codes of countries where people use languages other than English?",
        "predicted": "select country_code from country where languages > (select country_code from country_language where languages = \"english\")",
        "gold": "select distinct countrycode from countrylanguage where language != \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 781,
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "predicted": "select country_code from country where languages!= \"english\"",
        "gold": "select distinct countrycode from countrylanguage where language != \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 782,
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "predicted": "select country_code from country where country_code not in (select country_code from country_language where country_form!= \"english\") intersect select country_code from country_language where government_form!= \"governor\"",
        "gold": "select code from country where governmentform != \"republic\" except select countrycode from countrylanguage where language  =  \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 783,
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "predicted": "select country_code from country where country_code not in (select country_code from country_language where country_name = \"english\") except select country_code from country_language where state = \"governor\")",
        "gold": "select code from country where governmentform != \"republic\" except select countrycode from countrylanguage where language  =  \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 784,
        "question": "Which cities are in European countries where English is not the official language?",
        "predicted": "select city from city where country_code = \"european\" except select city from country_language where country = \"english\"",
        "gold": "select distinct t2.name from country as t1 join city as t2 on t2.countrycode  =  t1.code where t1.continent  =  'europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code  =  t4.countrycode where t4.isofficial  =  't' and t4.language  =  'english')",
        "db_id": "world_1"
      },
      {
        "index": 785,
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "predicted": "select name from city where country!= \"europea\"",
        "gold": "select distinct t2.name from country as t1 join city as t2 on t2.countrycode  =  t1.code where t1.continent  =  'europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code  =  t4.countrycode where t4.isofficial  =  't' and t4.language  =  'english')",
        "db_id": "world_1"
      },
      {
        "index": 786,
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "predicted": "select count(*) from city as t1 join country_language as t2 on t1.country_code = t2.country_code where t1.country_name = \"asian\" and t2.language = \"chinese\"",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 787,
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "predicted": "select distinct t1.name from city as t1 join country_language as t2 on t1.country_code = t2.country_code join country as t3 on t1.country_code = t3.id where t3.country = \"aspan\" intersect select distinct t1.name from city as t1 join country_language as t2 on t1.country_code = t2.country where t2.governor = \"chinese\"",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 788,
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "predicted": "select name, independence, surface_area from country order by population asc limit 1",
        "gold": "select name ,  surfacearea ,  indepyear from country order by population limit 1",
        "db_id": "world_1"
      },
      {
        "index": 789,
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "predicted": "select t1.name, t1.year, t1.surface_area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.population limit 1",
        "gold": "select name ,  surfacearea ,  indepyear from country order by population limit 1",
        "db_id": "world_1"
      },
      {
        "index": 790,
        "question": "What are the population, name and leader of the country with the largest area?",
        "predicted": "select t1.population, t1.name, t1.leader from country as t1 join country as t2 on t1.country_code = t2.country_code order by t2.area desc limit 1",
        "gold": "select name ,  population ,  headofstate from country order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 791,
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "predicted": "select t1.name, t1.population, t2.head_of_state from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.area desc limit 1",
        "gold": "select name ,  population ,  headofstate from country order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 792,
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "predicted": "select t1.country_name, count(*) from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code having count(*) >= 3",
        "gold": "select count(t2.language) ,  t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name having count(*)  >  2",
        "db_id": "world_1"
      },
      {
        "index": 793,
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "predicted": "select t1.name, count(*) from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code having count(*) > 2",
        "gold": "select count(t2.language) ,  t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name having count(*)  >  2",
        "db_id": "world_1"
      },
      {
        "index": 794,
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "predicted": "select count(*), district from city where population > (select avg(population) from city) group by district",
        "gold": "select count(*) ,  district from city where population  >  (select avg(population) from city) group by district",
        "db_id": "world_1"
      },
      {
        "index": 795,
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "predicted": "select count(*), district from city where population > (select avg(population) from city) group by district",
        "gold": "select count(*) ,  district from city where population  >  (select avg(population) from city) group by district",
        "db_id": "world_1"
      },
      {
        "index": 796,
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "predicted": "select t1.governor_name, sum(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country group by t1.governor_form having avg(t1.attendance) > 72",
        "gold": "select sum(population) ,  governmentform from country group by governmentform having avg(lifeexpectancy)  >  72",
        "db_id": "world_1"
      },
      {
        "index": 797,
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "predicted": "select government_form, sum(population) from country group by government_form having avg(life_attendance) > 72",
        "gold": "select sum(population) ,  governmentform from country group by governmentform having avg(lifeexpectancy)  >  72",
        "db_id": "world_1"
      },
      {
        "index": 798,
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "predicted": "select avg(life_attendance), sum(population), continent from country where life_ expectancy  72 group by continent",
        "gold": "select sum(population) ,  avg(lifeexpectancy) ,  continent from country group by continent having avg(lifeexpectancy)  <  72",
        "db_id": "world_1"
      },
      {
        "index": 799,
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "predicted": "select continent, sum(t1.life expectancy), avg(t1.life expectancy) from country as t1 join country as t2 on t1.country_code = t2.country group by t1.country_code having avg(t1.life expectancy)  72",
        "gold": "select sum(population) ,  avg(lifeexpectancy) ,  continent from country group by continent having avg(lifeexpectancy)  <  72",
        "db_id": "world_1"
      },
      {
        "index": 800,
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "predicted": "select t1.name, t1.area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t2.area desc limit 5",
        "gold": "select name ,  surfacearea from country order by surfacearea desc limit 5",
        "db_id": "world_1"
      },
      {
        "index": 801,
        "question": "Return the names and surface areas of the 5 largest countries.",
        "predicted": "select t1.name, t1.region_area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.country_code desc limit 5",
        "gold": "select name ,  surfacearea from country order by surfacearea desc limit 5",
        "db_id": "world_1"
      },
      {
        "index": 805,
        "question": "Return the names of the 3 countries with the fewest people.",
        "predicted": "select t1.name from country as t1 join country as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 3",
        "gold": "select name from country order by population asc limit 3",
        "db_id": "world_1"
      },
      {
        "index": 810,
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "predicted": "select sum(t1.population), avg(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country_name = \"north america\" and t1.population > 3000",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "db_id": "world_1"
      },
      {
        "index": 811,
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "predicted": "select sum(t1.population), avg(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country_code where t2.country_area > 3000",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "db_id": "world_1"
      },
      {
        "index": 816,
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "predicted": "select t2.language from country_language as t1 join country as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 1",
        "gold": "select language ,  countrycode ,  max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 817,
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "predicted": "select t1.country_code, t2.language from country as t1 join languages as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 1",
        "gold": "select language ,  countrycode ,  max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 818,
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "predicted": "select count(*) from country where country = \"spain\" group by country_code order by count(*) desc limit 1",
        "gold": "select count(*) ,   max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 819,
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country where t1.language = \"spanish\"",
        "gold": "select count(*) ,   max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 820,
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "predicted": "select country_code from country where country = \"spain\" group by country_code order by count(*) desc limit 1",
        "gold": "select countrycode ,  max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 821,
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "predicted": "select country_code from country where language = \"spanish\" group by country_code order by count(*) desc limit 1",
        "gold": "select countrycode ,  max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 830,
        "question": "What is the average attendance of shows?",
        "predicted": "select avg(events) from show",
        "gold": "select avg(attendance) from show",
        "db_id": "orchestra"
      },
      {
        "index": 832,
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "predicted": "select max(share), min(share) from performance where type!= \"live final\"",
        "gold": "select max(share) ,  min(share) from performance where type != \"live final\"",
        "db_id": "orchestra"
      },
      {
        "index": 833,
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "predicted": "select max(share), min(share) from performance where type!= \"live final\"",
        "gold": "select max(share) ,  min(share) from performance where type != \"live final\"",
        "db_id": "orchestra"
      },
      {
        "index": 839,
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "predicted": "select t2.name from conductor as t1 join conductor as t2 on t1.interaction_id = t2.interaction_id join performance as t3 on t1.performance_id = t3.performance_id group by t1.name order by count(*) desc limit 1",
        "gold": "select name from conductor order by year_of_work desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 840,
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "predicted": "select t1.name, t2.name from conductor as t1 join orchestra as t2 on t1.order_id = t2.order_id join performance as t3 on t1.performance_id = t3.performance_id",
        "gold": "select t1.name ,  t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id",
        "db_id": "orchestra"
      },
      {
        "index": 841,
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "predicted": "select t1.name, t2.name from conductor as t1 join orchestra as t2 on t1.order_id = t2.order_id join performance as t3 on t1.performance_id = t3.performance_id",
        "gold": "select t1.name ,  t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id",
        "db_id": "orchestra"
      },
      {
        "index": 846,
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "predicted": "select t2.name from orchestra as t1 join conductor as t2 on t1.order = t2.order_id join performance as t3 on t1.performance_id = t3.performance_id where t1.year > 2008",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id where year_of_founded  >  2008",
        "db_id": "orchestra"
      },
      {
        "index": 847,
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "predicted": "select t2.name from orchestra as t1 join conductor as t2 on t1.order_id = t2.order_id join performance as t3 on t1.order_id = t3.order_id where t1.year > 2008",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id where year_of_founded  >  2008",
        "db_id": "orchestra"
      },
      {
        "index": 848,
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "predicted": "select comptee, count(*) from orchestra group by comptee",
        "gold": "select record_company ,  count(*) from orchestra group by record_company",
        "db_id": "orchestra"
      },
      {
        "index": 849,
        "question": "How many orchestras does each record company manage?",
        "predicted": "select t1.record_company, count(*) from orchestra as t1 join performance as t2 on t1.order_id = t2.order_id group by t1.record_company",
        "gold": "select record_company ,  count(*) from orchestra group by record_company",
        "db_id": "orchestra"
      },
      {
        "index": 850,
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "predicted": "select record_format from orchestra order by count(*) asc",
        "gold": "select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "db_id": "orchestra"
      },
      {
        "index": 851,
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "predicted": "select major from orchestra order by count(*) desc",
        "gold": "select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "db_id": "orchestra"
      },
      {
        "index": 853,
        "question": "What is the record company used by the greatest number of orchestras?",
        "predicted": "select ref_company from orchestra group by ref_company order by count(*) desc limit 1",
        "gold": "select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 854,
        "question": "List the names of orchestras that have no performance.",
        "predicted": "select name from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "gold": "select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "db_id": "orchestra"
      },
      {
        "index": 857,
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "predicted": "select company from orchestra where years_of_founded  2003 intersect select company from orchestra where years_of_launch > 2003",
        "gold": "select record_company from orchestra where year_of_founded  <  2003 intersect select record_company from orchestra where year_of_founded  >  2003",
        "db_id": "orchestra"
      },
      {
        "index": 860,
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "predicted": "select t1.year from orchestra as t1 join performance as t2 on t1.order = t2.order_id group by t1.order having count(*) > 1",
        "gold": "select year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id group by t2.orchestra_id having count(*)  >  1",
        "db_id": "orchestra"
      },
      {
        "index": 861,
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "predicted": "select t1.year_of_founded from orchestra as t1 join performance as t2 on t1.orchester_id = t2.orchester_id group by t1.orchester_id having count(*) > 1",
        "gold": "select year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id group by t2.orchestra_id having count(*)  >  1",
        "db_id": "orchestra"
      },
      {
        "index": 864,
        "question": "Show the names and grades of each high schooler.",
        "predicted": "select t2.name, t2.grade from high_schooler as t1 join school as t2 on t1.schooler_id = t2.id",
        "gold": "select name ,  grade from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 865,
        "question": "What are the names and grades for each high schooler?",
        "predicted": "select name, grade from high_schooler",
        "gold": "select name ,  grade from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 866,
        "question": "Show all the grades of the high schoolers.",
        "predicted": "select distinct grade from high_schooler",
        "gold": "select grade from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 868,
        "question": "What grade is Kyle in?",
        "predicted": "select distinct grade from high_schooler where name = 'kyle'",
        "gold": "select grade from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 873,
        "question": "What is Kyle's id?",
        "predicted": "select kyles.id from home_school as t1 join student as t2 on t1.school_id = t2.id where t2.name = 'kerry'",
        "gold": "select id from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 876,
        "question": "Show the number of high schoolers for each grade.",
        "predicted": "select grade, count(*) from high_schooler group by grade",
        "gold": "select grade ,  count(*) from highschooler group by grade",
        "db_id": "network_1"
      },
      {
        "index": 877,
        "question": "How many high schoolers are in each grade?",
        "predicted": "select grade, count(*) from high_schooler group by grade",
        "gold": "select grade ,  count(*) from highschooler group by grade",
        "db_id": "network_1"
      },
      {
        "index": 878,
        "question": "Which grade has the most high schoolers?",
        "predicted": "select distinct grade from high_schooler group by grade order by count(*) desc limit 1",
        "gold": "select grade from highschooler group by grade order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 880,
        "question": "Show me all grades that have at least 4 students.",
        "predicted": "select distinct grade from high_schooler group by grade having count(*) >= 4",
        "gold": "select grade from highschooler group by grade having count(*)  >=  4",
        "db_id": "network_1"
      },
      {
        "index": 881,
        "question": "Which grades have 4 or more high schoolers?",
        "predicted": "select distinct grade from high_schooler group by grade having count(*) >= 4",
        "gold": "select grade from highschooler group by grade having count(*)  >=  4",
        "db_id": "network_1"
      },
      {
        "index": 882,
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "predicted": "select t1.id, count(*) from student as t1 join friend as t2 on t1.stuid = t2.stuid group by t1.id",
        "gold": "select student_id ,  count(*) from friend group by student_id",
        "db_id": "network_1"
      },
      {
        "index": 883,
        "question": "How many friends does each student have?",
        "predicted": "select count(t2.friend), t1.name from student as t1 join friend as t2 on t1.stuid = t2.stuid group by t1.name",
        "gold": "select student_id ,  count(*) from friend group by student_id",
        "db_id": "network_1"
      },
      {
        "index": 884,
        "question": "Show the names of high school students and their corresponding number of friends.",
        "predicted": "select t2.name, count(*) from college as t1 join friend as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 885,
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "predicted": "select t2.name, count(*) from friends as t1 join high_schooler as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 891,
        "question": "Return the names of friends of the high school student Kyle.",
        "predicted": "select t2.name from high_school as t1 join friend as t2 on t1.school_id = t2.id join student as t3 on t3.stuid = t2.stuid where t3.name = 'k kyle'",
        "gold": "select t3.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id join highschooler as t3 on t1.friend_id  =  t3.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 892,
        "question": "How many friends does the high school student Kyle have?",
        "predicted": "select count(t2.friend) from high_school as t1 join friend as t2 on t1.school_id = t2.id join student as t3 on t3.stuid = t2.stuid where t3.name = 'k kyle'",
        "gold": "select count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 893,
        "question": "Count the number of friends Kyle has.",
        "predicted": "select count(t2.friend) from friend as t1 join friend as t2 on t1.id = t2.friend where t1.name = 'kerry'",
        "gold": "select count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 894,
        "question": "Show ids of all students who do not have any friends.",
        "predicted": "select stuid from student where id not in (select stuid from friend)",
        "gold": "select id from highschooler except select student_id from friend",
        "db_id": "network_1"
      },
      {
        "index": 898,
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "predicted": "select t1.id from high_schooler as t1 join likes as t2 on t1.id = t2.school_id join friend as t3 on t2.friend = t3.id where t3.friend = t2.name intersect select t1.id from high_schooler as t1 join people as t2 on t1.stuid = t2.stuid",
        "gold": "select student_id from friend intersect select liked_id from likes",
        "db_id": "network_1"
      },
      {
        "index": 899,
        "question": "What are the ids of students who both have friends and are liked?",
        "predicted": "select stuid from student as t1 join likes as t2 on t1.stuid = t2.stuid where t2.friend = t2.friend except select stuid from likes as t1 join friend as t2 on t1.stuid = t2.stuid",
        "gold": "select student_id from friend intersect select liked_id from likes",
        "db_id": "network_1"
      },
      {
        "index": 900,
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.stuid = t2.stuid join friend as t3 on t3.stuid = t2.friend where t3.friend!= \"null\"",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 901,
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "predicted": "select t1.name from high_schooler as t1 join likes as t2 on t1.id = t2.school_id join friend as t3 on t2.friend = t3.id group by t2.high_schooler order by count(*) desc limit 1",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 902,
        "question": "Count the number of likes for each student id.",
        "predicted": "select count(*), stuid from likes group by stuid",
        "gold": "select student_id ,  count(*) from likes group by student_id",
        "db_id": "network_1"
      },
      {
        "index": 903,
        "question": "How many likes correspond to each student id?",
        "predicted": "select stuid, count(*) from likes group by stuid",
        "gold": "select student_id ,  count(*) from likes group by student_id",
        "db_id": "network_1"
      },
      {
        "index": 904,
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "predicted": "select t2.name, count(*) from likes as t1 join school as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 905,
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "predicted": "select t2.name, count(*) from likes as t1 join school as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 907,
        "question": "Give the name of the student with the most likes.",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.id = t2.stuid group by t1.stuid order by count(*) desc limit 1",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 908,
        "question": "Show the names of students who have at least 2 likes.",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.id = t2.stuid group by t2.stuid having count(*) >= 2",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 909,
        "question": "What are the names of students who have 2 or more likes?",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.id = t2.stuid group by t2.stuid having count(*) >= 2",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 910,
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "predicted": "select t1.name from student as t1 join friend as t2 on t1.id = t2.stuid where t2.grade > 5 group by t2.stuid having count(*) >= 2",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.grade  >  5 group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 911,
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "predicted": "select t1.name from high_schooler as t1 join friends as t2 on t1.id = t2.school_id group by t1.id having count(*) > 5 intersect select t1.name from high_schooler as t1 join friends as t2 on t1.school_id = t2.school_id group by t1.high_school_id having count(*) >= 2",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.grade  >  5 group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 914,
        "question": "Find the average grade of all students who have some friends.",
        "predicted": "select avg(t2.grade) from friends as t1 join high_schooler as t2 on t1.stuid = t2.stuid",
        "gold": "select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 915,
        "question": "What is the average grade of students who have friends?",
        "predicted": "select avg(t2.grade) from friends as t1 join high_schooler as t2 on t1.stuid = t2.stuid",
        "gold": "select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 917,
        "question": "What is the lowest grade of students who do not have any friends?",
        "predicted": "select distinct grade from student where id not in (select id from friends)",
        "gold": "select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 922,
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "predicted": "select t1.prof_id, t1.last_name, t1.cell_phone from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t1.state = \"indiana\" or t2.treatment_type_code = \"claimed\" group by t1.prof_id having count(*) > 2",
        "gold": "select professional_id ,  last_name ,  cell_number from professionals where state  =  'indiana' union select t1.professional_id ,  t1.last_name ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 923,
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "predicted": "select t1.prof_id, t1.last_name, t1.cell_phone from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t1.state = \"indiana\" group by t1.prof_id having count(*) > 2",
        "gold": "select professional_id ,  last_name ,  cell_number from professionals where state  =  'indiana' union select t1.professional_id ,  t1.last_name ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 928,
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "predicted": "select professional_id, role_code, email from professionals except select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"dogs\"",
        "gold": "select professional_id ,  role_code ,  email_address from professionals except select t1.professional_id ,  t1.role_code ,  t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 929,
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "predicted": "select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"null\"",
        "gold": "select professional_id ,  role_code ,  email_address from professionals except select t1.professional_id ,  t1.role_code ,  t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 930,
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "predicted": "select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t2.first_name ,  t2.last_name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 931,
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "predicted": "select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t2.first_name ,  t2.last_name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 932,
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "predicted": "select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "gold": "select t1.professional_id ,  t1.role_code ,  t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 933,
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "predicted": "select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "gold": "select t1.professional_id ,  t1.role_code ,  t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 934,
        "question": "What is the name of the breed with the most dogs?",
        "predicted": "select breed_name from dogs group by breed_code order by count(*) desc limit 1",
        "gold": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code  =  t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 935,
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "predicted": "select breed_name from dogs group by breed_code order by count(*) desc limit 1",
        "gold": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code  =  t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 936,
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "predicted": "select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 937,
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "predicted": "select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 938,
        "question": "What is the description of the treatment type that costs the least money in total?",
        "predicted": "select treatment_type_description from treatments order by cost_of_treatment asc limit 1",
        "gold": "select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 939,
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "predicted": "select treatment_type_description from treatment_types group by treatment_type_code order by sum(cost_of_treatment) limit 1",
        "gold": "select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 940,
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "predicted": "select t1.owner_id, t1.zip_code from owners as t1 join charges as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t1.amount) desc limit 1",
        "gold": "select t1.owner_id ,  t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 941,
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "predicted": "select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t2.amount) desc limit 1",
        "gold": "select t1.owner_id ,  t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 942,
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "predicted": "select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "gold": "select t1.professional_id ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 943,
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "predicted": "select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "gold": "select t1.professional_id ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 944,
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "predicted": "select t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"gone\"",
        "gold": "select distinct t1.first_name ,  t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment  <  ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 945,
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "predicted": "select t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = ( select avg(treatment_type_code) from treatments )",
        "gold": "select distinct t1.first_name ,  t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment  <  ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 946,
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "predicted": "select t1.date_of_treatment, t1.first_name, t1.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.treatment_id",
        "gold": "select t1.date_of_treatment ,  t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id  =  t2.professional_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 947,
        "question": "What are the date and the operating professional's first name of each treatment?",
        "predicted": "select t1.date_of_treatment, t1.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.treatment_id",
        "gold": "select t1.date_of_treatment ,  t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id  =  t2.professional_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 948,
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "predicted": "select treatment_type_code, treatment_type_description from treatments group by treatment_type_code",
        "gold": "select t1.cost_of_treatment ,  t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 949,
        "question": "What are the cost and treatment type description of each treatment?",
        "predicted": "select treatment_type_code, cost_of_treatment, treatment_type_description from treatments",
        "gold": "select t1.cost_of_treatment ,  t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 950,
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "predicted": "select t1.first_name, t1.last_name, count(*) from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id",
        "gold": "select t1.first_name ,  t1.last_name ,  t2.size_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 951,
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "predicted": "select t1.first_name, t1.last_name, count(*) from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id",
        "gold": "select t1.first_name ,  t1.last_name ,  t2.size_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 952,
        "question": "List pairs of the owner's first name and the dogs's name.",
        "predicted": "select first_name, last_name from dogs",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 953,
        "question": "What are each owner's first name and their dogs's name?",
        "predicted": "select t1.first_name, t1.last_name, t1.owner_id from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 954,
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "predicted": "select t2.name, t1.date_treatment_id from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id where t1.type_code = \"king\"",
        "gold": "select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 955,
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "predicted": "select t2.name, t1.date_treatment_date from breeds as t1 join dogs as t2 on t1.dog_id = t2.dog_id order by t1.age limit 1",
        "gold": "select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 956,
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "predicted": "select t2.first_name, t2.last_name from pets as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = \"visa\"",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t1.state  =  'virginia'",
        "db_id": "dog_kennels"
      },
      {
        "index": 957,
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "predicted": "select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = \"visa\" and t2.name = \"horses\"",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t1.state  =  'virginia'",
        "db_id": "dog_kennels"
      },
      {
        "index": 958,
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "predicted": "select t1.date_in_country, t1.date_in_date_in_home_schooled from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "gold": "select distinct t1.date_arrived ,  t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 959,
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "predicted": "select t1.date_treatment, t1.date_treatment_id from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "gold": "select distinct t1.date_arrived ,  t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 964,
        "question": "What are the arriving date and the departing date of all the dogs?",
        "predicted": "select date_in_country, date_in_date_in_date_in_home_schooled from dogs",
        "gold": "select date_arrived ,  date_departed from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 965,
        "question": "List the arrival date and the departure date for all the dogs.",
        "predicted": "select date_in_country, date_in_date_in_home_schooled from dogs",
        "gold": "select date_arrived ,  date_departed from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 966,
        "question": "How many dogs went through any treatments?",
        "predicted": "select count(*) from dogs",
        "gold": "select count(distinct dog_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 967,
        "question": "Count the number of dogs that went through a treatment.",
        "predicted": "select count(*) from dogs",
        "gold": "select count(distinct dog_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 968,
        "question": "How many professionals have performed any treatment to dogs?",
        "predicted": "select count(*) from procedures as t1 join dogs as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"dogs\"",
        "gold": "select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 969,
        "question": "Find the number of professionals who have ever treated dogs.",
        "predicted": "select count(*) from procedures as t1 join dogs as t2 on t1.professional_id = t2.professional_id",
        "gold": "select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 970,
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "predicted": "select role_code, street_city, state from professionals where city like \"%west%\"",
        "gold": "select role_code ,  street ,  city ,  state from professionals where city like '%west%'",
        "db_id": "dog_kennels"
      },
      {
        "index": 971,
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "predicted": "select role_code, street_city, state from professionals where city like \"%west%\"",
        "gold": "select role_code ,  street ,  city ,  state from professionals where city like '%west%'",
        "db_id": "dog_kennels"
      },
      {
        "index": 972,
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "predicted": "select first_name, last_name, email_address from owners where state like '%north%'",
        "gold": "select first_name ,  last_name ,  email_address from owners where state like '%north%'",
        "db_id": "dog_kennels"
      },
      {
        "index": 973,
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "predicted": "select first_name, last_name, email_address from owners where state like '%north%'",
        "gold": "select first_name ,  last_name ,  email_address from owners where state like '%north%'",
        "db_id": "dog_kennels"
      },
      {
        "index": 976,
        "question": "How much does the most recent treatment cost?",
        "predicted": "select treatment_type_code from treatments order by date_of_treatment_cost desc limit 1",
        "gold": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 977,
        "question": "Show me the cost of the most recently performed treatment.",
        "predicted": "select treatment_type_code from treatments order by date_of_treatment desc limit 1",
        "gold": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 984,
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "predicted": "select name, age, weight from dogs where abandoned = \"yes\" and no = \"0\"",
        "gold": "select name ,  age ,  weight from dogs where abandoned_yn  =  1",
        "db_id": "dog_kennels"
      },
      {
        "index": 985,
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "predicted": "select name, age, weight from dogs where abandoned = \"yes\" and no = \"0\"",
        "gold": "select name ,  age ,  weight from dogs where abandoned_yn  =  1",
        "db_id": "dog_kennels"
      },
      {
        "index": 988,
        "question": "What is the age of the oldest dog?",
        "predicted": "select age from dogs order by date_of_birth desc limit 1",
        "gold": "select max(age) from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 989,
        "question": "Tell me the age of the oldest dog.",
        "predicted": "select age from dogs order by date_of_birth desc limit 1",
        "gold": "select max(age) from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 990,
        "question": "How much does each charge type costs? List both charge type and amount.",
        "predicted": "select charge_type, charge_amount from charges group by charge_type",
        "gold": "select charge_type ,  charge_amount from charges",
        "db_id": "dog_kennels"
      },
      {
        "index": 991,
        "question": "List each charge type and its amount.",
        "predicted": "select charge_type, charge_amount from charges",
        "gold": "select charge_type ,  charge_amount from charges",
        "db_id": "dog_kennels"
      },
      {
        "index": 992,
        "question": "How much does the most expensive charge type costs?",
        "predicted": "select charge_amount from charges order by charge_type desc limit 1",
        "gold": "select max(charge_amount) from charges",
        "db_id": "dog_kennels"
      },
      {
        "index": 993,
        "question": "What is the charge amount of the most expensive charge type?",
        "predicted": "select charge_amount from charges order by charge_type desc limit 1",
        "gold": "select max(charge_amount) from charges",
        "db_id": "dog_kennels"
      },
      {
        "index": 994,
        "question": "List the email, cell phone and home phone of all the professionals.",
        "predicted": "select email_address, cell_number, home_phone from professionals",
        "gold": "select email_address ,  cell_number ,  home_phone from professionals",
        "db_id": "dog_kennels"
      },
      {
        "index": 995,
        "question": "What are the email, cell phone and home phone of each professional?",
        "predicted": "select email_address, cell_number, home_phone from professionals",
        "gold": "select email_address ,  cell_number ,  home_phone from professionals",
        "db_id": "dog_kennels"
      },
      {
        "index": 996,
        "question": "What are all the possible breed type and size type combinations?",
        "predicted": "select distinct t1.type_code, t1.size_code from breeds as t1 join sizes as t2 on t1. breed_code = t2. breed_code",
        "gold": "select distinct breed_code ,  size_code from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 997,
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "predicted": "select distinct t2. breed_type_code, t2.size_code from dogs as t1 join breeds as t2 on t1.dog_id = t2.dog_id",
        "gold": "select distinct breed_code ,  size_code from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 998,
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "predicted": "select t1.first_name, t1.last_name, t2.treatment_type_code from professionals as t1 join treatments as t2 on t1.treatment_id = t2.treatment_id where t2.treatment_type_code = \"done\"",
        "gold": "select distinct t1.first_name ,  t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id join treatment_types as t3 on t2.treatment_type_code  =  t3.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 999,
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "predicted": "select t1.first_name, t1.last_name, t2.treatment_type_description from professionals as t1 join treatments as t2 on t1.treatment_id = t2.treatment_id",
        "gold": "select distinct t1.first_name ,  t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id join treatment_types as t3 on t2.treatment_type_code  =  t3.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 1004,
        "question": "What are the birth year and citizenship of singers?",
        "predicted": "select birth_year, citizenship from singer",
        "gold": "select birth_year ,  citizenship from singer",
        "db_id": "singer"
      },
      {
        "index": 1005,
        "question": "What are the birth years and citizenships of the singers?",
        "predicted": "select birth_year, citizenship from singer",
        "gold": "select birth_year ,  citizenship from singer",
        "db_id": "singer"
      },
      {
        "index": 1012,
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "predicted": "select citizenship, count(*) from singer group by citizenship",
        "gold": "select citizenship ,  count(*) from singer group by citizenship",
        "db_id": "singer"
      },
      {
        "index": 1013,
        "question": "For each citizenship, how many singers are from that country?",
        "predicted": "select nationality, count(*) from singer group by nationality",
        "gold": "select citizenship ,  count(*) from singer group by citizenship",
        "db_id": "singer"
      },
      {
        "index": 1015,
        "question": "What is the most common singer citizenship ?",
        "predicted": "select nationality from singer group by nationality order by count(*) desc limit 1",
        "gold": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "db_id": "singer"
      },
      {
        "index": 1016,
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "predicted": "select nationality, max(number_millions_millions_millions_millions_millions_usd) from singer group by nationality",
        "gold": "select citizenship ,  max(net_worth_millions) from singer group by citizenship",
        "db_id": "singer"
      },
      {
        "index": 1017,
        "question": "For each citizenship, what is the maximum net worth?",
        "predicted": "select max(network_millions_millions), citizenship from singer group by citizenship",
        "gold": "select citizenship ,  max(net_worth_millions) from singer group by citizenship",
        "db_id": "singer"
      },
      {
        "index": 1018,
        "question": "Show titles of songs and names of singers.",
        "predicted": "select t2.title, t2.name from singer as t1 join song as t2 on t1.songid = t2.songid",
        "gold": "select t2.title ,  t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id",
        "db_id": "singer"
      },
      {
        "index": 1019,
        "question": "What are the song titles and singer names?",
        "predicted": "select t2.title, t2.name from singer as t1 join song as t2 on t1.songid = t2.songid",
        "gold": "select t2.title ,  t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id",
        "db_id": "singer"
      },
      {
        "index": 1024,
        "question": "Show the names of singers and the total sales of their songs.",
        "predicted": "select t1.name, sum(t1.sales) from singer as t1 join song as t2 on t1.song_id = t2.song_id group by t1.song_id",
        "gold": "select t1.name ,  sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.name",
        "db_id": "singer"
      },
      {
        "index": 1025,
        "question": "For each singer name, what is the total sales for their songs?",
        "predicted": "select t1.name, sum(t1.sales_millions) from singer as t1 join song as t2 on t1.song_id = t2.song_id group by t1.name",
        "gold": "select t1.name ,  sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.name",
        "db_id": "singer"
      },
      {
        "index": 1031,
        "question": "What is the feature type name of feature AirCon?",
        "predicted": "select feature_type_name from ref_feature_types as t1 join features as t2 on t1.feature_id = t2.feature_id where t2.feature_name = \"aircon\"",
        "gold": "select t2.feature_type_name from other_available_features as t1 join ref_feature_types as t2 on t1.feature_type_code  =  t2.feature_type_code where t1.feature_name  =  \"aircon\"",
        "db_id": "real_estate_properties"
      },
      {
        "index": 1032,
        "question": "Show the property type descriptions of properties belonging to that code.",
        "predicted": "select t1.property_type_description from ref_property_types as t1 join properties as t2 on t1.property_type_code = t2.property_type_code",
        "gold": "select t2.property_type_description from properties as t1 join ref_property_types as t2 on t1.property_type_code  =  t2.property_type_code group by t1.property_type_code",
        "db_id": "real_estate_properties"
      }
    ],
    "condition_errors": [
      {
        "index": 4,
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "predicted": "select avg(age), min(age), max(age) from singer where country = 'france'",
        "gold": "select avg(age) ,  min(age) ,  max(age) from singer where country  =  'france'",
        "db_id": "concert_singer"
      },
      {
        "index": 5,
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "predicted": "select avg(age), min(age), max(age) from singer where country = 'france'",
        "gold": "select avg(age) ,  min(age) ,  max(age) from singer where country  =  'france'",
        "db_id": "concert_singer"
      },
      {
        "index": 8,
        "question": "What are all distinct countries where singers above age 20 are from?",
        "predicted": "select distinct t1.country from singer as t1 join singer_in_match as t2 on t1.song_id = t2.song_id where t2.age > 20",
        "gold": "select distinct country from singer where age  >  20",
        "db_id": "concert_singer"
      },
      {
        "index": 24,
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "predicted": "select t2.name, t1.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t1.stadium_id order by count(*) desc limit 1",
        "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >=  2014 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 25,
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "predicted": "select t1.name, t1.capacity from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year > 2014 group by t1.stadium_id order by count(*) desc limit 1",
        "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 30,
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "predicted": "select country from singer where age > 40 intersect select country from singer where age  30",
        "gold": "select country from singer where age  >  40 intersect select country from singer where age  <  30",
        "db_id": "concert_singer"
      },
      {
        "index": 32,
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "predicted": "select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.club_id where t1.year = 2014",
        "gold": "select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014",
        "db_id": "concert_singer"
      },
      {
        "index": 37,
        "question": "List all singer names in concerts in year 2014.",
        "predicted": "select t1.name from singer as t1 join concert as t2 on t1.songid = t2.songid where t2.year = 2014",
        "gold": "select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id join concert as t3 on t1.concert_id  =  t3.concert_id where t3.year  =  2014",
        "db_id": "concert_singer"
      },
      {
        "index": 38,
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "predicted": "select t2.name from concert as t1 join singer as t2 on t1.songid = t2.songid where t1.year = 2014",
        "gold": "select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id join concert as t3 on t1.concert_id  =  t3.concert_id where t3.year  =  2014",
        "db_id": "concert_singer"
      },
      {
        "index": 39,
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "predicted": "select name, country from singer where song like \"%hey%\"",
        "gold": "select name ,  country from singer where song_name like '%hey%'",
        "db_id": "concert_singer"
      },
      {
        "index": 40,
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "predicted": "select name, country from singer where song like \"%hey%\"",
        "gold": "select name ,  country from singer where song_name like '%hey%'",
        "db_id": "concert_singer"
      },
      {
        "index": 41,
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "predicted": "select t1.name, t2.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2014 intersect select t1.name, t1.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2015",
        "gold": "select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014 intersect select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2015",
        "db_id": "concert_singer"
      },
      {
        "index": 42,
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "predicted": "select t1.name, t2.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2014 intersect select t1.name, t1.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2015",
        "gold": "select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014 intersect select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2015",
        "db_id": "concert_singer"
      },
      {
        "index": 43,
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "predicted": "select count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id order by t2.capacity desc limit 1",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "db_id": "concert_singer"
      },
      {
        "index": 44,
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "predicted": "select count(*) from stadium order by capacity desc limit 1",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "db_id": "concert_singer"
      },
      {
        "index": 48,
        "question": "How much does the youngest dog weigh?",
        "predicted": "select count(*) from pets where pet_name = \"dog\" and age = (select min(age) from pets)",
        "gold": "select weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 51,
        "question": "Find number of pets owned by students who are older than 20.",
        "predicted": "select count(*) from pets as t1 join has_phone as t2 on t1.phone_id = t2.phone_id where t2.age > 20",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.age  >  20",
        "db_id": "pets_1"
      },
      {
        "index": 52,
        "question": "How many pets are owned by students that have an age greater than 20?",
        "predicted": "select count(*) from pets where age > 20",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.age  >  20",
        "db_id": "pets_1"
      },
      {
        "index": 53,
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "predicted": "select count(*) from pets as t1 join has_phone as t2 on t1.phone_id = t2.phone_id where t2.sex = \"f\"",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t2.petid  =  t3.petid where t1.sex  =  'f' and t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 54,
        "question": "How many dog pets are raised by female students?",
        "predicted": "select count(*) from pets where t2.sex = \"f\"",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t2.petid  =  t3.petid where t1.sex  =  'f' and t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 57,
        "question": "Find the first name of students who have cat or dog pet.",
        "predicted": "select distinct t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" or t2.phone = \"dog\"",
        "gold": "select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' or t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 58,
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "predicted": "select distinct t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" or t2.phone = \"horses\"",
        "gold": "select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' or t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 59,
        "question": "Find the first name of students who have both cat and dog pets .",
        "predicted": "select t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" intersect select t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"dog\"",
        "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 60,
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "predicted": "select t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" intersect select t1.fname from student as t1 join has_horses as t2 on t1.stuid = t2.stuid where t2.horses = \"horses\"",
        "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 61,
        "question": "Find the major and age of students who do not have a cat pet.",
        "predicted": "select major, age from student where stuid not in (select stuid from has_horses where pet_type = \"cat\")",
        "gold": "select major ,  age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 62,
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "predicted": "select major, age from student where stuid not in (select stuid from has_pid where petid = \"cat\")",
        "gold": "select major ,  age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 63,
        "question": "Find the id of students who do not have a cat pet.",
        "predicted": "select stuid from student except select stuid from has_phone where pets = \"cat\"",
        "gold": "select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 64,
        "question": "What are the ids of the students who do not own cats as pets?",
        "predicted": "select stuid from student except select stuid from has_horses",
        "gold": "select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 65,
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "predicted": "select fname, age from student where stuid not in (select stuid from has_phone)",
        "gold": "select t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 66,
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "predicted": "select fname from student where stuid in (select stuid from has_ pet where pets = \"dog\") except select stuid from has_cat\")",
        "gold": "select t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 68,
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "predicted": "select pets, count(*) from pets where age = ( select min(age) from pets )",
        "gold": "select pettype ,  weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 69,
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "predicted": "select pets_id, weight from pets where age > 1",
        "gold": "select petid ,  weight from pets where pet_age  >  1",
        "db_id": "pets_1"
      },
      {
        "index": 70,
        "question": "What is the id and weight of every pet who is older than 1?",
        "predicted": "select pet_id, weight from pets where age > 1",
        "gold": "select petid ,  weight from pets where pet_age  >  1",
        "db_id": "pets_1"
      },
      {
        "index": 75,
        "question": "Find the first name and age of students who have a pet.",
        "predicted": "select distinct t1.fname, t1.age from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"phone\"",
        "gold": "select distinct t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 76,
        "question": "What are the different first names and ages of the students who do have pets?",
        "predicted": "select distinct t1.fname, t1.age from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.pid = \" pets\"",
        "gold": "select distinct t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 77,
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "predicted": "select pet_id from has_phone where lname = 'smith'",
        "gold": "select t2.petid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.lname  =  'smith'",
        "db_id": "pets_1"
      },
      {
        "index": 78,
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "predicted": "select pet_id from has_phone where lname = 'smith'",
        "gold": "select t2.petid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.lname  =  'smith'",
        "db_id": "pets_1"
      },
      {
        "index": 83,
        "question": "Find the last name of the student who has a cat that is age 3.",
        "predicted": "select lname from student where age = 3 and stuid = 1",
        "gold": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pet_age  =  3 and t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 84,
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "predicted": "select lname from student where age = 3 and stuid = 1",
        "gold": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pet_age  =  3 and t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 85,
        "question": "Find the average age of students who do not have any pet .",
        "predicted": "select avg(age) from student where stuid not in ( select stuid from has_pilot )",
        "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "db_id": "pets_1"
      },
      {
        "index": 86,
        "question": "What is the average age for all students who do not own any pets ?",
        "predicted": "select avg(age) from student where stuid not in ( select stuid from has_piad)",
        "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "db_id": "pets_1"
      },
      {
        "index": 97,
        "question": "Find the model of the car whose weight is below the average weight.",
        "predicted": "select model from cars where weight  (select avg(weight) from cars)",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.weight  <  (select avg(weight) from cars_data)",
        "db_id": "car_1"
      },
      {
        "index": 98,
        "question": "What is the model for the car with a weight smaller than the average?",
        "predicted": "select model from cars_data where weight  (select avg(weight) from cars)",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.weight  <  (select avg(weight) from cars_data)",
        "db_id": "car_1"
      },
      {
        "index": 99,
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "predicted": "select t1.machine_name from manufacturers as t1 join car_makers as t2 on t1.machine_id = t2.machine_id where t2.year = 1970",
        "gold": "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model join cars_data as t4 on t3.makeid  =  t4.id where t4.year  =  '1970';",
        "db_id": "car_1"
      },
      {
        "index": 100,
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "predicted": "select distinct t2.manufacturer from cars as t1 join car_makers as t2 on t1.model_id = t2.model_id where t1.year = 1970",
        "gold": "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model join cars_data as t4 on t3.makeid  =  t4.id where t4.year  =  '1970';",
        "db_id": "car_1"
      },
      {
        "index": 101,
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "predicted": "select t1.make, t1.model_make from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id order by t2.accelerator_year asc limit 1",
        "gold": "select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);",
        "db_id": "car_1"
      },
      {
        "index": 102,
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "predicted": "select t1.manufacturer, t1.year from manufacturers as t1 join cars_data as t2 on t1.id = t2.machine_id order by t2.accelerator_year asc limit 1",
        "gold": "select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);",
        "db_id": "car_1"
      },
      {
        "index": 103,
        "question": "Which distinct car models are the produced after 1980?",
        "predicted": "select distinct model_model from cars_data where year > 1980",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id where t3.year  >  1980;",
        "db_id": "car_1"
      },
      {
        "index": 104,
        "question": "What are the different models for the cards produced after 1980?",
        "predicted": "select distinct model from model_list where year > 1980",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id where t3.year  >  1980;",
        "db_id": "car_1"
      },
      {
        "index": 111,
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "predicted": "select t1.accelerator from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.machine_name = \"acquired\" and t1.machine_name = \"sw\"",
        "gold": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.make  =  'amc hornet sportabout (sw)';",
        "db_id": "car_1"
      },
      {
        "index": 112,
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "predicted": "select sum(t1.weight) from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.model = 'acquired' and t2.weight = (select sportname from cars_data as t1 join cars as t2 on t1.machine_id = t2.machine_id where t1.machine = 'abrait sportabout')",
        "gold": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.make  =  'amc hornet sportabout (sw)';",
        "db_id": "car_1"
      },
      {
        "index": 113,
        "question": "How many car makers are there in france?",
        "predicted": "select count(*) from car_factories",
        "gold": "select count(*) from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid where t2.countryname  =  'france';",
        "db_id": "car_1"
      },
      {
        "index": 114,
        "question": "What is the number of makers of care in France?",
        "predicted": "select count(*) from car_frances as t1 join countries as t2 on t1.country_id = t2.country_id where t1.country = \"france\"",
        "gold": "select count(*) from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid where t2.countryname  =  'france';",
        "db_id": "car_1"
      },
      {
        "index": 115,
        "question": "How many car models are produced in the usa?",
        "predicted": "select count(*) from car_types",
        "gold": "select count(*) from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id join countries as t3 on t2.country  =  t3.countryid where t3.countryname  =  'usa';",
        "db_id": "car_1"
      },
      {
        "index": 116,
        "question": "What is the count of the car models produced in the United States?",
        "predicted": "select count(*) from car_players where country = \"united states\"",
        "gold": "select count(*) from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id join countries as t3 on t2.country  =  t3.countryid where t3.countryname  =  'usa';",
        "db_id": "car_1"
      },
      {
        "index": 117,
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "predicted": "select avg(miles_per_year) from cars_data where cylinders = 4",
        "gold": "select avg(mpg) from cars_data where cylinders  =  4;",
        "db_id": "car_1"
      },
      {
        "index": 118,
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "predicted": "select avg(miles_per_year) from cars_data where cylinders = 4",
        "gold": "select avg(mpg) from cars_data where cylinders  =  4;",
        "db_id": "car_1"
      },
      {
        "index": 119,
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "predicted": "select min(weight) from cars_data where hire_year = 1974",
        "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "db_id": "car_1"
      },
      {
        "index": 120,
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "predicted": "select min(weight) from cars_data where year = 1974",
        "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "db_id": "car_1"
      },
      {
        "index": 125,
        "question": "What is the number of the cars with horsepower more than 150?",
        "predicted": "select count(*) from cars_data where horsepower > 150",
        "gold": "select count(*) from cars_data where horsepower  >  150;",
        "db_id": "car_1"
      },
      {
        "index": 126,
        "question": "What is the number of cars with a horsepower greater than 150?",
        "predicted": "select count(*) from cars_data where horsepower > 150",
        "gold": "select count(*) from cars_data where horsepower  >  150;",
        "db_id": "car_1"
      },
      {
        "index": 129,
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "predicted": "select t1.country from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) >= 3",
        "gold": "select t1.countryname from countries as t1 join continents as t2 on t1.continent  =  t2.contid join car_makers as t3 on t1.countryid  =  t3.country where t2.continent  =  'europe' group by t1.countryname having count(*)  >=  3;",
        "db_id": "car_1"
      },
      {
        "index": 130,
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "predicted": "select t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id where t1.country = \"europea\" group by t1.country_name having count(*) >= 3",
        "gold": "select t1.countryname from countries as t1 join continents as t2 on t1.continent  =  t2.contid join car_makers as t3 on t1.countryid  =  t3.country where t2.continent  =  'europe' group by t1.countryname having count(*)  >=  3;",
        "db_id": "car_1"
      },
      {
        "index": 131,
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "predicted": "select max(t1.machine), max(t1.machine_make) from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.cylinders = 3",
        "gold": "select t2.horsepower ,  t1.make from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 132,
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "predicted": "select max(t1.supplier), t1.model_make from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.number = 3",
        "gold": "select t2.horsepower ,  t1.make from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 135,
        "question": "What is the average horsepower of the cars before 1980?",
        "predicted": "select avg(traints) from cars_data where accelerate_year  1980",
        "gold": "select avg(horsepower) from cars_data where year  <  1980;",
        "db_id": "car_1"
      },
      {
        "index": 136,
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "predicted": "select avg(traints) from cars_data where year  1980",
        "gold": "select avg(horsepower) from cars_data where year  <  1980;",
        "db_id": "car_1"
      },
      {
        "index": 137,
        "question": "What is the average edispl of the cars of model volvo?",
        "predicted": "select avg(t1.edisplled) from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.model = 'volvo'",
        "gold": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t1.model  =  'volvo';",
        "db_id": "car_1"
      },
      {
        "index": 138,
        "question": "What is the average edispl for all volvos?",
        "predicted": "select avg(edisplish) from cars_data",
        "gold": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t1.model  =  'volvo';",
        "db_id": "car_1"
      },
      {
        "index": 143,
        "question": "How many cars have more than 4 cylinders?",
        "predicted": "select count(*) from cars_data where horsepower > 4",
        "gold": "select count(*) from cars_data where cylinders  >  4;",
        "db_id": "car_1"
      },
      {
        "index": 144,
        "question": "What is the number of cars with more than 4 cylinders?",
        "predicted": "select count(*) from cars_data where horsepower > 4",
        "gold": "select count(*) from cars_data where cylinders  >  4;",
        "db_id": "car_1"
      },
      {
        "index": 145,
        "question": "how many cars were produced in 1980?",
        "predicted": "select count(*) from cars where year = 1980",
        "gold": "select count(*) from cars_data where year  =  1980;",
        "db_id": "car_1"
      },
      {
        "index": 146,
        "question": "In 1980, how many cars were made?",
        "predicted": "select count(*) from cars_data where model_make = 1980",
        "gold": "select count(*) from cars_data where year  =  1980;",
        "db_id": "car_1"
      },
      {
        "index": 147,
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "predicted": "select count(*) from car_makers as t1 join carriers as t2 on t1.machine_id = t2.machine_id where t2.fname = \"american motor company\"",
        "gold": "select count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker where t1.fullname  =  'american motor company';",
        "db_id": "car_1"
      },
      {
        "index": 148,
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "predicted": "select count(*) from car_factories as t1 join carriers as t2 on t1.machine_id = t2.machine_id where t2.maker = \"american motor company\"",
        "gold": "select count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker where t1.fullname  =  'american motor company';",
        "db_id": "car_1"
      },
      {
        "index": 151,
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "predicted": "select distinct t1.model from model_model as t1 join manufacturers as t2 on t1.manufacturer = t2.id where t2.full_name = \"general motors\" or t2.weight > 3500",
        "gold": "select distinct t2.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model join car_makers as t3 on t2.maker  =  t3.id join cars_data as t4 on t1.makeid  =  t4.id where t3.fullname  =  'general motors' or t4.weight  >  3500;",
        "db_id": "car_1"
      },
      {
        "index": 152,
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "predicted": "select distinct t1.model from model_list as t1 join models as t2 on t1.model_id = t2.model_id where t2.name = \"general motors\" or t2.weight > 3500",
        "gold": "select distinct t2.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model join car_makers as t3 on t2.maker  =  t3.id join cars_data as t4 on t1.makeid  =  t4.id where t3.fullname  =  'general motors' or t4.weight  >  3500;",
        "db_id": "car_1"
      },
      {
        "index": 153,
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "predicted": "select distinct year from cars_data where weight  3000 and weight  4000",
        "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
        "db_id": "car_1"
      },
      {
        "index": 154,
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "predicted": "select distinct year from cars_data where weight  4000 intersect select distinct year from cars_data where weight > 3000",
        "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
        "db_id": "car_1"
      },
      {
        "index": 157,
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "predicted": "select count(*) from cars_data where model_id = (select model_id from cars_data order by accelerate_year asc limit 1)",
        "gold": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 158,
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "predicted": "select count(*) from cars_data where model = (select model_id from cars_data group by model_id order by count(*) asc limit 1)",
        "gold": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 159,
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "predicted": "select count(*) from cars_data where speed > (select max(speed) from cars_data)",
        "gold": "select count(*) from cars_data where accelerate  >  ( select accelerate from cars_data order by horsepower desc limit 1 );",
        "db_id": "car_1"
      },
      {
        "index": 160,
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "predicted": "select count(*) from cars_data where speed > (select max(speed) from cars_data order by horsepower desc limit 1)",
        "gold": "select count(*) from cars_data where accelerate  >  ( select accelerate from cars_data order by horsepower desc limit 1 );",
        "db_id": "car_1"
      },
      {
        "index": 162,
        "question": "What is the number of countries with more than 2 car makers ?",
        "predicted": "select count(*) from countries where count(*) > 2",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "db_id": "car_1"
      },
      {
        "index": 163,
        "question": "How many cars has over 6 cylinders?",
        "predicted": "select count(*) from cars_data where horsepower > 6",
        "gold": "select count(*) from cars_data where cylinders  >  6;",
        "db_id": "car_1"
      },
      {
        "index": 164,
        "question": "What is the number of carsw ith over 6 cylinders?",
        "predicted": "select count(*) from cars where horsepower > 6",
        "gold": "select count(*) from cars_data where cylinders  >  6;",
        "db_id": "car_1"
      },
      {
        "index": 165,
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "predicted": "select model_name from cars_data where horsepower = 4",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 166,
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "predicted": "select model_name from cars_data order by horsepower desc limit 4",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 167,
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "predicted": "select distinct t1.driver, t1.make_name from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.mpg > 3",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <=  3;",
        "db_id": "car_1"
      },
      {
        "index": 168,
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "predicted": "select t1.machine_id, t1.make_name from cars as t1 join cars_data as t2 on t1.machine_id = t2.machine_id where t1.supplier!= 4",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "db_id": "car_1"
      },
      {
        "index": 169,
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "predicted": "select max(t1.miles_per_year) from cars as t1 join cars_data as t2 on t1.id = t2.driver_id where t2.number = \"8\" or t2.year  1980",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "db_id": "car_1"
      },
      {
        "index": 170,
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "predicted": "select max(t1.mpg) from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t2.machine_year  1980",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "db_id": "car_1"
      },
      {
        "index": 171,
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "predicted": "select model_name from models where weight  3500 except select model_name from model_company where built_name = 'ford motor company'",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id join car_makers as t4 on t1.maker  =  t4.id where t3.weight  <  3500 and t4.fullname != 'ford motor company';",
        "db_id": "car_1"
      },
      {
        "index": 172,
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "predicted": "select distinct model_model from model_list where weight  3500 except select distinct model_model from model_company where manufacturer_name = \"for ford motor company\"",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id join car_makers as t4 on t1.maker  =  t4.id where t3.weight  <  3500 and t4.fullname != 'ford motor company';",
        "db_id": "car_1"
      },
      {
        "index": 173,
        "question": "What are the name of the countries where there is not a single car maker?",
        "predicted": "select country_name from countries where country_id not in (select country_id from car_factories)",
        "gold": "select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country;",
        "db_id": "car_1"
      },
      {
        "index": 177,
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "predicted": "select t1.country, t1.country_name from countries as t1 join car_factories as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) > 3 union select t1.country_id, t1.country_name from countries as t1 join car_factories as t2 on t1.country_id = t2.country_id join model_name from countries as t3 on t2.country = t3.country_id where t3.model = 'fiat'",
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "db_id": "car_1"
      },
      {
        "index": 178,
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "predicted": "select t1.country_id, t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) > 3 union select t1.country_id, t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id group by t1.id having count(*) > 3",
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "db_id": "car_1"
      },
      {
        "index": 179,
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "predicted": "select country from airlines as t1 join airports as t2 on t1.alid = t2.alid where t1.name = \"airline\" and t1.alid = \"blue airways\"",
        "gold": "select country from airlines where airline  =  \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 180,
        "question": "What country is Jetblue Airways affiliated with?",
        "predicted": "select t1.country from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"jilblue airways\"",
        "gold": "select country from airlines where airline  =  \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 182,
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "predicted": "select abbreviation from airlines where airline = \"jilblue airways\"",
        "gold": "select abbreviation from airlines where airline  =  \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 183,
        "question": "List all airline names and their abbreviations in \"USA\".",
        "predicted": "select airline_name, abbreviation from airlines where country = \"usa\"",
        "gold": "select airline ,  abbreviation from airlines where country  =  \"usa\"",
        "db_id": "flight_2"
      },
      {
        "index": 184,
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "predicted": "select airline_name, abbreviation from airlines where country = 'usa'",
        "gold": "select airline ,  abbreviation from airlines where country  =  \"usa\"",
        "db_id": "flight_2"
      },
      {
        "index": 185,
        "question": "List the airport code and name in the city of Anthony.",
        "predicted": "select city_apid, airport_name from airports where city = \"anonymous\"",
        "gold": "select airportcode ,  airportname from airports where city  =  \"anthony\"",
        "db_id": "flight_2"
      },
      {
        "index": 186,
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "predicted": "select city_apid, airport_name from airports where city = \"anonymous\"",
        "gold": "select airportcode ,  airportname from airports where city  =  \"anthony\"",
        "db_id": "flight_2"
      },
      {
        "index": 193,
        "question": "Which airline has abbreviation 'UAL'?",
        "predicted": "select airline from airlines where abbreviation = 'ual'",
        "gold": "select airline from airlines where abbreviation  =  \"ual\"",
        "db_id": "flight_2"
      },
      {
        "index": 194,
        "question": "Give the airline with abbreviation 'UAL'.",
        "predicted": "select airline from airlines where abbreviation = 'ual'",
        "gold": "select airline from airlines where abbreviation  =  \"ual\"",
        "db_id": "flight_2"
      },
      {
        "index": 195,
        "question": "How many airlines are from USA?",
        "predicted": "select count(*) from airlines where country = 'usa'",
        "gold": "select count(*) from airlines where country  =  \"usa\"",
        "db_id": "flight_2"
      },
      {
        "index": 196,
        "question": "Return the number of airlines in the USA.",
        "predicted": "select count(*) from airlines where country = 'usa'",
        "gold": "select count(*) from airlines where country  =  \"usa\"",
        "db_id": "flight_2"
      },
      {
        "index": 197,
        "question": "Which city and country is the Alton airport at?",
        "predicted": "select city, country from airports where city = \"a alton\"",
        "gold": "select city ,  country from airports where airportname  =  \"alton\"",
        "db_id": "flight_2"
      },
      {
        "index": 198,
        "question": "Give the city and country for the Alton airport.",
        "predicted": "select city, country from airports where city = \"a alton\"",
        "gold": "select city ,  country from airports where airportname  =  \"alton\"",
        "db_id": "flight_2"
      },
      {
        "index": 199,
        "question": "What is the airport name for airport 'AKO'?",
        "predicted": "select airport_name from airports where airport_name = \"ako\"",
        "gold": "select airportname from airports where airportcode  =  \"ako\"",
        "db_id": "flight_2"
      },
      {
        "index": 200,
        "question": "Return the name of the airport with code 'AKO'.",
        "predicted": "select airport_name from airports where airport_code = 'ako'",
        "gold": "select airportname from airports where airportcode  =  \"ako\"",
        "db_id": "flight_2"
      },
      {
        "index": 201,
        "question": "What are airport names at City 'Aberdeen'?",
        "predicted": "select airport_name from airports where city = 'aberdeen'",
        "gold": "select airportname from airports where city = \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 202,
        "question": "What are the names of airports in Aberdeen?",
        "predicted": "select airport_name from airports where city = 'abern'",
        "gold": "select airportname from airports where city = \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 203,
        "question": "How many flights depart from 'APG'?",
        "predicted": "select count(*) from flights where origin_apid in (select apid from flights where destination = 'apg')",
        "gold": "select count(*) from flights where sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 204,
        "question": "Count the number of flights departing from 'APG'.",
        "predicted": "select count(*) from flights where origin_apid in (select apid from flights where destination = 'apg')",
        "gold": "select count(*) from flights where sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 205,
        "question": "How many flights have destination ATO?",
        "predicted": "select count(*) from flights where destination = 'ato'",
        "gold": "select count(*) from flights where destairport  =  \"ato\"",
        "db_id": "flight_2"
      },
      {
        "index": 206,
        "question": "Count the number of flights into ATO.",
        "predicted": "select count(*) from flights where destination = 'ato'",
        "gold": "select count(*) from flights where destairport  =  \"ato\"",
        "db_id": "flight_2"
      },
      {
        "index": 207,
        "question": "How many flights depart from City Aberdeen?",
        "predicted": "select count(*) from flights where origin_apid in (select apid from airports where city = \"c aberdeen\")",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 208,
        "question": "Return the number of flights departing from Aberdeen.",
        "predicted": "select count(*) from flights where origin_apid in (select apid from airports where airport = \"aberna\")",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 209,
        "question": "How many flights arriving in Aberdeen city?",
        "predicted": "select count(*) from airports as t1 join flights as t2 on t1.apid = t2.dst_apid where t1.country = 'abern'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 210,
        "question": "Return the number of flights arriving in Aberdeen.",
        "predicted": "select count(*) from flights where destination = 'abern'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 211,
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "predicted": "select count(*) from flights where origin_city = 'aberdeen' and destination = 'ashley'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airports as t3 on t1.sourceairport  =  t3.airportcode where t2.city  =  \"ashley\" and t3.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 212,
        "question": "How many flights fly from Aberdeen to Ashley?",
        "predicted": "select count(*) from flights where dst_apid from airports where airport = \"aberna\" and destination = \"ashley\"",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airports as t3 on t1.sourceairport  =  t3.airportcode where t2.city  =  \"ashley\" and t3.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 213,
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"jetblue airways\"",
        "gold": "select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.uid where t2.airline = \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 214,
        "question": "Give the number of Jetblue Airways flights.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"jilblue airways\"",
        "gold": "select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.uid where t2.airline = \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 215,
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid = 'asy')",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.destairport  =  \"asy\"",
        "db_id": "flight_2"
      },
      {
        "index": 216,
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.name from airlines as t1 join airports as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid in (select t1.alid from airlines as t3 on t1.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid in (select t1.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t1.apid in (select t1.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t1.apid from airlines as t3 join airports as t4 on t3.alid = t4.alid where t4.apid in (select t3.apid from airlines as t4 on t3.alid = t4.alid where t4.apid in (select t3.apid from airlines as t5 on t3.alid = t4.alid where t4.apid in (select t1.apid from airlines as t5 on t3.alid = t4.alid where t4.apid in (select",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.destairport  =  \"asy\"",
        "db_id": "flight_2"
      },
      {
        "index": 217,
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid from airlines as t1 join airlines as t3 on t1.alid = t3.alid where t1.alid = 'ahd'",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 218,
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid join airlines as t3 on t2.alid = t3.alid where t1.alid = 'ahd airport')",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 219,
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "predicted": "select count(*) from airlines where destination = 'aberdeen'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airlines as t3 on t3.uid  =  t1.airline where t2.city  =  \"aberdeen\" and t3.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 220,
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.dst_apid = 'abern'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airlines as t3 on t3.uid  =  t1.airline where t2.city  =  \"aberdeen\" and t3.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 233,
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select apid from airlines where airport = 'ahd')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 234,
        "question": "Which airlines have a flight with source airport AHD?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.name from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.src_apid = t2.apid join airlines as t3 on t2.alid = t3.alid where t1.alid = \"ahd\"",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 235,
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid = 'ahd')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.destairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 236,
        "question": "Which airlines have a flight with destination airport AHD?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.dst_apid = t2.apid where t1.apid in (select apid from airlines where airport = 'ahd')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.destairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 237,
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.alid from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.apid from airlines as t3 on t1.apid = t3.apid where t1.apid in (select t1.apid = 'cvo')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\"",
        "db_id": "flight_2"
      },
      {
        "index": 238,
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.name from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.apid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join flights as t4 on t3.alid = t4.alid where t3.apid in (select t1.apid in (select t1.apid from airlines as t3 join airports as t4 on t3.apid = t4.apid where t3.apid in (select t1.apid from airlines as t3 join airlines as t4 on t3.alid = t4.apid where t3.apid in (select t1.apid in (select t3.apid from airlines as t4 on t3.alid = t4.apid where t3.apid in (select t1.apid in (select t1.apid from airlines as t4 on t3.alid = t4.apid where t4.apid in (select t1.apid in (select t1.apid from airlines as t4 on t3.alid = t4.apid where t4.apid in (select t1.apid from airlines as t4 on t3.alid",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\"",
        "db_id": "flight_2"
      },
      {
        "index": 239,
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.alid from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.alid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t3 join airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t4.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t4.apid in (select t3.alid from airlines as t4 on t3.alid =",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 240,
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t1.alid = \"cvo\" except select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.alid = t3.apid where t1.apid in (select t1.alid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.alid = t3.alid where t1.alid = \"apg\")",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 245,
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "predicted": "select flno from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"airline\" and t1.alid = \"united airlines\"",
        "gold": "select t1.flightno from flights as t1 join airlines as t2 on t2.uid  =  t1.airline where t2.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 246,
        "question": "Which flight numbers correspond to United Airlines flights?",
        "predicted": "select flno from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.alid = \"united airlines\"",
        "gold": "select t1.flightno from flights as t1 join airlines as t2 on t2.uid  =  t1.airline where t2.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 247,
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "predicted": "select flno from flights where dst_apid in (select apid from airports where airport_name = \"apg\")",
        "gold": "select flightno from flights where sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 248,
        "question": "Give the flight numbers of flights leaving from APG.",
        "predicted": "select flno from flights where origin_apid in (select apid from flights where origin_apid in (select apid from flights where destination = \"apg\")",
        "gold": "select flightno from flights where sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 249,
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "predicted": "select t1.flno from flights as t1 join airports as t2 on t1.dst_apid = t2.apid where t2.apid in (select apid from airports as t1 join flights as t2 on t1.apid = t2.dst_apid where t1.apid in (select apid from airports where airport_name = \"apg\")",
        "gold": "select flightno from flights where destairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 250,
        "question": "Give the flight numbers of flights landing at APG.",
        "predicted": "select flno from flights where airport = \"apg\"",
        "gold": "select flightno from flights where destairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 251,
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "predicted": "select flno from flights where origin_apid in (select apid from airports where city = \"aberdeen\")",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 252,
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "predicted": "select flno from flights where destination = 'atlanta'",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 253,
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "predicted": "select flno from flights where city = \"aberdeen\"",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.destairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 254,
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "predicted": "select flno from flights where destination = 'atlanta'",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.destairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 255,
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "predicted": "select count(*) from airports as t1 join flights as t2 on t1.apid = t2.dst_apid where t1.city = 'atlanta' or t1.city = 'abilene'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\" or t2.city  =  \"abilene\"",
        "db_id": "flight_2"
      },
      {
        "index": 256,
        "question": "How many flights land in Aberdeen or Abilene?",
        "predicted": "select count(*) from airports as t1 join flights as t2 on t1.apid = t2.src_apid where t1.country = \"aberna\" or t1.country = \"alice\"",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\" or t2.city  =  \"abilene\"",
        "db_id": "flight_2"
      },
      {
        "index": 257,
        "question": "Find the name of airports which do not have any flight in and out.",
        "predicted": "select airport_name from airports where airport_code not in (select airport_code from flights)",
        "gold": "select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "db_id": "flight_2"
      },
      {
        "index": 258,
        "question": "Which airports do not have departing or arriving flights?",
        "predicted": "select airport_name from airports except select dst_apid from flights",
        "gold": "select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "db_id": "flight_2"
      },
      {
        "index": 265,
        "question": "Which cities do more than one employee under age 30 come from?",
        "predicted": "select city from employee where age  30 group by city having count(*) > 1",
        "gold": "select city from employee where age  <  30 group by city having count(*)  >  1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 266,
        "question": "Find the cities that have more than one employee under age 30.",
        "predicted": "select city from employee where age  30 group by city having count(*) > 1",
        "gold": "select city from employee where age  <  30 group by city having count(*)  >  1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 275,
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "predicted": "select name from shop where number > (select avg(products) from shop)",
        "gold": "select name from shop where number_products  >  (select avg(number_products) from shop)",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 276,
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "predicted": "select name from shop where products > (select avg(products) from shop)",
        "gold": "select name from shop where number_products  >  (select avg(number_products) from shop)",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 293,
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "predicted": "select district from shop where products  3000 intersect select district from shop where products > 10000",
        "gold": "select district from shop where number_products  <  3000 intersect select district from shop where number_products  >  10000",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 294,
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "predicted": "select district from shop where product  3000 intersect select district from shop where product > 10000",
        "gold": "select district from shop where number_products  <  3000 intersect select district from shop where number_products  >  10000",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 301,
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "predicted": "select document_name, document_type_id from documents where document_description like '%w%'",
        "gold": "select document_name ,  template_id from documents where document_description like \"%w%\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 302,
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "predicted": "select document_name, document_name from documents where document_description like '%w%'",
        "gold": "select document_name ,  template_id from documents where document_description like \"%w%\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 303,
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "predicted": "select t1.document_id, t1.document_id, t2.document_description from documents as t1 join documents as t2 on t1.document_id = t2.document_id where t1.document_name = \"robbin cv\"",
        "gold": "select document_id ,  template_id ,  document_description from documents where document_name  =  \"robbin cv\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 304,
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "predicted": "select document_id, document_name, document_description from documents where document_name = \"robbin cv\"",
        "gold": "select document_id ,  template_id ,  document_description from documents where document_name  =  \"robbin cv\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 307,
        "question": "How many documents are using the template with type code 'PPT'?",
        "predicted": "select count(*) from documents where template_type_code = 'ppt'",
        "gold": "select count(*) from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id where t2.template_type_code  =  'ppt'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 308,
        "question": "Count the number of documents that use the PPT template type.",
        "predicted": "select count(*) from documents where template_type_code = \"ppt\"",
        "gold": "select count(*) from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id where t2.template_type_code  =  'ppt'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 316,
        "question": "What are the ids for templates that are not used in any documents?",
        "predicted": "select template_id from templates where template_id not in (select template_id from documents)",
        "gold": "select template_id from templates except select template_id from documents",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 324,
        "question": "Return the ids of templates that have the code PP or PPT.",
        "predicted": "select template_id from templates where template_code = \"pp\" or template_code = \"ppt\"",
        "gold": "select template_id from templates where template_type_code  =  \"pp\" or template_type_code  =  \"ppt\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 327,
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "predicted": "select t1.document_number, t1.document_type_code from templates as t1 join templates as t2 on t1.document_type_code = t2.document_type_code where t1.date_of_date > 5",
        "gold": "select version_number ,  template_type_code from templates where version_number  >  5",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 328,
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "predicted": "select t1.document_number, t1.document_type_code from templates as t1 join templates as t2 on t1. templates_id = t2. templates_id where t1.date_number > 5",
        "gold": "select version_number ,  template_type_code from templates where version_number  >  5",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 337,
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "predicted": "select t2.model_type_code from documents as t1 join templates as t2 on t1.document_id = t2.document_id where t1.document_name = \"data base\"",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t2.document_name  =  \"data base\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 338,
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "predicted": "select t2.document_type_code from documents as t1 join templates as t2 on t1.document_id = t2.document_id where t1.document_name = \"data base\"",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t2.document_name  =  \"data base\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 339,
        "question": "Show all document names using templates with template type code BK.",
        "predicted": "select document_name from documents where template_type_code = \"bk\"",
        "gold": "select t2.document_name from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t1.template_type_code  =  \"bk\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 340,
        "question": "What are the names of documents that use templates with the code BK?",
        "predicted": "select document_name from documents where template_id = \"bk\"",
        "gold": "select t2.document_name from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t1.template_type_code  =  \"bk\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 349,
        "question": "What is the template type descriptions for template type code \"AD\".",
        "predicted": "select template_type_description from ref_document_types where template_type_code = \"ad\"",
        "gold": "select template_type_description from ref_template_types where template_type_code  =  \"ad\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 350,
        "question": "Return the template type description of the template type with the code AD.",
        "predicted": "select template_type_description from ref_documents where template_type_code = \"ad\"",
        "gold": "select template_type_description from ref_template_types where template_type_code  =  \"ad\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 351,
        "question": "What is the template type code for template type description \"Book\".",
        "predicted": "select template_type_code from ref_model_types where template_type_description = \"book\"",
        "gold": "select template_type_code from ref_template_types where template_type_description  =  \"book\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 352,
        "question": "Return the type code of the template type with the description \"Book\".",
        "predicted": "select template_type_code from ref_ templates where template_type_description = \"book\"",
        "gold": "select template_type_code from ref_template_types where template_type_description  =  \"book\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 355,
        "question": "What are the template ids with template type description \"Presentation\".",
        "predicted": "select template_id from ref_shipping_types where template_type_description = \"presentation\"",
        "gold": "select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code where t1.template_type_description  =  \"presentation\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 356,
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "predicted": "select template_id from templates where template_description = 'presentation'",
        "gold": "select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code where t1.template_type_description  =  \"presentation\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 359,
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "predicted": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"summer show\"",
        "gold": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'summer show'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 360,
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "predicted": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"summer show\"",
        "gold": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'summer show'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 361,
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "predicted": "select paragraph_details from paragraphs where text like '%korea%'",
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 362,
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "predicted": "select paragraph_details from paragraphs where paragraph_text like '%korea%'",
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 363,
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "predicted": "select t1.parat_id, t1.title_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"welcome to ny\"",
        "gold": "select t1.paragraph_id ,   t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'welcome to ny'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 364,
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "predicted": "select t1.parat_id, t1.parat_text from paragraphs as t1 join documents as t2 on t1.parat_id = t2.parat_id where t2.document_name = \"welcome to ny\"",
        "gold": "select t1.paragraph_id ,   t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'welcome to ny'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 365,
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "predicted": "select t1.parat_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"customer reviews\"",
        "gold": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  \"customer reviews\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 366,
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "predicted": "select t1.parat_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"customer reviews\"",
        "gold": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  \"customer reviews\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 377,
        "question": "What is the document id with 1 to 2 paragraphs?",
        "predicted": "select document_id from paragraphs where document_id between 1 and 2",
        "gold": "select document_id from paragraphs group by document_id having count(*) between 1 and 2",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 380,
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "predicted": "select document_id from documents where paragraph_text like '%brazil%' intersect select document_id from documents where paragraph_text = 'ireland'",
        "gold": "select document_id from paragraphs where paragraph_text  =  'brazil' intersect select document_id from paragraphs where paragraph_text  =  'ireland'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 387,
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "predicted": "select name from teacher where hometown!= 'no lever urban district'",
        "gold": "select name from teacher where hometown != \"little lever urban district\"",
        "db_id": "course_teach"
      },
      {
        "index": 388,
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "predicted": "select name from teacher where hometown!= 'no lever urban district'",
        "gold": "select name from teacher where hometown != \"little lever urban district\"",
        "db_id": "course_teach"
      },
      {
        "index": 403,
        "question": "Show the name of the teacher for the math course.",
        "predicted": "select t2.name from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t1.course_name = \"math\"",
        "gold": "select t3.name from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id where t2.course  =  \"math\"",
        "db_id": "course_teach"
      },
      {
        "index": 404,
        "question": "What are the names of the people who teach math courses?",
        "predicted": "select t2.name from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t1.course_id = 'math'",
        "gold": "select t3.name from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id where t2.course  =  \"math\"",
        "db_id": "course_teach"
      },
      {
        "index": 409,
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "predicted": "select name from teacher where teacher_id not in (select teacher_id from course_order)",
        "gold": "select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "db_id": "course_teach"
      },
      {
        "index": 410,
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "predicted": "select name from teacher where course_id not in (select t1.teacher_id from course_arranged)",
        "gold": "select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "db_id": "course_teach"
      },
      {
        "index": 411,
        "question": "How many visitors below age 30 are there?",
        "predicted": "select count(*) from customer where age  30",
        "gold": "select count(*) from visitor where age  <  30",
        "db_id": "museum_visit"
      },
      {
        "index": 412,
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "predicted": "select name from customer where level > 4 order by level",
        "gold": "select name from visitor where level_of_membership  >  4 order by level_of_membership desc",
        "db_id": "museum_visit"
      },
      {
        "index": 413,
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "predicted": "select avg(age) from customer where level!= 4",
        "gold": "select avg(age) from visitor where level_of_membership  <=  4",
        "db_id": "museum_visit"
      },
      {
        "index": 414,
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "predicted": "select name, level_of_membership from customer where age > 4 order by age",
        "gold": "select name ,  level_of_membership from visitor where level_of_membership  >  4 order by age desc",
        "db_id": "museum_visit"
      },
      {
        "index": 416,
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "predicted": "select avg(num_of_staff) from museum where open_year  2009",
        "gold": "select avg(num_of_staff) from museum where open_year  <  2009",
        "db_id": "museum_visit"
      },
      {
        "index": 417,
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "predicted": "select open_year, num_of_staff from museum where name = 'place museum'",
        "gold": "select num_of_staff ,  open_year from museum where name  =  'plaza museum'",
        "db_id": "museum_visit"
      },
      {
        "index": 425,
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "predicted": "select sum(total_cost_cost) from customer where level = 1",
        "gold": "select sum(t2.total_spent) from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id where t1.level_of_membership  =  1",
        "db_id": "museum_visit"
      },
      {
        "index": 426,
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "predicted": "select t1.name from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id join museum as t3 on t2.museum_id = t3.museum_id where t3.open_year  2009 intersect select t1.name from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id join museum as t3 on t2.museum_id = t3.museum_id where t3.open_year > 2011",
        "gold": "select t1.name from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id join museum as t3 on t3.museum_id  =  t2.museum_id where t3.open_year  <  2009 intersect select t1.name from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id join museum as t3 on t3.museum_id  =  t2.museum_id where t3.open_year  >  2011",
        "db_id": "museum_visit"
      },
      {
        "index": 427,
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "predicted": "select count(*) from customer where customer_id not in (select customer_id from visit where open_year > 2010)",
        "gold": "select count(*) from visitor where id not in (select t2.visitor_id from museum as t1 join visit as t2 on t1.museum_id  =  t2.museum_id where t1.open_year  >  2010)",
        "db_id": "museum_visit"
      },
      {
        "index": 428,
        "question": "How many museums were opened after 2013 or before 2008?",
        "predicted": "select count(*) from museum where open_year > 2014 or open_year  2008",
        "gold": "select count(*) from museum where open_year  >  2013 or open_year  <  2008",
        "db_id": "museum_visit"
      },
      {
        "index": 433,
        "question": "List the first name and birth date of all players from the country with code USA.",
        "predicted": "select first_name, birth_date from players where country_code = \"usa\"",
        "gold": "select first_name ,  birth_date from players where country_code  =  'usa'",
        "db_id": "wta_1"
      },
      {
        "index": 434,
        "question": "What are the first names and birth dates of players from the USA?",
        "predicted": "select first_name, birth_date from players where country_code = \"usa\"",
        "gold": "select first_name ,  birth_date from players where country_code  =  'usa'",
        "db_id": "wta_1"
      },
      {
        "index": 447,
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "predicted": "select t2.winner_name from rankings as t1 join team as t2 on t1.team = t2.team_id where t1.year = 2014 intersect select t2.winner_name from rankings as t1 join matches as t2 on t1.winning_id = t2.winning_id where t1.year = 2016",
        "gold": "select winner_name from matches where year  =  2013 intersect select winner_name from matches where year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 448,
        "question": "What are the names of players who won in both 2013 and 2016?",
        "predicted": "select t2.name from rankings as t1 join player as t2 on t1.player_id = t2.player_id where t1.year = 2013 intersect select t2.name from rankings as t1 join players as t2 on t1.player_id = t2.player_id where t1.year = 2016",
        "gold": "select winner_name from matches where year  =  2013 intersect select winner_name from matches where year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 449,
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "predicted": "select count(*) from matchs where year = 2013 or year = 2016",
        "gold": "select count(*) from matches where year  =  2013 or year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 450,
        "question": "How many matches were played in 2013 or 2016?",
        "predicted": "select count(*) from matchs where year = 2013 or year = 2016",
        "gold": "select count(*) from matches where year  =  2013 or year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 451,
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "predicted": "select t1.country_code, t1.first_name from players as t1 join matchs as t2 on t1.player_id = t2.player_id where t2.winning_name = \"australia open\" intersect select t1.country_code, t1.winning_name from players as t1 join matchs as t2 on t1.player_id = t2.player_id where t2.winning_year = \"tournament\"",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'wta championships' intersect select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'australian open'",
        "db_id": "wta_1"
      },
      {
        "index": 452,
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "predicted": "select t2.first_name, t2.country_code from ratings as t1 join players as t2 on t1.player_id = t2.player_id where t1.rank = \"wta championship\" intersect select t2.first_name, t1.country_code from ratings as t1 join matches as t2 on t1.winning_id = t2.winning_id where t1.name = \"australia open\"",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'wta championships' intersect select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'australian open'",
        "db_id": "wta_1"
      },
      {
        "index": 457,
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "predicted": "select first_name, last_name from players where birth_date = \"left\" order by birth_date",
        "gold": "select first_name ,  last_name from players where hand  =  'l' order by birth_date",
        "db_id": "wta_1"
      },
      {
        "index": 458,
        "question": "What are the full names of all left handed players, in order of birth date?",
        "predicted": "select first_name, last_name from players order by birth_date",
        "gold": "select first_name ,  last_name from players where hand  =  'l' order by birth_date",
        "db_id": "wta_1"
      },
      {
        "index": 465,
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "predicted": "select t2.winning_name from rankings as t1 join match as t2 on t1.winning_id = t2.winning_id where t1.country = \"australia open open\" group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 466,
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "predicted": "select t2.winning_name from rankings as t1 join results as t2 on t1.winning_id = t2.winning_id where t1.country = \"australia open open\" group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 468,
        "question": "What are the names of the winner and loser who played in the longest match?",
        "predicted": "select t2.winning_name, t2.loser_r = t1.winning_r where t2.year = (select max(year) from matches)",
        "gold": "select winner_name ,  loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 485,
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "predicted": "select count(*) from matchs where class = \"wta championship\" intersect select count(*) from wins where class = \"left\"",
        "gold": "select count(distinct winner_name) from matches where tourney_name  =  'wta championships' and winner_hand  =  'l'",
        "db_id": "wta_1"
      },
      {
        "index": 486,
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "predicted": "select count(*) from matchs where t2.winning_name = \"left\" and t1.year = \"wta championships\"",
        "gold": "select count(distinct winner_name) from matches where tourney_name  =  'wta championships' and winner_hand  =  'l'",
        "db_id": "wta_1"
      },
      {
        "index": 491,
        "question": "How many ships ended up being 'Captured'?",
        "predicted": "select count(*) from ship where destination = 'captured'",
        "gold": "select count(*) from ship where disposition_of_ship  =  'captured'",
        "db_id": "battle_death"
      },
      {
        "index": 496,
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "predicted": "select t1.death, t1.injury from death as t1 join ship as t2 on t1.ship_id = t2.ship_id where t2.tonnage!= \"tonnage\"",
        "gold": "select t1.killed ,  t1.injured from death as t1 join ship as t2 on t1.caused_by_ship_id  =  t2.id where t2.tonnage  =  't'",
        "db_id": "battle_death"
      },
      {
        "index": 497,
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "predicted": "select name, t1.result from battle as t1 join commander as t2 on t1.armed = t2.armed where t2.kompetition!= 'boril'",
        "gold": "select name ,  result from battle where bulgarian_commander != 'boril'",
        "db_id": "battle_death"
      },
      {
        "index": 498,
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "predicted": "select distinct t1.id, t2.name from ship as t1 join death as t2 on t1.id = t2.ship_id where t1.type = 'brig'",
        "gold": "select distinct t1.id ,  t1.name from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.ship_type  =  'brig'",
        "db_id": "battle_death"
      },
      {
        "index": 501,
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "predicted": "select distinct t2.name from rank as t1 join battle as t2 on t1.film_id = t2.baldwin i'",
        "gold": "select name from battle where bulgarian_commander  =  'kaloyan' and latin_commander  =  'baldwin i'",
        "db_id": "battle_death"
      },
      {
        "index": 503,
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "predicted": "select count(*) from ship where id not in ( select ship_id from death where tonnage = 225 )",
        "gold": "select count(*) from battle where id not in ( select lost_in_battle from ship where tonnage  =  '225' );",
        "db_id": "battle_death"
      },
      {
        "index": 504,
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "predicted": "select t2.name, t2.date from ship as t1 join death as t2 on t1.id = t2.ship_id join ship as t3 on t2.ship_id = t3.id where t1.name = 'lettice' and t2.name = 'hms atalanta'",
        "gold": "select t1.name ,  t1.date from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.name  =  'lettice' intersect select t1.name ,  t1.date from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.name  =  'hms atalanta'",
        "db_id": "battle_death"
      },
      {
        "index": 505,
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "predicted": "select name, results, bulgarian commander from battle where ship_id not in (select ship_id from death where location = 'english channel')",
        "gold": "select name ,  result ,  bulgarian_commander from battle except select t1.name ,  t1.result ,  t1.bulgarian_commander from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.location  =  'english channel'",
        "db_id": "battle_death"
      },
      {
        "index": 506,
        "question": "What are the notes of the death events which has substring 'East'?",
        "predicted": "select note from death where event like '%east%'",
        "gold": "select note from death where note like '%east%'",
        "db_id": "battle_death"
      },
      {
        "index": 507,
        "question": "what are all the addresses including line 1 and line 2?",
        "predicted": "select address_id from addresses where line_1 like \"%\" and line_2",
        "gold": "select line_1 ,  line_2 from addresses",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 511,
        "question": "How is the math course described?",
        "predicted": "select course_description from courses where course_name = \"math\"",
        "gold": "select course_description from courses where course_name  =  'math'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 512,
        "question": "What are the descriptions for all the math courses?",
        "predicted": "select course_description from courses where course_name = \"math\"",
        "gold": "select course_description from courses where course_name  =  'math'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 513,
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "predicted": "select zip_postcode from addresses where city = \"port chelsea\"",
        "gold": "select zip_postcode from addresses where city  =  'port chelsea'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 514,
        "question": "What is the zip code for Port Chelsea?",
        "predicted": "select zip_postcode from addresses where city = \"port chelsea\"",
        "gold": "select zip_postcode from addresses where city  =  'port chelsea'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 521,
        "question": "How many degrees does the engineering department offer?",
        "predicted": "select count(*) from departments as t1 join degrees as t2 on t1.dept_name = t2.dept_name where dept_name = \"engineer\"",
        "gold": "select count(*) from departments as t1 join degree_programs as t2 on t1.department_id  =  t2.department_id where t1.department_name  =  'engineer'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 522,
        "question": "How many degrees does the engineering department have?",
        "predicted": "select count(*) from departments as t1 join degrees as t2 on t1.dept_name = t2.dept_name where dept_name = \"engineer\"",
        "gold": "select count(*) from departments as t1 join degree_programs as t2 on t1.department_id  =  t2.department_id where t1.department_name  =  'engineer'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 531,
        "question": "What is the description of the department whose name has the substring the computer?",
        "predicted": "select dept_description from departments where dept_name like '%comp.%'",
        "gold": "select department_description from departments where department_name like '%computer%'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 532,
        "question": "What is the department description for the one whose name has the word computer?",
        "predicted": "select dept_description from departments where dept_name like '%comp.%'",
        "gold": "select department_description from departments where department_name like '%computer%'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 535,
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t2.degree_code = 'boston red stockings'",
        "gold": "select distinct t1.first_name ,  t1.middle_name ,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id join degree_programs as t3 on t2.degree_program_id  =  t3.degree_program_id where t3.degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 536,
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t2.student_id = 'boston red stockings'",
        "gold": "select distinct t1.first_name ,  t1.middle_name ,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id join degree_programs as t3 on t2.degree_program_id  =  t3.degree_program_id where t3.degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 543,
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "predicted": "select semester_name from semesters where semester_id not in (select semester_id from student_enrolment)",
        "gold": "select semester_name from semesters where semester_id not in( select semester_id from student_enrolment )",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 544,
        "question": "What is the name of the semester with no students enrolled?",
        "predicted": "select semester_name from semesters where semester_id not in (select semester_id from student_enrolment)",
        "gold": "select semester_name from semesters where semester_id not in( select semester_id from student_enrolment )",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 549,
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "predicted": "select t1.last_name from students as t1 join student_enrolment as t2 on t1.address_id = t2.address_id where t2.state_province_county = \"north carolina\" except select t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id",
        "gold": "select t1.last_name from students as t1 join addresses as t2 on t1.current_address_id  =  t2.address_id where t2.state_province_county  =  'northcarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id  =  t4.student_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 550,
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "predicted": "select t1.last_name from students as t1 join student_enrolment as t2 on t1.address_id = t2.address_id where t1.state_province_county = \"north carolina\" except select t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id",
        "gold": "select t1.last_name from students as t1 join addresses as t2 on t1.current_address_id  =  t2.address_id where t2.state_province_county  =  'northcarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id  =  t4.student_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 553,
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "predicted": "select phone_number from students where first_name = \"tylan\" and last_name = \"k ward\"",
        "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 554,
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "predicted": "select t2.mobile_number from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t1.first_name = \"tilmothy ward\"",
        "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 559,
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "predicted": "select first_name, last_name from students where permanent_address_id!= \"null\" group by first_name",
        "gold": "select first_name from students where current_address_id != permanent_address_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 560,
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "predicted": "select t1.first_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id",
        "gold": "select first_name from students where current_address_id != permanent_address_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 575,
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "predicted": "select semester from student_enrolment where student_id = 'm' intersect select semester from student_enrolment where student_id = 'birth'",
        "gold": "select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 576,
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "predicted": "select semester_id from student_enrolment where student_id = 'm' intersect select semester_id from student_enrolment where student_id = 'birth'",
        "gold": "select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 581,
        "question": "Describe the section h.",
        "predicted": "select section_name from sections where semester_name = \"h\"",
        "gold": "select section_description from sections where section_name  =  'h'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 582,
        "question": "What is the description for the section named h?",
        "predicted": "select section_description from sections where section_name = \"h\"",
        "gold": "select section_description from sections where section_name  =  'h'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 583,
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "predicted": "select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t2.country = \"hafghanistan\" union select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t2.country = \"hapan\" and t1.number = \"09700166842\"",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 584,
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "predicted": "select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t1.country = \"hapanese\" union select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t2.city = \"09700\"",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 587,
        "question": "List all cartoon directed by \"Ben Jones\".",
        "predicted": "select title from cartoon where directed_by = \"ben jones\"",
        "gold": "select title from cartoon where directed_by = \"ben jones\";",
        "db_id": "tvshow"
      },
      {
        "index": 588,
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "predicted": "select title from cartoon where directed_by = \"benn jones\"",
        "gold": "select title from cartoon where directed_by = \"ben jones\";",
        "db_id": "tvshow"
      },
      {
        "index": 589,
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "predicted": "select count(*) from cartoon where directed_by = \"joseph\" and editor = \"kuhr\"",
        "gold": "select count(*) from cartoon where written_by = \"joseph kuhr\";",
        "db_id": "tvshow"
      },
      {
        "index": 590,
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "predicted": "select count(*) from cartoon where written_by = \"james kuhr\"",
        "gold": "select count(*) from cartoon where written_by = \"joseph kuhr\";",
        "db_id": "tvshow"
      },
      {
        "index": 593,
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "predicted": "select title from cartoon where directed_by = \"ben jones\" or written_by = \"brandon vietti\"",
        "gold": "select title from cartoon where directed_by = \"ben jones\" or directed_by = \"brandon vietti\";",
        "db_id": "tvshow"
      },
      {
        "index": 594,
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "predicted": "select title from cartoon where directed_by = \"billy jones\" or directed_by = \"rincent vietti\"",
        "gold": "select title from cartoon where directed_by = \"ben jones\" or directed_by = \"brandon vietti\";",
        "db_id": "tvshow"
      },
      {
        "index": 597,
        "question": "List the number of different series names and contents in the TV Channel table.",
        "predicted": "select count(distinct t1.series_name), count(distinct t1.contents) from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.title = \"tv channel\"",
        "gold": "select count(distinct series_name) ,  count(distinct content) from tv_channel;",
        "db_id": "tvshow"
      },
      {
        "index": 598,
        "question": "How many different series and contents are listed in the TV Channel table?",
        "predicted": "select count(distinct t1.series_name), count(distinct t1.contents) from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.title = \"tv channel\"",
        "gold": "select count(distinct series_name) ,  count(distinct content) from tv_channel;",
        "db_id": "tvshow"
      },
      {
        "index": 599,
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "predicted": "select content from tv_channel where series_name = \"sky radio\"",
        "gold": "select content from tv_channel where series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 600,
        "question": "What is the content of the series Sky Radio?",
        "predicted": "select content from t1.content where t1.title = \"c sky radio\"",
        "gold": "select content from tv_channel where series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 601,
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "predicted": "select package_option from t1.platform where t1.title = \"tv channel\" and t1.series_name = \"sky radio\"",
        "gold": "select package_option from tv_channel where series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 602,
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "predicted": "select t1.paket_option from t1.paket_option as t1 join t1.channel as t2 on t1.id = t2.channel_id join series as t3 on t1.series_id = t3.id where t3.series_name = \"c sky radio\"",
        "gold": "select package_option from tv_channel where series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 603,
        "question": "How many TV Channel using language English?",
        "predicted": "select count(*) from t1.language",
        "gold": "select count(*) from tv_channel where language = \"english\";",
        "db_id": "tvshow"
      },
      {
        "index": 604,
        "question": "How many TV Channels use the English language?",
        "predicted": "select count(*) from t1.language",
        "gold": "select count(*) from tv_channel where language = \"english\";",
        "db_id": "tvshow"
      },
      {
        "index": 609,
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "predicted": "select t2.series_name from cartoon as t1 join t1.series as t2 on t1.id = t2.series_id join tv_channel as t3 on t1.id = t3.channel_id where t1.title = \"the rise of the blue beetle\"",
        "gold": "select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"the rise of the blue beetle!\";",
        "db_id": "tvshow"
      },
      {
        "index": 610,
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "predicted": "select t1.series_name from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id join cartoon as t3 on t2.characteristic_id = t3.id where t3.title = \"the rise of the blue beetle\"",
        "gold": "select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"the rise of the blue beetle!\";",
        "db_id": "tvshow"
      },
      {
        "index": 611,
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "predicted": "select t1.title from cartoon as t1 join t1.characteristic as t2 on t1.id = t2.characteristic_id join series as t3 on t2.series_id = t3.id where t3.series_name = \"sky radio\"",
        "gold": "select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 612,
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "predicted": "select t3.title from television as t1 join t1.series as t2 on t1.id = t2.station_id join cartoon as t3 on t1.series_id = t3.id where t1.series_name = \"ttv channel\" and t1.series_name = \"sky radio\"",
        "gold": "select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 616,
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "predicted": "select having count(*), t1.rating from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id where t2.title = \"tv series\" group by t1.id order by count(*) desc limit 3",
        "gold": "select episode ,  rating from tv_series order by rating desc limit 3;",
        "db_id": "tvshow"
      },
      {
        "index": 619,
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "predicted": "select t2.airport_date from tv_series as t1 join series as t2 on t1.series_id = t2.id where t1.title = \"a love of a lifetime\"",
        "gold": "select air_date from tv_series where episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 620,
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "predicted": "select date from aircraft where title = \"a love of a lifetime\"",
        "gold": "select air_date from tv_series where episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 621,
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "predicted": "select weekly_rank from tv_series where episode = \"a love of a lifetime\"",
        "gold": "select weekly_rank from tv_series where episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 622,
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "predicted": "select weekly_rank from episode where episode = \"a love of a lifetime\"",
        "gold": "select weekly_rank from tv_series where episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 623,
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "predicted": "select t2.platform_name from episodes as t1 join tv_channel as t2 on t1.id = t2.tv_channel_id where t1.title = \"a love of a lifetime\"",
        "gold": "select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 624,
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "predicted": "select t2.series_name from episode as t1 join series as t2 on t1.series_id = t2.id where t1.title = \"a love of a lifetime\"",
        "gold": "select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 625,
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "predicted": "select t1.event from tv_series as t1 join t1.series as t2 on t1.id = t2.series_id join tv_series as t3 on t2.series_id = t3.id where t3.series_name = \"sky radio\"",
        "gold": "select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 626,
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "predicted": "select t1.event from t1.event as t1 join series as t2 on t1.series_id = t2.id where t2.title = \"sky radio\"",
        "gold": "select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 631,
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "predicted": "select t1.paket_name, t1.series_name from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.channel = \"tv\" group by t2.channel order by count(*) desc limit 1",
        "gold": "select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\"",
        "db_id": "tvshow"
      },
      {
        "index": 632,
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "predicted": "select t1.paket_name, t1.series_name from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id join tv as t3 on t2.tv_channel = t3.id where t3.channel = \"tv channel\" order by high_definition desc limit 1",
        "gold": "select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\"",
        "db_id": "tvshow"
      },
      {
        "index": 633,
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "predicted": "select t1.country from t1.country as t1 join t1.country as t2 on t1.id = t2.country_id join cartoon as t3 on t2.artist_id = t3.id where t3.directed_by = \" todd casey\"",
        "gold": "select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey'",
        "db_id": "tvshow"
      },
      {
        "index": 634,
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "predicted": "select t1.country from t1.country as t1 join cartoon as t2 on t1.id = t2.artist_id where t2.directed_by = \"t todd casey\"",
        "gold": "select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey'",
        "db_id": "tvshow"
      },
      {
        "index": 635,
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "predicted": "select country from t1.country where id not in (select country from cartoon where written_by = \"t todd casey\")",
        "gold": "select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey'",
        "db_id": "tvshow"
      },
      {
        "index": 636,
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "predicted": "select country from t1.country except select country from t1.country as t1 join cartoon as t2 on t1.id = t2.artist_id where t2.directed_by = \"t todd casey\"",
        "gold": "select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey'",
        "db_id": "tvshow"
      },
      {
        "index": 637,
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "predicted": "select t2.series_name, t2.country from t1.channel as t1 join t1.series as t2 on t1.id = t2.channel_id join cartoon as t3 on t1.series_id = t3.id where t3.directed_by = \"billy jones\" intersect select t2.series_name, t1.country from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel where t3.directed_by = \"michael chang\"",
        "gold": "select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'michael chang' intersect select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 638,
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "predicted": "select t2.series_name, t2.country from t1.channel as t1 join t1.series as t2 on t1.id = t2.channel_id join cartoon as t3 on t1.series_id = t3.id where t3.directed_by = t2.by t3.directed_by = t1.id join channel as t4 on t3.channel_id = t4.id where t4.directed_by = 'beijing chang'",
        "gold": "select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'michael chang' intersect select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 639,
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "predicted": "select pixel_actor, country from t1.id where t1.pixel_actory!= 'english'",
        "gold": "select pixel_aspect_ratio_par ,  country from tv_channel where language != 'english'",
        "db_id": "tvshow"
      },
      {
        "index": 640,
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "predicted": "select pixel_attribute_rate, country from tv_channel where channel!= \"english\"",
        "gold": "select pixel_aspect_ratio_par ,  country from tv_channel where language != 'english'",
        "db_id": "tvshow"
      },
      {
        "index": 643,
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "predicted": "select id from channel except select channel from cartoon where directed_by = \"benn jones\"",
        "gold": "select id from tv_channel except select channel from cartoon where directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 644,
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "predicted": "select channel from tv_channel except select channel from cartoon where directed_by = \"benn jones\"",
        "gold": "select id from tv_channel except select channel from cartoon where directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 645,
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "predicted": "select t1.paket_option from t1.channel except select t1.paket_option from t1.channel as t1 join t2.channel_id from t1.channel_id as t2 on t1.id = t2.channel_id join cartoon as t3 on t2.characteristic_id = t3.id where t3.directed_by = \"benn jones\"",
        "gold": "select package_option from tv_channel where id not in (select channel from cartoon where directed_by  =  'ben jones')",
        "db_id": "tvshow"
      },
      {
        "index": 646,
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "predicted": "select distinct channel from t1.channel except select t1.paket_option from t1.channel as t1 join t2.channel as t2 on t1.id = t2.channel_id join cartoon as t3 on t2.characteristic_id = t3.id where t3.directed_by = \"benn jones\"",
        "gold": "select package_option from tv_channel where id not in (select channel from cartoon where directed_by  =  'ben jones')",
        "db_id": "tvshow"
      },
      {
        "index": 657,
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "predicted": "select max(t1.lat_table_made) from poker_player as t1 join people as t2 on t1.phone_id = t2.people_id where t1.money  200000",
        "gold": "select max(final_table_made) from poker_player where earnings  <  200000",
        "db_id": "poker_player"
      },
      {
        "index": 658,
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "predicted": "select max(t1.lat_table_made) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.assets  200000",
        "gold": "select max(final_table_made) from poker_player where earnings  <  200000",
        "db_id": "poker_player"
      },
      {
        "index": 661,
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.money > 300000",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t2.earnings  >  300000",
        "db_id": "poker_player"
      },
      {
        "index": 662,
        "question": "Give the names of poker players who have earnings above 300000.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.money > 300000",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t2.earnings  >  300000",
        "db_id": "poker_player"
      },
      {
        "index": 669,
        "question": "What is the average earnings of poker players with height higher than 200?",
        "predicted": "select avg(t1.money) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200",
        "gold": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t1.height  >  200",
        "db_id": "poker_player"
      },
      {
        "index": 670,
        "question": "Give average earnings of poker players who are taller than 200.",
        "predicted": "select avg(t1.money) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200",
        "gold": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t1.height  >  200",
        "db_id": "poker_player"
      },
      {
        "index": 681,
        "question": "Show names of people whose nationality is not \"Russia\".",
        "predicted": "select name from people where nationality!= \"russia\"",
        "gold": "select name from people where nationality != \"russia\"",
        "db_id": "poker_player"
      },
      {
        "index": 682,
        "question": "What are the names of people who are not from Russia?",
        "predicted": "select name from people where nationality!= \"russia\"",
        "gold": "select name from people where nationality != \"russia\"",
        "db_id": "poker_player"
      },
      {
        "index": 691,
        "question": "What is last date created of votes from the state 'CA'?",
        "predicted": "select t1.latin_date from votes as t1 join state as t2 on t1.state = t2.district where t2.state = \"ca\"",
        "gold": "select max(created) from votes where state  =  'ca'",
        "db_id": "voter_1"
      },
      {
        "index": 692,
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "predicted": "select contestant_name from contestants where contestant_name!= \"jessie alloway\"",
        "gold": "select contestant_name from contestants where contestant_name != 'jessie alloway'",
        "db_id": "voter_1"
      },
      {
        "index": 697,
        "question": "How many contestants did not get voted?",
        "predicted": "select count(*) from contestants where contestant_id not in (select contestant from votes)",
        "gold": "select count(*) from contestants where contestant_number not in ( select contestant_number from votes )",
        "db_id": "voter_1"
      },
      {
        "index": 699,
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "predicted": "select t1.date, t1.state, t1.phone_number from votes as t1 join contestants as t2 on t1.vote = t2.vote_id where t2.name = 'tabatha gehling'",
        "gold": "select t2.created ,  t2.state ,  t2.phone_number from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number where t1.contestant_name  =  'tabatha gehling'",
        "db_id": "voter_1"
      },
      {
        "index": 700,
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "predicted": "select t1.area_code from areas as t1 join votes as t2 on t1.area_code = t2.area_code join contestants as t3 on t1.country_id = t3.country where t3.title = 'tabatha' and t2.affirmation = 'kelly clauss'",
        "gold": "select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number join area_code_state as t3 on t2.state  =  t3.state where t1.contestant_name  =  'tabatha gehling' intersect select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number join area_code_state as t3 on t2.state  =  t3.state where t1.contestant_name  =  'kelly clauss'",
        "db_id": "voter_1"
      },
      {
        "index": 701,
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "predicted": "select contestant_name from contestants where contestant_name like '%al%'",
        "gold": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "db_id": "voter_1"
      },
      {
        "index": 702,
        "question": "What are the names of all the countries that became independent after 1950?",
        "predicted": "select name from country where independence_year > 1950",
        "gold": "select name from country where indepyear  >  1950",
        "db_id": "world_1"
      },
      {
        "index": 703,
        "question": "Give the names of the nations that were founded after 1950.",
        "predicted": "select name from country where founded > 1950",
        "gold": "select name from country where indepyear  >  1950",
        "db_id": "world_1"
      },
      {
        "index": 704,
        "question": "How many countries have a republic as their form of government?",
        "predicted": "select count(*) from country where government = 'governor'",
        "gold": "select count(*) from country where governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 705,
        "question": "How many countries have governments that are republics?",
        "predicted": "select count(distinct country_code) from country",
        "gold": "select count(*) from country where governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 706,
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "predicted": "select sum(surface_area) from country where country = 'cancelled'",
        "gold": "select sum(surfacearea) from country where region  =  \"caribbean\"",
        "db_id": "world_1"
      },
      {
        "index": 707,
        "question": "How much surface area do the countires in the Carribean cover together?",
        "predicted": "select count(*) from country as t1 join sqlite_area as t2 on t1.id = t2.country_code where t1.name = \"carribean\"",
        "gold": "select sum(surfacearea) from country where region  =  \"caribbean\"",
        "db_id": "world_1"
      },
      {
        "index": 708,
        "question": "Which continent is Anguilla in?",
        "predicted": "select continent from country where nationality = \"anguilla\"",
        "gold": "select continent from country where name  =  \"anguilla\"",
        "db_id": "world_1"
      },
      {
        "index": 709,
        "question": "What is the continent name which Anguilla belongs to?",
        "predicted": "select t1.continent from country as t1 join country as t2 on t1.country_code = t2.country where t2.name = \"anguilla\"",
        "gold": "select continent from country where name  =  \"anguilla\"",
        "db_id": "world_1"
      },
      {
        "index": 710,
        "question": "Which region is the city Kabul located in?",
        "predicted": "select t1.area from country as t1 join country as t2 on t1.country_code = t2.country where t2.name = \"kayaking\"",
        "gold": "select region from country as t1 join city as t2 on t1.code  =  t2.countrycode where t2.name  =  \"kabul\"",
        "db_id": "world_1"
      },
      {
        "index": 711,
        "question": "What region is Kabul in?",
        "predicted": "select region from country where city = \"bangul\"",
        "gold": "select region from country as t1 join city as t2 on t1.code  =  t2.countrycode where t2.name  =  \"kabul\"",
        "db_id": "world_1"
      },
      {
        "index": 712,
        "question": "Which language is the most popular in Aruba?",
        "predicted": "select language from country_language where country_name = \"aruba\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 713,
        "question": "What language is predominantly spoken in Aruba?",
        "predicted": "select language from country_language where country_name = \"aruba\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 714,
        "question": "What are the population and life expectancies in Brazil?",
        "predicted": "select population, life_attendance from country where country = 'brazil'",
        "gold": "select population ,  lifeexpectancy from country where name  =  \"brazil\"",
        "db_id": "world_1"
      },
      {
        "index": 715,
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "predicted": "select population, life_attendance from country where country = \"brazil\"",
        "gold": "select population ,  lifeexpectancy from country where name  =  \"brazil\"",
        "db_id": "world_1"
      },
      {
        "index": 716,
        "question": "What are the region and population of Angola?",
        "predicted": "select region, population from country where country = \"agola\"",
        "gold": "select population ,  region from country where name  =  \"angola\"",
        "db_id": "world_1"
      },
      {
        "index": 717,
        "question": "What region does Angola belong to and what is its population?",
        "predicted": "select t1.region, t1.population from country as t1 join country as t2 on t1.country_code = t2.country_code where t2.name = \"angola\"",
        "gold": "select population ,  region from country where name  =  \"angola\"",
        "db_id": "world_1"
      },
      {
        "index": 718,
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.region_code = \"central africa\"",
        "gold": "select avg(lifeexpectancy) from country where region  =  \"central africa\"",
        "db_id": "world_1"
      },
      {
        "index": 719,
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country = \"central africa\"",
        "gold": "select avg(lifeexpectancy) from country where region  =  \"central africa\"",
        "db_id": "world_1"
      },
      {
        "index": 720,
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "predicted": "select name from country where country = 'asia' order by lifestance limit 1",
        "gold": "select name from country where continent  =  \"asia\" order by lifeexpectancy limit 1",
        "db_id": "world_1"
      },
      {
        "index": 721,
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "predicted": "select name from country where country = 'asia' order by life_attendance limit 1",
        "gold": "select name from country where continent  =  \"asia\" order by lifeexpectancy limit 1",
        "db_id": "world_1"
      },
      {
        "index": 722,
        "question": "What is the total population and maximum GNP in Asia?",
        "predicted": "select sum(population), max(gnp) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"aspan\"",
        "gold": "select sum(population) ,  max(gnp) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 723,
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "predicted": "select count(*), country_code from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"aspan\" group by t1.country_code order by count(*) desc limit 1",
        "gold": "select sum(population) ,  max(gnp) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 724,
        "question": "What is the average life expectancy in African countries that are republics?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"africa\"",
        "gold": "select avg(lifeexpectancy) from country where continent  =  \"africa\" and governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 725,
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country = \"africa\"",
        "gold": "select avg(lifeexpectancy) from country where continent  =  \"africa\" and governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 726,
        "question": "What is the total surface area of the continents Asia and Europe?",
        "predicted": "select sum(surface_area) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"asia\" intersect select sum(t1.surface_area) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"europea\"",
        "gold": "select sum(surfacearea) from country where continent  =  \"asia\" or continent  =  \"europe\"",
        "db_id": "world_1"
      },
      {
        "index": 727,
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "predicted": "select sum(surface_area) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"aspan\" or t1.country_code = \"europea\"",
        "gold": "select sum(surfacearea) from country where continent  =  \"asia\" or continent  =  \"europe\"",
        "db_id": "world_1"
      },
      {
        "index": 728,
        "question": "How many people live in Gelderland district?",
        "predicted": "select count(*) from city as t1 join city as t2 on t1.city_code = t2.id where t1.district = \"monerland\"",
        "gold": "select sum(population) from city where district  =  \"gelderland\"",
        "db_id": "world_1"
      },
      {
        "index": 729,
        "question": "What is the total population of Gelderland district?",
        "predicted": "select sum(population) from city where district = \"brown\"",
        "gold": "select sum(population) from city where district  =  \"gelderland\"",
        "db_id": "world_1"
      },
      {
        "index": 730,
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "predicted": "select avg(t1.gnp), sum(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.governor = \"united states\"",
        "gold": "select avg(gnp) ,  sum(population) from country where governmentform  =  \"us territory\"",
        "db_id": "world_1"
      },
      {
        "index": 731,
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "predicted": "select avg(t1.gnp), sum(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country_code = \"united states\"",
        "gold": "select avg(gnp) ,  sum(population) from country where governmentform  =  \"us territory\"",
        "db_id": "world_1"
      },
      {
        "index": 734,
        "question": "How many type of governments are in Africa?",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"africa\"",
        "gold": "select count(distinct governmentform) from country where continent  =  \"africa\"",
        "db_id": "world_1"
      },
      {
        "index": 735,
        "question": "How many different forms of governments are there in Africa?",
        "predicted": "select count(distinct government_form) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country = \"africa\"",
        "gold": "select count(distinct governmentform) from country where continent  =  \"africa\"",
        "db_id": "world_1"
      },
      {
        "index": 736,
        "question": "What is the total number of languages used in Aruba?",
        "predicted": "select count(*) from country as t1 join country_language as t2 on t1.country_code = t2.country where t1.country = \"aruba\"",
        "gold": "select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\"",
        "db_id": "world_1"
      },
      {
        "index": 737,
        "question": "How many languages are spoken in Aruba?",
        "predicted": "select count(*) from country_language where country = \"aruba\"",
        "gold": "select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\"",
        "db_id": "world_1"
      },
      {
        "index": 738,
        "question": "How many official languages does Afghanistan have?",
        "predicted": "select count(*) from country_language where country = \"afghanistan\"",
        "gold": "select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"afghanistan\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 739,
        "question": "How many official languages are spoken in Afghanistan?",
        "predicted": "select count(*) from country_language where country = \"afghanistan\"",
        "gold": "select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"afghanistan\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 744,
        "question": "How many countries speak both English and Dutch?",
        "predicted": "select count(*) from country where languages = \"english\" intersect select count(*) from country where languages = \"english\"",
        "gold": "select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\")",
        "db_id": "world_1"
      },
      {
        "index": 745,
        "question": "What is the number of nations that use English and Dutch?",
        "predicted": "select count(*) from country where languages = \"english\" intersect select count(*) from country where languages = \"english\"",
        "gold": "select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\")",
        "db_id": "world_1"
      },
      {
        "index": 746,
        "question": "What are the names of nations speak both English and French?",
        "predicted": "select name from country where language = \"english\" intersect select name from country where language = \"franchise\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\"",
        "db_id": "world_1"
      },
      {
        "index": 747,
        "question": "Give the names of nations that speak both English and French.",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" intersect select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country_code where t2.language = \"english\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\"",
        "db_id": "world_1"
      },
      {
        "index": 748,
        "question": "What are the names of nations where both English and French are official languages?",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" intersect select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country_code where t2.language = \"france\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 749,
        "question": "Give the names of countries with English and French as official languages.",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" intersect select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country_code where t2.official_population = \"franchise\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 750,
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "predicted": "select count(distinct continent) from country where language = \"chinese\"",
        "gold": "select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"chinese\"",
        "db_id": "world_1"
      },
      {
        "index": 751,
        "question": "How many continents speak Chinese?",
        "predicted": "select count(*) from country where language = \"chinese\"",
        "gold": "select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"chinese\"",
        "db_id": "world_1"
      },
      {
        "index": 752,
        "question": "What are the regions that use English or Dutch?",
        "predicted": "select region from country where languages = \"english\" or languages = \"english\"",
        "gold": "select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" or t2.language  =  \"dutch\"",
        "db_id": "world_1"
      },
      {
        "index": 753,
        "question": "Which regions speak Dutch or English?",
        "predicted": "select region from country where language = \"english\" or language = \"english\"",
        "gold": "select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" or t2.language  =  \"dutch\"",
        "db_id": "world_1"
      },
      {
        "index": 754,
        "question": "What are the countries where either English or Dutch is the official language ?",
        "predicted": "select country from country where languages = \"english\" or languages = \"native\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 755,
        "question": "Which countries have either English or Dutch as an official language?",
        "predicted": "select t1.country from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" or t2.language = \"native\"",
        "gold": "select * from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select * from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 756,
        "question": "Which language is the most popular on the Asian continent?",
        "predicted": "select language from country where t1.country = \"asian\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  \"asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 757,
        "question": "What is the language that is used by the largest number of Asian nations?",
        "predicted": "select language from country_language where country_name = \"asian\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  \"asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 758,
        "question": "Which languages are spoken by only one country in republic governments?",
        "predicted": "select language from country_language group by language having count(*) = 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.governmentform  =  \"republic\" group by t2.language having count(*)  =  1",
        "db_id": "world_1"
      },
      {
        "index": 759,
        "question": "What languages are only used by a single country with a republic government?",
        "predicted": "select language from country where state = \"japan\" group by language",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.governmentform  =  \"republic\" group by t2.language having count(*)  =  1",
        "db_id": "world_1"
      },
      {
        "index": 760,
        "question": "Find the city with the largest population that uses English.",
        "predicted": "select city from city where country_code = \"english\" group by city_code order by population desc limit 1",
        "gold": "select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 761,
        "question": "What is the most populace city that speaks English?",
        "predicted": "select city from city where country_code = \"english\" group by city order by count(*) desc limit 1",
        "gold": "select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 762,
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "predicted": "select name, population, expected_from country from country where country = 'asian' order by population desc limit 1",
        "gold": "select name ,  population ,  lifeexpectancy from country where continent  =  \"asia\" order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 763,
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "predicted": "select name, population, life_attendancy from country where country = 'asian' order by country_name desc limit 1",
        "gold": "select name ,  population ,  lifeexpectancy from country where continent  =  \"asia\" order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 764,
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "predicted": "select avg(life_attendance) from country where country!= \"english\"",
        "gold": "select avg(lifeexpectancy) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\")",
        "db_id": "world_1"
      },
      {
        "index": 765,
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "predicted": "select avg(life_attendance) from country where country!= \"english\"",
        "gold": "select avg(lifeexpectancy) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\")",
        "db_id": "world_1"
      },
      {
        "index": 766,
        "question": "What is the total number of people living in the nations that do not use English?",
        "predicted": "select count(*) from country where country_code not in (select country_code from country where languages = \"english\")",
        "gold": "select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\")",
        "db_id": "world_1"
      },
      {
        "index": 767,
        "question": "How many people live in countries that do not speak English?",
        "predicted": "select count(*) from country where country_code not in (select country_code from country where languages = \"english\")",
        "gold": "select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\")",
        "db_id": "world_1"
      },
      {
        "index": 768,
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "predicted": "select t1.official_female from country_language as t1 join country as t2 on t1.country_code = t2.country where t2.heightrix\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.headofstate  =  \"beatrix\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 769,
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "predicted": "select t1.official_female from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.heightrix\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.headofstate  =  \"beatrix\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 770,
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "predicted": "select count(distinct t1.official_percentage) from country as t1 join country_language as t2 on t1.country_code = t2.country where t1.year  1930",
        "gold": "select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where  indepyear  <  1930 and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 771,
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "predicted": "select count(distinct t1.official_population) from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.founded  1930",
        "gold": "select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where  indepyear  <  1930 and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 772,
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "predicted": "select country_code from country where surface > (select max(surface_area) from country where country = \"europea\")",
        "gold": "select name from country where surfacearea  >  (select min(surfacearea) from country where continent  =  \"europe\")",
        "db_id": "world_1"
      },
      {
        "index": 773,
        "question": "Which countries have greater area than that of any country in Europe?",
        "predicted": "select country from country where area > (select max(area) from country where country = \"europea\")",
        "gold": "select name from country where surfacearea  >  (select min(surfacearea) from country where continent  =  \"europe\")",
        "db_id": "world_1"
      },
      {
        "index": 774,
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "predicted": "select country from country where population  (select max(population) from country where country = 'asie')",
        "gold": "select name from country where continent  =  \"africa\"  and population  <  (select max(population) from country where continent  =  \"asia\")",
        "db_id": "world_1"
      },
      {
        "index": 775,
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "predicted": "select country from country where population  (select min(population) from country where country = 'asie')",
        "gold": "select name from country where continent  =  \"africa\"  and population  <  (select min(population) from country where continent  =  \"asia\")",
        "db_id": "world_1"
      },
      {
        "index": 776,
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "predicted": "select country from country where population > (select max(population) from country where country = 'africa')",
        "gold": "select name from country where continent  =  \"asia\"  and population  >  (select max(population) from country where continent  =  \"africa\")",
        "db_id": "world_1"
      },
      {
        "index": 777,
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "predicted": "select country from country where population > (select max(population) from country where country = 'africa')",
        "gold": "select name from country where continent  =  \"asia\"  and population  >  (select min(population) from country where continent  =  \"africa\")",
        "db_id": "world_1"
      },
      {
        "index": 778,
        "question": "What are the country codes for countries that do not speak English?",
        "predicted": "select country_code from country where country_code not in (select country_code from country_language where languages = \"english\")",
        "gold": "select countrycode from countrylanguage except select countrycode from countrylanguage where language  =  \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 779,
        "question": "Return the country codes for countries that do not speak English.",
        "predicted": "select country_code from country where country_code not in (select country_code from country_language where languages = \"english\")",
        "gold": "select countrycode from countrylanguage except select countrycode from countrylanguage where language  =  \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 780,
        "question": "What are the country codes of countries where people use languages other than English?",
        "predicted": "select country_code from country where languages > (select country_code from country_language where languages = \"english\")",
        "gold": "select distinct countrycode from countrylanguage where language != \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 781,
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "predicted": "select country_code from country where languages!= \"english\"",
        "gold": "select distinct countrycode from countrylanguage where language != \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 782,
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "predicted": "select country_code from country where country_code not in (select country_code from country_language where country_form!= \"english\") intersect select country_code from country_language where government_form!= \"governor\"",
        "gold": "select code from country where governmentform != \"republic\" except select countrycode from countrylanguage where language  =  \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 783,
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "predicted": "select country_code from country where country_code not in (select country_code from country_language where country_name = \"english\") except select country_code from country_language where state = \"governor\")",
        "gold": "select code from country where governmentform != \"republic\" except select countrycode from countrylanguage where language  =  \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 784,
        "question": "Which cities are in European countries where English is not the official language?",
        "predicted": "select city from city where country_code = \"european\" except select city from country_language where country = \"english\"",
        "gold": "select distinct t2.name from country as t1 join city as t2 on t2.countrycode  =  t1.code where t1.continent  =  'europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code  =  t4.countrycode where t4.isofficial  =  't' and t4.language  =  'english')",
        "db_id": "world_1"
      },
      {
        "index": 785,
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "predicted": "select name from city where country!= \"europea\"",
        "gold": "select distinct t2.name from country as t1 join city as t2 on t2.countrycode  =  t1.code where t1.continent  =  'europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code  =  t4.countrycode where t4.isofficial  =  't' and t4.language  =  'english')",
        "db_id": "world_1"
      },
      {
        "index": 786,
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "predicted": "select count(*) from city as t1 join country_language as t2 on t1.country_code = t2.country_code where t1.country_name = \"asian\" and t2.language = \"chinese\"",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 787,
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "predicted": "select distinct t1.name from city as t1 join country_language as t2 on t1.country_code = t2.country_code join country as t3 on t1.country_code = t3.id where t3.country = \"aspan\" intersect select distinct t1.name from city as t1 join country_language as t2 on t1.country_code = t2.country where t2.governor = \"chinese\"",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 794,
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "predicted": "select count(*), district from city where population > (select avg(population) from city) group by district",
        "gold": "select count(*) ,  district from city where population  >  (select avg(population) from city) group by district",
        "db_id": "world_1"
      },
      {
        "index": 795,
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "predicted": "select count(*), district from city where population > (select avg(population) from city) group by district",
        "gold": "select count(*) ,  district from city where population  >  (select avg(population) from city) group by district",
        "db_id": "world_1"
      },
      {
        "index": 798,
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "predicted": "select avg(life_attendance), sum(population), continent from country where life_ expectancy  72 group by continent",
        "gold": "select sum(population) ,  avg(lifeexpectancy) ,  continent from country group by continent having avg(lifeexpectancy)  <  72",
        "db_id": "world_1"
      },
      {
        "index": 806,
        "question": "how many countries are in Asia?",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"asia\"",
        "gold": "select count(*) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 807,
        "question": "Count the number of countries in Asia.",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"asia\"",
        "gold": "select count(*) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 808,
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "predicted": "select name from country where continent = \"europea\" and population > 80000",
        "gold": "select name from country where continent  =  \"europe\" and population  =  \"80000\"",
        "db_id": "world_1"
      },
      {
        "index": 809,
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "predicted": "select name from country where country_code = \"europea\" and population > 80000",
        "gold": "select name from country where continent  =  \"europe\" and population  =  \"80000\"",
        "db_id": "world_1"
      },
      {
        "index": 810,
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "predicted": "select sum(t1.population), avg(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country_name = \"north america\" and t1.population > 3000",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "db_id": "world_1"
      },
      {
        "index": 811,
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "predicted": "select sum(t1.population), avg(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country_code where t2.country_area > 3000",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "db_id": "world_1"
      },
      {
        "index": 818,
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "predicted": "select count(*) from country where country = \"spain\" group by country_code order by count(*) desc limit 1",
        "gold": "select count(*) ,   max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 819,
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country where t1.language = \"spanish\"",
        "gold": "select count(*) ,   max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 820,
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "predicted": "select country_code from country where country = \"spain\" group by country_code order by count(*) desc limit 1",
        "gold": "select countrycode ,  max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 821,
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "predicted": "select country_code from country where language = \"spanish\" group by country_code order by count(*) desc limit 1",
        "gold": "select countrycode ,  max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 826,
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "predicted": "select name from conductor where nationality!= \"usa\"",
        "gold": "select name from conductor where nationality != 'usa'",
        "db_id": "orchestra"
      },
      {
        "index": 827,
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "predicted": "select name from conductor where nationality!= \"usa\"",
        "gold": "select name from conductor where nationality != 'usa'",
        "db_id": "orchestra"
      },
      {
        "index": 832,
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "predicted": "select max(share), min(share) from performance where type!= \"live final\"",
        "gold": "select max(share) ,  min(share) from performance where type != \"live final\"",
        "db_id": "orchestra"
      },
      {
        "index": 833,
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "predicted": "select max(share), min(share) from performance where type!= \"live final\"",
        "gold": "select max(share) ,  min(share) from performance where type != \"live final\"",
        "db_id": "orchestra"
      },
      {
        "index": 846,
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "predicted": "select t2.name from orchestra as t1 join conductor as t2 on t1.order = t2.order_id join performance as t3 on t1.performance_id = t3.performance_id where t1.year > 2008",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id where year_of_founded  >  2008",
        "db_id": "orchestra"
      },
      {
        "index": 847,
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "predicted": "select t2.name from orchestra as t1 join conductor as t2 on t1.order_id = t2.order_id join performance as t3 on t1.order_id = t3.order_id where t1.year > 2008",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id where year_of_founded  >  2008",
        "db_id": "orchestra"
      },
      {
        "index": 856,
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "predicted": "select record_company from orchestra where years_of_founded  2003 intersect select record_company from orchestra where years_of_launch > 2003",
        "gold": "select record_company from orchestra where year_of_founded  <  2003 intersect select record_company from orchestra where year_of_founded  >  2003",
        "db_id": "orchestra"
      },
      {
        "index": 857,
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "predicted": "select company from orchestra where years_of_founded  2003 intersect select company from orchestra where years_of_launch > 2003",
        "gold": "select record_company from orchestra where year_of_founded  <  2003 intersect select record_company from orchestra where year_of_founded  >  2003",
        "db_id": "orchestra"
      },
      {
        "index": 858,
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "predicted": "select count(*) from orchestra where record_format = \"cd\" or record_format = \"dvd\"",
        "gold": "select count(*) from orchestra where major_record_format  =  \"cd\" or major_record_format  =  \"dvd\"",
        "db_id": "orchestra"
      },
      {
        "index": 859,
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "predicted": "select count(*) from orchestra where record_format = \"cd\" or record_format = \"dvd\"",
        "gold": "select count(*) from orchestra where major_record_format  =  \"cd\" or major_record_format  =  \"dvd\"",
        "db_id": "orchestra"
      },
      {
        "index": 868,
        "question": "What grade is Kyle in?",
        "predicted": "select distinct grade from high_schooler where name = 'kyle'",
        "gold": "select grade from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 869,
        "question": "Return the grade for the high schooler named Kyle.",
        "predicted": "select grade from high_schooler where name = 'k kyle'",
        "gold": "select grade from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 870,
        "question": "Show the names of all high schoolers in grade 10.",
        "predicted": "select name from high_schooler where grade = 10",
        "gold": "select name from highschooler where grade  =  10",
        "db_id": "network_1"
      },
      {
        "index": 871,
        "question": "What are the names of all high schoolers in grade 10?",
        "predicted": "select name from high_schooler where grade = 10",
        "gold": "select name from highschooler where grade  =  10",
        "db_id": "network_1"
      },
      {
        "index": 872,
        "question": "Show the ID of the high schooler named Kyle.",
        "predicted": "select id from high_schooler where name = 'k kyle'",
        "gold": "select id from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 873,
        "question": "What is Kyle's id?",
        "predicted": "select kyles.id from home_school as t1 join student as t2 on t1.school_id = t2.id where t2.name = 'kerry'",
        "gold": "select id from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 874,
        "question": "How many high schoolers are there in grade 9 or 10?",
        "predicted": "select count(*) from high_schooler where grade = 9 or grade = 10",
        "gold": "select count(*) from highschooler where grade  =  9 or grade  =  10",
        "db_id": "network_1"
      },
      {
        "index": 875,
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "predicted": "select count(*) from high_schooler where grade = 9 or grade = 10",
        "gold": "select count(*) from highschooler where grade  =  9 or grade  =  10",
        "db_id": "network_1"
      },
      {
        "index": 890,
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "predicted": "select t3.name from friend as t1 join lives as t2 on t1.stuid = t2.stuid join school as t3 on t3.id = t2.friend where t1.name = 'k kyle'",
        "gold": "select t3.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id join highschooler as t3 on t1.friend_id  =  t3.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 891,
        "question": "Return the names of friends of the high school student Kyle.",
        "predicted": "select t2.name from high_school as t1 join friend as t2 on t1.school_id = t2.id join student as t3 on t3.stuid = t2.stuid where t3.name = 'k kyle'",
        "gold": "select t3.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id join highschooler as t3 on t1.friend_id  =  t3.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 892,
        "question": "How many friends does the high school student Kyle have?",
        "predicted": "select count(t2.friend) from high_school as t1 join friend as t2 on t1.school_id = t2.id join student as t3 on t3.stuid = t2.stuid where t3.name = 'k kyle'",
        "gold": "select count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 893,
        "question": "Count the number of friends Kyle has.",
        "predicted": "select count(t2.friend) from friend as t1 join friend as t2 on t1.id = t2.friend where t1.name = 'kerry'",
        "gold": "select count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 894,
        "question": "Show ids of all students who do not have any friends.",
        "predicted": "select stuid from student where id not in (select stuid from friend)",
        "gold": "select id from highschooler except select student_id from friend",
        "db_id": "network_1"
      },
      {
        "index": 896,
        "question": "Show names of all high school students who do not have any friends.",
        "predicted": "select name from high_schooler where id not in (select high_schooler from friend)",
        "gold": "select name from highschooler except select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 897,
        "question": "What are the names of students who have no friends?",
        "predicted": "select name from student where id not in (select stuid from friends)",
        "gold": "select name from highschooler except select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 898,
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "predicted": "select t1.id from high_schooler as t1 join likes as t2 on t1.id = t2.school_id join friend as t3 on t2.friend = t3.id where t3.friend = t2.name intersect select t1.id from high_schooler as t1 join people as t2 on t1.stuid = t2.stuid",
        "gold": "select student_id from friend intersect select liked_id from likes",
        "db_id": "network_1"
      },
      {
        "index": 899,
        "question": "What are the ids of students who both have friends and are liked?",
        "predicted": "select stuid from student as t1 join likes as t2 on t1.stuid = t2.stuid where t2.friend = t2.friend except select stuid from likes as t1 join friend as t2 on t1.stuid = t2.stuid",
        "gold": "select student_id from friend intersect select liked_id from likes",
        "db_id": "network_1"
      },
      {
        "index": 900,
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.stuid = t2.stuid join friend as t3 on t3.stuid = t2.friend where t3.friend!= \"null\"",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 910,
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "predicted": "select t1.name from student as t1 join friend as t2 on t1.id = t2.stuid where t2.grade > 5 group by t2.stuid having count(*) >= 2",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.grade  >  5 group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 911,
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "predicted": "select t1.name from high_schooler as t1 join friends as t2 on t1.id = t2.school_id group by t1.id having count(*) > 5 intersect select t1.name from high_schooler as t1 join friends as t2 on t1.school_id = t2.school_id group by t1.high_school_id having count(*) >= 2",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.grade  >  5 group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 912,
        "question": "How many likes does Kyle have?",
        "predicted": "select count(*) from student as t1 join likes as t2 on t1.stuid = t2.stuid where t1.name = 'kerry'",
        "gold": "select count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 913,
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "predicted": "select count(*) from student as t1 join likes as t2 on t1.stuid = t2.stuid join high_schooler as t3 on t3.id = t2.high_schooler where t3.name = 'k kyle'",
        "gold": "select count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 914,
        "question": "Find the average grade of all students who have some friends.",
        "predicted": "select avg(t2.grade) from friends as t1 join high_schooler as t2 on t1.stuid = t2.stuid",
        "gold": "select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 915,
        "question": "What is the average grade of students who have friends?",
        "predicted": "select avg(t2.grade) from friends as t1 join high_schooler as t2 on t1.stuid = t2.stuid",
        "gold": "select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 916,
        "question": "Find the minimum grade of students who have no friends.",
        "predicted": "select min(grade) from high_schooler where id not in (select id from friends)",
        "gold": "select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 917,
        "question": "What is the lowest grade of students who do not have any friends?",
        "predicted": "select distinct grade from student where id not in (select id from friends)",
        "gold": "select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 920,
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "predicted": "select avg(age) from dogs where dog_id in ( select dog_id from treatments );",
        "gold": "select avg(age) from dogs where dog_id in ( select dog_id from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 921,
        "question": "Find the average age of the dogs who went through treatments.",
        "predicted": "select avg(age) from dogs where dog_id in (select dog_id from treatments)",
        "gold": "select avg(age) from dogs where dog_id in ( select dog_id from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 922,
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "predicted": "select t1.prof_id, t1.last_name, t1.cell_phone from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t1.state = \"indiana\" or t2.treatment_type_code = \"claimed\" group by t1.prof_id having count(*) > 2",
        "gold": "select professional_id ,  last_name ,  cell_number from professionals where state  =  'indiana' union select t1.professional_id ,  t1.last_name ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 923,
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "predicted": "select t1.prof_id, t1.last_name, t1.cell_phone from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t1.state = \"indiana\" group by t1.prof_id having count(*) > 2",
        "gold": "select professional_id ,  last_name ,  cell_number from professionals where state  =  'indiana' union select t1.professional_id ,  t1.last_name ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 924,
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "predicted": "select name from dogs where dogs_id not in ( select dogs_id from treatments where cost_of_treatment > 1000 )",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 925,
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "predicted": "select name from dogs where owner!= 1000",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 928,
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "predicted": "select professional_id, role_code, email from professionals except select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"dogs\"",
        "gold": "select professional_id ,  role_code ,  email_address from professionals except select t1.professional_id ,  t1.role_code ,  t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 929,
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "predicted": "select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"null\"",
        "gold": "select professional_id ,  role_code ,  email_address from professionals except select t1.professional_id ,  t1.role_code ,  t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 944,
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "predicted": "select t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"gone\"",
        "gold": "select distinct t1.first_name ,  t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment  <  ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 945,
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "predicted": "select t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = ( select avg(treatment_type_code) from treatments )",
        "gold": "select distinct t1.first_name ,  t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment  <  ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 954,
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "predicted": "select t2.name, t1.date_treatment_id from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id where t1.type_code = \"king\"",
        "gold": "select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 955,
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "predicted": "select t2.name, t1.date_treatment_date from breeds as t1 join dogs as t2 on t1.dog_id = t2.dog_id order by t1.age limit 1",
        "gold": "select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 956,
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "predicted": "select t2.first_name, t2.last_name from pets as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = \"visa\"",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t1.state  =  'virginia'",
        "db_id": "dog_kennels"
      },
      {
        "index": 957,
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "predicted": "select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = \"visa\" and t2.name = \"horses\"",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t1.state  =  'virginia'",
        "db_id": "dog_kennels"
      },
      {
        "index": 960,
        "question": "List the last name of the owner owning the youngest dog.",
        "predicted": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t1.age limit 1",
        "gold": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t2.age  =  ( select max(age) from dogs )",
        "db_id": "dog_kennels"
      },
      {
        "index": 961,
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "predicted": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t2.age limit 1",
        "gold": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t2.age  =  ( select max(age) from dogs )",
        "db_id": "dog_kennels"
      },
      {
        "index": 962,
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "predicted": "select email_address from professionals where state = \"utah\" or state = \"wisconsin\"",
        "gold": "select email_address from professionals where state  =  'hawaii' or state  =  'wisconsin'",
        "db_id": "dog_kennels"
      },
      {
        "index": 963,
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "predicted": "select email_address from professionals where state = \"utah\" or state = \"wisconsin\"",
        "gold": "select email_address from professionals where state  =  'hawaii' or state  =  'wisconsin'",
        "db_id": "dog_kennels"
      },
      {
        "index": 968,
        "question": "How many professionals have performed any treatment to dogs?",
        "predicted": "select count(*) from procedures as t1 join dogs as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"dogs\"",
        "gold": "select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 970,
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "predicted": "select role_code, street_city, state from professionals where city like \"%west%\"",
        "gold": "select role_code ,  street ,  city ,  state from professionals where city like '%west%'",
        "db_id": "dog_kennels"
      },
      {
        "index": 971,
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "predicted": "select role_code, street_city, state from professionals where city like \"%west%\"",
        "gold": "select role_code ,  street ,  city ,  state from professionals where city like '%west%'",
        "db_id": "dog_kennels"
      },
      {
        "index": 974,
        "question": "How many dogs have an age below the average?",
        "predicted": "select count(*) from dogs where age  ( select avg(age) from dogs)",
        "gold": "select count(*) from dogs where age  <  ( select avg(age) from dogs )",
        "db_id": "dog_kennels"
      },
      {
        "index": 975,
        "question": "Count the number of dogs of an age below the average.",
        "predicted": "select count(*) from dogs where age  ( select avg(age) from dogs)",
        "gold": "select count(*) from dogs where age  <  ( select avg(age) from dogs )",
        "db_id": "dog_kennels"
      },
      {
        "index": 978,
        "question": "How many dogs have not gone through any treatment?",
        "predicted": "select count(*) from dogs where dogs_id not in ( select dogs_id from treatments )",
        "gold": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 979,
        "question": "Tell me the number of dogs that have not received any treatment .",
        "predicted": "select count(*) from dogs where dogs_id not in ( select dogs_id from treatments )",
        "gold": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 984,
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "predicted": "select name, age, weight from dogs where abandoned = \"yes\" and no = \"0\"",
        "gold": "select name ,  age ,  weight from dogs where abandoned_yn  =  1",
        "db_id": "dog_kennels"
      },
      {
        "index": 985,
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "predicted": "select name, age, weight from dogs where abandoned = \"yes\" and no = \"0\"",
        "gold": "select name ,  age ,  weight from dogs where abandoned_yn  =  1",
        "db_id": "dog_kennels"
      },
      {
        "index": 998,
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "predicted": "select t1.first_name, t1.last_name, t2.treatment_type_code from professionals as t1 join treatments as t2 on t1.treatment_id = t2.treatment_id where t2.treatment_type_code = \"done\"",
        "gold": "select distinct t1.first_name ,  t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id join treatment_types as t3 on t2.treatment_type_code  =  t3.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 1006,
        "question": "List the name of singers whose citizenship is not \"France\".",
        "predicted": "select name from singer where citizenship!= \"france\"",
        "gold": "select name from singer where citizenship != \"france\"",
        "db_id": "singer"
      },
      {
        "index": 1007,
        "question": "What are the names of the singers who are not French citizens?",
        "predicted": "select name from singer where citizens!= \"franchise\"",
        "gold": "select name from singer where citizenship != \"france\"",
        "db_id": "singer"
      },
      {
        "index": 1020,
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "predicted": "select distinct t1.name from singer as t1 join song as t2 on t1.songid = t2.songid where t2.sales > 300000",
        "gold": "select distinct t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id where t2.sales  >  300000",
        "db_id": "singer"
      },
      {
        "index": 1021,
        "question": "what are the different names of the singers that have sales more than 300000?",
        "predicted": "select distinct t1.name from singer as t1 join song as t2 on t1.songid = t2.songid where t2.sales > 300000",
        "gold": "select distinct t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id where t2.sales  >  300000",
        "db_id": "singer"
      },
      {
        "index": 1027,
        "question": "What is the sname of every sing that does not have any song?",
        "predicted": "select name from singer where sex not in (select singer_id from song)",
        "gold": "select name from singer where singer_id not in (select singer_id from song)",
        "db_id": "singer"
      },
      {
        "index": 1028,
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "predicted": "select citizenship from singer where birth_year  1945 intersect select citizenship from singer where birth_year > 1955",
        "gold": "select citizenship from singer where birth_year  <  1945 intersect select citizenship from singer where birth_year  >  1955",
        "db_id": "singer"
      },
      {
        "index": 1029,
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "predicted": "select citizenship from singer where birth_year  1945 intersect select citizenship from singer where birth_year > 1955",
        "gold": "select citizenship from singer where birth_year  <  1945 intersect select citizenship from singer where birth_year  >  1955",
        "db_id": "singer"
      },
      {
        "index": 1031,
        "question": "What is the feature type name of feature AirCon?",
        "predicted": "select feature_type_name from ref_feature_types as t1 join features as t2 on t1.feature_id = t2.feature_id where t2.feature_name = \"aircon\"",
        "gold": "select t2.feature_type_name from other_available_features as t1 join ref_feature_types as t2 on t1.feature_type_code  =  t2.feature_type_code where t1.feature_name  =  \"aircon\"",
        "db_id": "real_estate_properties"
      },
      {
        "index": 1033,
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "predicted": "select property_name from properties where property_address = \"home\" union select property_name from apartments where room_count > 1",
        "gold": "select property_name from properties where property_type_code  =  \"house\" union select property_name from properties where property_type_code  =  \"apartment\" and room_count  >  1",
        "db_id": "real_estate_properties"
      }
    ],
    "join_errors": [
      {
        "index": 6,
        "question": "Show the name and the release year of the song by the youngest singer.",
        "predicted": "select t2.name, t2.release_year from singer as t1 join song as t2 on t1.song_id = t2.song_id order by t1.age limit 1",
        "gold": "select song_name ,  song_release_year from singer order by age limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 8,
        "question": "What are all distinct countries where singers above age 20 are from?",
        "predicted": "select distinct t1.country from singer as t1 join singer_in_match as t2 on t1.song_id = t2.song_id where t2.age > 20",
        "gold": "select distinct country from singer where age  >  20",
        "db_id": "concert_singer"
      },
      {
        "index": 25,
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "predicted": "select t1.name, t1.capacity from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year > 2014 group by t1.stadium_id order by count(*) desc limit 1",
        "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 35,
        "question": "List singer names and number of concerts for each singer.",
        "predicted": "select t1.name, count(*) from singer as t1 join concert as t2 on t1.songid = t2.songid group by t1.songid",
        "gold": "select t2.name ,  count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id group by t2.singer_id",
        "db_id": "concert_singer"
      },
      {
        "index": 37,
        "question": "List all singer names in concerts in year 2014.",
        "predicted": "select t1.name from singer as t1 join concert as t2 on t1.songid = t2.songid where t2.year = 2014",
        "gold": "select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id join concert as t3 on t1.concert_id  =  t3.concert_id where t3.year  =  2014",
        "db_id": "concert_singer"
      },
      {
        "index": 38,
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "predicted": "select t2.name from concert as t1 join singer as t2 on t1.songid = t2.songid where t1.year = 2014",
        "gold": "select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id join concert as t3 on t1.concert_id  =  t3.concert_id where t3.year  =  2014",
        "db_id": "concert_singer"
      },
      {
        "index": 41,
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "predicted": "select t1.name, t2.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2014 intersect select t1.name, t1.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2015",
        "gold": "select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014 intersect select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2015",
        "db_id": "concert_singer"
      },
      {
        "index": 42,
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "predicted": "select t1.name, t2.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2014 intersect select t1.name, t1.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2015",
        "gold": "select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014 intersect select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2015",
        "db_id": "concert_singer"
      },
      {
        "index": 43,
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "predicted": "select count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id order by t2.capacity desc limit 1",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "db_id": "concert_singer"
      },
      {
        "index": 51,
        "question": "Find number of pets owned by students who are older than 20.",
        "predicted": "select count(*) from pets as t1 join has_phone as t2 on t1.phone_id = t2.phone_id where t2.age > 20",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.age  >  20",
        "db_id": "pets_1"
      },
      {
        "index": 52,
        "question": "How many pets are owned by students that have an age greater than 20?",
        "predicted": "select count(*) from pets where age > 20",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.age  >  20",
        "db_id": "pets_1"
      },
      {
        "index": 53,
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "predicted": "select count(*) from pets as t1 join has_phone as t2 on t1.phone_id = t2.phone_id where t2.sex = \"f\"",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t2.petid  =  t3.petid where t1.sex  =  'f' and t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 54,
        "question": "How many dog pets are raised by female students?",
        "predicted": "select count(*) from pets where t2.sex = \"f\"",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t2.petid  =  t3.petid where t1.sex  =  'f' and t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 57,
        "question": "Find the first name of students who have cat or dog pet.",
        "predicted": "select distinct t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" or t2.phone = \"dog\"",
        "gold": "select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' or t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 58,
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "predicted": "select distinct t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" or t2.phone = \"horses\"",
        "gold": "select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' or t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 59,
        "question": "Find the first name of students who have both cat and dog pets .",
        "predicted": "select t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" intersect select t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"dog\"",
        "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 60,
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "predicted": "select t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" intersect select t1.fname from student as t1 join has_horses as t2 on t1.stuid = t2.stuid where t2.horses = \"horses\"",
        "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 61,
        "question": "Find the major and age of students who do not have a cat pet.",
        "predicted": "select major, age from student where stuid not in (select stuid from has_horses where pet_type = \"cat\")",
        "gold": "select major ,  age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 62,
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "predicted": "select major, age from student where stuid not in (select stuid from has_pid where petid = \"cat\")",
        "gold": "select major ,  age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 63,
        "question": "Find the id of students who do not have a cat pet.",
        "predicted": "select stuid from student except select stuid from has_phone where pets = \"cat\"",
        "gold": "select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 64,
        "question": "What are the ids of the students who do not own cats as pets?",
        "predicted": "select stuid from student except select stuid from has_horses",
        "gold": "select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 65,
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "predicted": "select fname, age from student where stuid not in (select stuid from has_phone)",
        "gold": "select t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 66,
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "predicted": "select fname from student where stuid in (select stuid from has_ pet where pets = \"dog\") except select stuid from has_cat\")",
        "gold": "select t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 75,
        "question": "Find the first name and age of students who have a pet.",
        "predicted": "select distinct t1.fname, t1.age from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"phone\"",
        "gold": "select distinct t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 76,
        "question": "What are the different first names and ages of the students who do have pets?",
        "predicted": "select distinct t1.fname, t1.age from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.pid = \" pets\"",
        "gold": "select distinct t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 77,
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "predicted": "select pet_id from has_phone where lname = 'smith'",
        "gold": "select t2.petid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.lname  =  'smith'",
        "db_id": "pets_1"
      },
      {
        "index": 78,
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "predicted": "select pet_id from has_phone where lname = 'smith'",
        "gold": "select t2.petid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.lname  =  'smith'",
        "db_id": "pets_1"
      },
      {
        "index": 79,
        "question": "Find the number of pets for each student who has any pet and student id.",
        "predicted": "select count(*), t1.stuid from student as t1 join has_phone as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 80,
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "predicted": "select stuid, count(*) from has_phone group by stuid",
        "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 81,
        "question": "Find the first name and gender of student who have more than one pet.",
        "predicted": "select t1.fname, t1.sex from student as t1 join has_phone as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "gold": "select t1.fname ,  t1.sex from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid having count(*)  >  1",
        "db_id": "pets_1"
      },
      {
        "index": 82,
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "predicted": "select t1.fname, t1.sex from student as t1 join has_phone as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "gold": "select t1.fname ,  t1.sex from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid having count(*)  >  1",
        "db_id": "pets_1"
      },
      {
        "index": 83,
        "question": "Find the last name of the student who has a cat that is age 3.",
        "predicted": "select lname from student where age = 3 and stuid = 1",
        "gold": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pet_age  =  3 and t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 84,
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "predicted": "select lname from student where age = 3 and stuid = 1",
        "gold": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pet_age  =  3 and t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 90,
        "question": "For each continent, list its id, name, and how many countries it has?",
        "predicted": "select t1. continent, t1.country, count(*) from continents as t1 join country as t2 on t1.country_id = t2.country_id group by t1.country_id",
        "gold": "select t1.contid ,  t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent group by t1.contid;",
        "db_id": "car_1"
      },
      {
        "index": 93,
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "predicted": "select t1.fname, t1.fname, count(*) from car_makers as t1 join cars as t2 on t1.machine_id = t2.machine_id group by t1.machine_id",
        "gold": "select t1.fullname ,  t1.id ,  count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id;",
        "db_id": "car_1"
      },
      {
        "index": 94,
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "predicted": "select t1.fname, t1.fname, count(*) from car_makers as t1 join model_model as t2 on t1.machine_id = t2.machine_id group by t1.manufacturer_id",
        "gold": "select t1.fullname ,  t1.id ,  count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id;",
        "db_id": "car_1"
      },
      {
        "index": 95,
        "question": "Which model of the car has the minimum horsepower?",
        "predicted": "select model from cars_data order by horsepower limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 96,
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "predicted": "select model from cars_data order by horsepower limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 97,
        "question": "Find the model of the car whose weight is below the average weight.",
        "predicted": "select model from cars where weight  (select avg(weight) from cars)",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.weight  <  (select avg(weight) from cars_data)",
        "db_id": "car_1"
      },
      {
        "index": 98,
        "question": "What is the model for the car with a weight smaller than the average?",
        "predicted": "select model from cars_data where weight  (select avg(weight) from cars)",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.weight  <  (select avg(weight) from cars_data)",
        "db_id": "car_1"
      },
      {
        "index": 99,
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "predicted": "select t1.machine_name from manufacturers as t1 join car_makers as t2 on t1.machine_id = t2.machine_id where t2.year = 1970",
        "gold": "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model join cars_data as t4 on t3.makeid  =  t4.id where t4.year  =  '1970';",
        "db_id": "car_1"
      },
      {
        "index": 100,
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "predicted": "select distinct t2.manufacturer from cars as t1 join car_makers as t2 on t1.model_id = t2.model_id where t1.year = 1970",
        "gold": "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model join cars_data as t4 on t3.makeid  =  t4.id where t4.year  =  '1970';",
        "db_id": "car_1"
      },
      {
        "index": 101,
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "predicted": "select t1.make, t1.model_make from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id order by t2.accelerator_year asc limit 1",
        "gold": "select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);",
        "db_id": "car_1"
      },
      {
        "index": 102,
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "predicted": "select t1.manufacturer, t1.year from manufacturers as t1 join cars_data as t2 on t1.id = t2.machine_id order by t2.accelerator_year asc limit 1",
        "gold": "select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);",
        "db_id": "car_1"
      },
      {
        "index": 103,
        "question": "Which distinct car models are the produced after 1980?",
        "predicted": "select distinct model_model from cars_data where year > 1980",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id where t3.year  >  1980;",
        "db_id": "car_1"
      },
      {
        "index": 104,
        "question": "What are the different models for the cards produced after 1980?",
        "predicted": "select distinct model from model_list where year > 1980",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id where t3.year  >  1980;",
        "db_id": "car_1"
      },
      {
        "index": 105,
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "predicted": "select t1.country_name, count(*) from countries as t1 join carriers as t2 on t1.country_id = t2.country group by t1.country_name",
        "gold": "select t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent join car_makers as t3 on t2.countryid  =  t3.country group by t1.continent;",
        "db_id": "car_1"
      },
      {
        "index": 106,
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "predicted": "select t1.country_name, count(*) from continents as t1 join car_mades as t2 on t1.country_id = t2.country group by t1. continent",
        "gold": "select t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent join car_makers as t3 on t2.countryid  =  t3.country group by t1.continent;",
        "db_id": "car_1"
      },
      {
        "index": 107,
        "question": "Which of the countries has the most car makers? List the country name.",
        "predicted": "select t1.country_name from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_name order by count(*) desc limit 1",
        "gold": "select t2.countryname from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid group by t1.country order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 108,
        "question": "What is the name of the country with the most car makers?",
        "predicted": "select t1.country_name from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_name order by count(*) desc limit 1",
        "gold": "select t2.countryname from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid group by t1.country order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 109,
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "predicted": "select count(*), t1.fname from models as t1 join car_factories as t2 on t1.model_id = t2.model_id group by t1.manufacturer_id",
        "gold": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "db_id": "car_1"
      },
      {
        "index": 110,
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "predicted": "select count(*), t1.fname, t1.fname from models as t1 join car_factories as t2 on t1.model_id = t2.model_id group by t1.manufacturer_id",
        "gold": "select count(*) ,  t2.fullname ,  t2.id from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "db_id": "car_1"
      },
      {
        "index": 111,
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "predicted": "select t1.accelerator from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.machine_name = \"acquired\" and t1.machine_name = \"sw\"",
        "gold": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.make  =  'amc hornet sportabout (sw)';",
        "db_id": "car_1"
      },
      {
        "index": 112,
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "predicted": "select sum(t1.weight) from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.model = 'acquired' and t2.weight = (select sportname from cars_data as t1 join cars as t2 on t1.machine_id = t2.machine_id where t1.machine = 'abrait sportabout')",
        "gold": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.make  =  'amc hornet sportabout (sw)';",
        "db_id": "car_1"
      },
      {
        "index": 113,
        "question": "How many car makers are there in france?",
        "predicted": "select count(*) from car_factories",
        "gold": "select count(*) from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid where t2.countryname  =  'france';",
        "db_id": "car_1"
      },
      {
        "index": 115,
        "question": "How many car models are produced in the usa?",
        "predicted": "select count(*) from car_types",
        "gold": "select count(*) from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id join countries as t3 on t2.country  =  t3.countryid where t3.countryname  =  'usa';",
        "db_id": "car_1"
      },
      {
        "index": 116,
        "question": "What is the count of the car models produced in the United States?",
        "predicted": "select count(*) from car_players where country = \"united states\"",
        "gold": "select count(*) from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id join countries as t3 on t2.country  =  t3.countryid where t3.countryname  =  'usa';",
        "db_id": "car_1"
      },
      {
        "index": 121,
        "question": "What are all the makers and models?",
        "predicted": "select t1.manufacturer, t1.model_model from car_makers as t1 join model_model as t2 on t1.model_id = t2.model_id",
        "gold": "select maker ,  model from model_list;",
        "db_id": "car_1"
      },
      {
        "index": 122,
        "question": "What are the makers and models?",
        "predicted": "select t1.machine, t1.model_model from car_makers as t1 join model_model as t2 on t1.model_id = t2.model_id",
        "gold": "select maker ,  model from model_list;",
        "db_id": "car_1"
      },
      {
        "index": 123,
        "question": "What are the countries having at least one car maker? List name and id.",
        "predicted": "select t1.country, t1.country from countries as t1 join car_factories as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) >= 1",
        "gold": "select t1.countryname ,  t1.countryid from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >=  1;",
        "db_id": "car_1"
      },
      {
        "index": 129,
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "predicted": "select t1.country from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) >= 3",
        "gold": "select t1.countryname from countries as t1 join continents as t2 on t1.continent  =  t2.contid join car_makers as t3 on t1.countryid  =  t3.country where t2.continent  =  'europe' group by t1.countryname having count(*)  >=  3;",
        "db_id": "car_1"
      },
      {
        "index": 130,
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "predicted": "select t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id where t1.country = \"europea\" group by t1.country_name having count(*) >= 3",
        "gold": "select t1.countryname from countries as t1 join continents as t2 on t1.continent  =  t2.contid join car_makers as t3 on t1.countryid  =  t3.country where t2.continent  =  'europe' group by t1.countryname having count(*)  >=  3;",
        "db_id": "car_1"
      },
      {
        "index": 133,
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "predicted": "select model_name from cars_data order by horsepower desc limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 134,
        "question": "What is the car model with the highest mpg ?",
        "predicted": "select model_name from cars order by horsepower desc limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 137,
        "question": "What is the average edispl of the cars of model volvo?",
        "predicted": "select avg(t1.edisplled) from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.model = 'volvo'",
        "gold": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t1.model  =  'volvo';",
        "db_id": "car_1"
      },
      {
        "index": 138,
        "question": "What is the average edispl for all volvos?",
        "predicted": "select avg(edisplish) from cars_data",
        "gold": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t1.model  =  'volvo';",
        "db_id": "car_1"
      },
      {
        "index": 147,
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "predicted": "select count(*) from car_makers as t1 join carriers as t2 on t1.machine_id = t2.machine_id where t2.fname = \"american motor company\"",
        "gold": "select count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker where t1.fullname  =  'american motor company';",
        "db_id": "car_1"
      },
      {
        "index": 148,
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "predicted": "select count(*) from car_factories as t1 join carriers as t2 on t1.machine_id = t2.machine_id where t2.maker = \"american motor company\"",
        "gold": "select count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker where t1.fullname  =  'american motor company';",
        "db_id": "car_1"
      },
      {
        "index": 149,
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "predicted": "select t1.fname, t1.fname, t1.machine_id from car_makers as t1 join cars as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) > 3",
        "gold": "select t1.fullname ,  t1.id from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 150,
        "question": "What are the names and ids of all makers with more than 3 models?",
        "predicted": "select t1.fname, t1.facid from car_makers as t1 join model_company as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) > 3",
        "gold": "select t1.fullname ,  t1.id from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 151,
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "predicted": "select distinct t1.model from model_model as t1 join manufacturers as t2 on t1.manufacturer = t2.id where t2.full_name = \"general motors\" or t2.weight > 3500",
        "gold": "select distinct t2.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model join car_makers as t3 on t2.maker  =  t3.id join cars_data as t4 on t1.makeid  =  t4.id where t3.fullname  =  'general motors' or t4.weight  >  3500;",
        "db_id": "car_1"
      },
      {
        "index": 152,
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "predicted": "select distinct t1.model from model_list as t1 join models as t2 on t1.model_id = t2.model_id where t2.name = \"general motors\" or t2.weight > 3500",
        "gold": "select distinct t2.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model join car_makers as t3 on t2.maker  =  t3.id join cars_data as t4 on t1.makeid  =  t4.id where t3.fullname  =  'general motors' or t4.weight  >  3500;",
        "db_id": "car_1"
      },
      {
        "index": 157,
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "predicted": "select count(*) from cars_data where model_id = (select model_id from cars_data order by accelerate_year asc limit 1)",
        "gold": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 158,
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "predicted": "select count(*) from cars_data where model = (select model_id from cars_data group by model_id order by count(*) asc limit 1)",
        "gold": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 161,
        "question": "How many countries has more than 2 car makers ?",
        "predicted": "select count(*) from manufacturers group by country having count(*) > 2",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "db_id": "car_1"
      },
      {
        "index": 162,
        "question": "What is the number of countries with more than 2 car makers ?",
        "predicted": "select count(*) from countries where count(*) > 2",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "db_id": "car_1"
      },
      {
        "index": 165,
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "predicted": "select model_name from cars_data where horsepower = 4",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 166,
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "predicted": "select model_name from cars_data order by horsepower desc limit 4",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 167,
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "predicted": "select distinct t1.driver, t1.make_name from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.mpg > 3",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <=  3;",
        "db_id": "car_1"
      },
      {
        "index": 168,
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "predicted": "select t1.machine_id, t1.make_name from cars as t1 join cars_data as t2 on t1.machine_id = t2.machine_id where t1.supplier!= 4",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "db_id": "car_1"
      },
      {
        "index": 169,
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "predicted": "select max(t1.miles_per_year) from cars as t1 join cars_data as t2 on t1.id = t2.driver_id where t2.number = \"8\" or t2.year  1980",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "db_id": "car_1"
      },
      {
        "index": 170,
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "predicted": "select max(t1.mpg) from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t2.machine_year  1980",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "db_id": "car_1"
      },
      {
        "index": 171,
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "predicted": "select model_name from models where weight  3500 except select model_name from model_company where built_name = 'ford motor company'",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id join car_makers as t4 on t1.maker  =  t4.id where t3.weight  <  3500 and t4.fullname != 'ford motor company';",
        "db_id": "car_1"
      },
      {
        "index": 172,
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "predicted": "select distinct model_model from model_list where weight  3500 except select distinct model_model from model_company where manufacturer_name = \"for ford motor company\"",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id join car_makers as t4 on t1.maker  =  t4.id where t3.weight  <  3500 and t4.fullname != 'ford motor company';",
        "db_id": "car_1"
      },
      {
        "index": 173,
        "question": "What are the name of the countries where there is not a single car maker?",
        "predicted": "select country_name from countries where country_id not in (select country_id from car_factories)",
        "gold": "select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country;",
        "db_id": "car_1"
      },
      {
        "index": 174,
        "question": "What are the names of the countries with no car makers?",
        "predicted": "select country_name from countries except select t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id",
        "gold": "select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country;",
        "db_id": "car_1"
      },
      {
        "index": 175,
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "predicted": "select t1.manufacturer_id from car_suppliers as t1 join car_factories as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) >= 2 intersect select t1.machine_id, t1.machine_make from car_suppliers as t1 join car_suppliers as t2 on t1.model_id = t2.model_id group by t1.manufacturer_id having count(*) > 3",
        "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 176,
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "predicted": "select t1.machine_id, t1.machine_make from car_makers as t1 join cars as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) >= 2 intersect select t1.machine_id, t1.machine_make from car_makers as t1 join cars as t2 on t1.model_id = t2.model_id group by t1.machine_model having count(*) > 3",
        "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 177,
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "predicted": "select t1.country, t1.country_name from countries as t1 join car_factories as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) > 3 union select t1.country_id, t1.country_name from countries as t1 join car_factories as t2 on t1.country_id = t2.country_id join model_name from countries as t3 on t2.country = t3.country_id where t3.model = 'fiat'",
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "db_id": "car_1"
      },
      {
        "index": 178,
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "predicted": "select t1.country_id, t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) > 3 union select t1.country_id, t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id group by t1.id having count(*) > 3",
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "db_id": "car_1"
      },
      {
        "index": 179,
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "predicted": "select country from airlines as t1 join airports as t2 on t1.alid = t2.alid where t1.name = \"airline\" and t1.alid = \"blue airways\"",
        "gold": "select country from airlines where airline  =  \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 180,
        "question": "What country is Jetblue Airways affiliated with?",
        "predicted": "select t1.country from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"jilblue airways\"",
        "gold": "select country from airlines where airline  =  \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 207,
        "question": "How many flights depart from City Aberdeen?",
        "predicted": "select count(*) from flights where origin_apid in (select apid from airports where city = \"c aberdeen\")",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 208,
        "question": "Return the number of flights departing from Aberdeen.",
        "predicted": "select count(*) from flights where origin_apid in (select apid from airports where airport = \"aberna\")",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 209,
        "question": "How many flights arriving in Aberdeen city?",
        "predicted": "select count(*) from airports as t1 join flights as t2 on t1.apid = t2.dst_apid where t1.country = 'abern'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 210,
        "question": "Return the number of flights arriving in Aberdeen.",
        "predicted": "select count(*) from flights where destination = 'abern'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 211,
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "predicted": "select count(*) from flights where origin_city = 'aberdeen' and destination = 'ashley'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airports as t3 on t1.sourceairport  =  t3.airportcode where t2.city  =  \"ashley\" and t3.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 212,
        "question": "How many flights fly from Aberdeen to Ashley?",
        "predicted": "select count(*) from flights where dst_apid from airports where airport = \"aberna\" and destination = \"ashley\"",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airports as t3 on t1.sourceairport  =  t3.airportcode where t2.city  =  \"ashley\" and t3.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 213,
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"jetblue airways\"",
        "gold": "select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.uid where t2.airline = \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 214,
        "question": "Give the number of Jetblue Airways flights.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"jilblue airways\"",
        "gold": "select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.uid where t2.airline = \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 215,
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid = 'asy')",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.destairport  =  \"asy\"",
        "db_id": "flight_2"
      },
      {
        "index": 216,
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.name from airlines as t1 join airports as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid in (select t1.alid from airlines as t3 on t1.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid in (select t1.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t1.apid in (select t1.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t1.apid from airlines as t3 join airports as t4 on t3.alid = t4.alid where t4.apid in (select t3.apid from airlines as t4 on t3.alid = t4.alid where t4.apid in (select t3.apid from airlines as t5 on t3.alid = t4.alid where t4.apid in (select t1.apid from airlines as t5 on t3.alid = t4.alid where t4.apid in (select",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.destairport  =  \"asy\"",
        "db_id": "flight_2"
      },
      {
        "index": 217,
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid from airlines as t1 join airlines as t3 on t1.alid = t3.alid where t1.alid = 'ahd'",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 218,
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid join airlines as t3 on t2.alid = t3.alid where t1.alid = 'ahd airport')",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 219,
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "predicted": "select count(*) from airlines where destination = 'aberdeen'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airlines as t3 on t3.uid  =  t1.airline where t2.city  =  \"aberdeen\" and t3.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 220,
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.dst_apid = 'abern'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airlines as t3 on t3.uid  =  t1.airline where t2.city  =  \"aberdeen\" and t3.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 222,
        "question": "Which city has the most frequent destination airport?",
        "predicted": "select city from airports group by city order by count(*) desc limit 1",
        "gold": "select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 224,
        "question": "Which city is the most frequent source airport?",
        "predicted": "select city from airports group by city order by count(*) desc limit 1",
        "gold": "select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 225,
        "question": "What is the code of airport that has the highest number of flights?",
        "predicted": "select airport_code from flights group by airport_code order by count(*) desc limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 226,
        "question": "What is the airport code of the airport with the most flights?",
        "predicted": "select airport_code from flights group by airport_code order by count(*) desc limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 227,
        "question": "What is the code of airport that has fewest number of flights?",
        "predicted": "select airport_code from flights group by airport_code order by count(*) limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 228,
        "question": "Give the code of the airport with the least flights.",
        "predicted": "select airport_code from flights group by airport_code order by count(*) limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 233,
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select apid from airlines where airport = 'ahd')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 234,
        "question": "Which airlines have a flight with source airport AHD?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.name from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.src_apid = t2.apid join airlines as t3 on t2.alid = t3.alid where t1.alid = \"ahd\"",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 235,
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid = 'ahd')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.destairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 237,
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.alid from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.apid from airlines as t3 on t1.apid = t3.apid where t1.apid in (select t1.apid = 'cvo')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\"",
        "db_id": "flight_2"
      },
      {
        "index": 238,
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.name from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.apid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join flights as t4 on t3.alid = t4.alid where t3.apid in (select t1.apid in (select t1.apid from airlines as t3 join airports as t4 on t3.apid = t4.apid where t3.apid in (select t1.apid from airlines as t3 join airlines as t4 on t3.alid = t4.apid where t3.apid in (select t1.apid in (select t3.apid from airlines as t4 on t3.alid = t4.apid where t3.apid in (select t1.apid in (select t1.apid from airlines as t4 on t3.alid = t4.apid where t4.apid in (select t1.apid in (select t1.apid from airlines as t4 on t3.alid = t4.apid where t4.apid in (select t1.apid from airlines as t4 on t3.alid",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\"",
        "db_id": "flight_2"
      },
      {
        "index": 239,
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.alid from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.alid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t3 join airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t4.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t4.apid in (select t3.alid from airlines as t4 on t3.alid =",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 240,
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t1.alid = \"cvo\" except select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.alid = t3.apid where t1.apid in (select t1.alid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.alid = t3.alid where t1.alid = \"apg\")",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 245,
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "predicted": "select flno from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"airline\" and t1.alid = \"united airlines\"",
        "gold": "select t1.flightno from flights as t1 join airlines as t2 on t2.uid  =  t1.airline where t2.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 246,
        "question": "Which flight numbers correspond to United Airlines flights?",
        "predicted": "select flno from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.alid = \"united airlines\"",
        "gold": "select t1.flightno from flights as t1 join airlines as t2 on t2.uid  =  t1.airline where t2.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 249,
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "predicted": "select t1.flno from flights as t1 join airports as t2 on t1.dst_apid = t2.apid where t2.apid in (select apid from airports as t1 join flights as t2 on t1.apid = t2.dst_apid where t1.apid in (select apid from airports where airport_name = \"apg\")",
        "gold": "select flightno from flights where destairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 251,
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "predicted": "select flno from flights where origin_apid in (select apid from airports where city = \"aberdeen\")",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 252,
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "predicted": "select flno from flights where destination = 'atlanta'",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 253,
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "predicted": "select flno from flights where city = \"aberdeen\"",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.destairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 254,
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "predicted": "select flno from flights where destination = 'atlanta'",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.destairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 255,
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "predicted": "select count(*) from airports as t1 join flights as t2 on t1.apid = t2.dst_apid where t1.city = 'atlanta' or t1.city = 'abilene'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\" or t2.city  =  \"abilene\"",
        "db_id": "flight_2"
      },
      {
        "index": 256,
        "question": "How many flights land in Aberdeen or Abilene?",
        "predicted": "select count(*) from airports as t1 join flights as t2 on t1.apid = t2.src_apid where t1.country = \"aberna\" or t1.country = \"alice\"",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\" or t2.city  =  \"abilene\"",
        "db_id": "flight_2"
      },
      {
        "index": 270,
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "predicted": "select t2.manager_name, t2.district from products as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "gold": "select manager_name ,  district from shop order by number_products desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 279,
        "question": "Find the name of the employee who got the highest one time bonus.",
        "predicted": "select t1.name from employee as t1 join hiring as t2 on t1.employee_id = t2.employee_id group by t1.employee_id order by count(*) desc limit 1",
        "gold": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id order by t2.bonus desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 288,
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "predicted": "select t1.name, count(*) from shop as t1 join employee as t2 on t1.shop_id = t2.shop_id group by t1.shop_id",
        "gold": "select count(*) ,  t2.name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t2.name",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 303,
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "predicted": "select t1.document_id, t1.document_id, t2.document_description from documents as t1 join documents as t2 on t1.document_id = t2.document_id where t1.document_name = \"robbin cv\"",
        "gold": "select document_id ,  template_id ,  document_description from documents where document_name  =  \"robbin cv\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 307,
        "question": "How many documents are using the template with type code 'PPT'?",
        "predicted": "select count(*) from documents where template_type_code = 'ppt'",
        "gold": "select count(*) from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id where t2.template_type_code  =  'ppt'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 308,
        "question": "Count the number of documents that use the PPT template type.",
        "predicted": "select count(*) from documents where template_type_code = \"ppt\"",
        "gold": "select count(*) from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id where t2.template_type_code  =  'ppt'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 311,
        "question": "What is the id and type code for the template used by the most documents?",
        "predicted": "select t1.document_id, t1.document_type_code from templates as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.template_id ,  t2.template_type_code from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 312,
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "predicted": "select t1.document_id, t1.document_type_code from templates as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.template_id ,  t2.template_type_code from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 327,
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "predicted": "select t1.document_number, t1.document_type_code from templates as t1 join templates as t2 on t1.document_type_code = t2.document_type_code where t1.date_of_date > 5",
        "gold": "select version_number ,  template_type_code from templates where version_number  >  5",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 328,
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "predicted": "select t1.document_number, t1.document_type_code from templates as t1 join templates as t2 on t1. templates_id = t2. templates_id where t1.date_number > 5",
        "gold": "select version_number ,  template_type_code from templates where version_number  >  5",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 337,
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "predicted": "select t2.model_type_code from documents as t1 join templates as t2 on t1.document_id = t2.document_id where t1.document_name = \"data base\"",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t2.document_name  =  \"data base\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 338,
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "predicted": "select t2.document_type_code from documents as t1 join templates as t2 on t1.document_id = t2.document_id where t1.document_name = \"data base\"",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t2.document_name  =  \"data base\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 339,
        "question": "Show all document names using templates with template type code BK.",
        "predicted": "select document_name from documents where template_type_code = \"bk\"",
        "gold": "select t2.document_name from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t1.template_type_code  =  \"bk\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 340,
        "question": "What are the names of documents that use templates with the code BK?",
        "predicted": "select document_name from documents where template_id = \"bk\"",
        "gold": "select t2.document_name from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t1.template_type_code  =  \"bk\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 341,
        "question": "Show all template type codes and the number of documents using each type.",
        "predicted": "select template_type_code, count(*) from documents group by template_type_code",
        "gold": "select t1.template_type_code ,  count(*) from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 342,
        "question": "What are the different template type codes, and how many documents use each type?",
        "predicted": "select template_type_code, count(*) from documents group by template_type_code",
        "gold": "select t1.template_type_code ,  count(*) from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 343,
        "question": "Which template type code is used by most number of documents?",
        "predicted": "select template_type_code from documents group by template_type_code order by count(*) desc limit 1",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 344,
        "question": "Return the code of the template type that is most commonly used in documents.",
        "predicted": "select template_type_code from documents group by template_type_code order by count(*) desc limit 1",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 345,
        "question": "Show all template type codes that are not used by any document.",
        "predicted": "select template_type_code from ref_ templates except select template_type_code from documents",
        "gold": "select template_type_code from templates except select template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 346,
        "question": "What are the codes of template types that are not used for any document?",
        "predicted": "select template_type_code from ref_ templates except select template_type_code from documents",
        "gold": "select template_type_code from templates except select template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 353,
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "predicted": "select distinct t1.document_type_description from ref_ templates as t1 join documents as t2 on t1.document_type_code = t2.document_type_code",
        "gold": "select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code join documents as t3 on t2.template_id  =  t3.template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 354,
        "question": "Return the different descriptions for templates that have been used in a document.",
        "predicted": "select distinct template_description from documents",
        "gold": "select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code join documents as t3 on t2.template_id  =  t3.template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 355,
        "question": "What are the template ids with template type description \"Presentation\".",
        "predicted": "select template_id from ref_shipping_types where template_type_description = \"presentation\"",
        "gold": "select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code where t1.template_type_description  =  \"presentation\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 356,
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "predicted": "select template_id from templates where template_description = 'presentation'",
        "gold": "select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code where t1.template_type_description  =  \"presentation\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 369,
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "predicted": "select t1.document_id, t1.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "gold": "select t1.document_id ,  t2.document_name ,  count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 370,
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "predicted": "select t1.document_id, t1.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "gold": "select t1.document_id ,  t2.document_name ,  count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 373,
        "question": "What is the document id and name with greatest number of paragraphs?",
        "predicted": "select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.document_id ,  t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 374,
        "question": "Return the id and name of the document with the most paragraphs.",
        "predicted": "select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.document_id ,  t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 391,
        "question": "What is the hometown of the youngest teacher?",
        "predicted": "select t2.hometown from course as t1 join teacher as t2 on t1.instructor = t2.instructor_id order by t1.age limit 1",
        "gold": "select hometown from teacher order by age asc limit 1",
        "db_id": "course_teach"
      },
      {
        "index": 392,
        "question": "Where is the youngest teacher from?",
        "predicted": "select t1.name from teacher as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id order by t2.age limit 1",
        "gold": "select hometown from teacher order by age asc limit 1",
        "db_id": "course_teach"
      },
      {
        "index": 393,
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "predicted": "select t2.hometown, count(*) from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.hometown",
        "gold": "select hometown ,  count(*) from teacher group by hometown",
        "db_id": "course_teach"
      },
      {
        "index": 394,
        "question": "For each hometown, how many teachers are there?",
        "predicted": "select t2.hometown, count(*) from instructor as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.hometown",
        "gold": "select hometown ,  count(*) from teacher group by hometown",
        "db_id": "course_teach"
      },
      {
        "index": 398,
        "question": "What are the towns from which at least two teachers come from?",
        "predicted": "select t1.hometown from teacher as t1 join teacher as t2 on t1.instructor_id = t2.instructor_id group by t1.hometown having count(*) >= 2",
        "gold": "select hometown from teacher group by hometown having count(*)  >=  2",
        "db_id": "course_teach"
      },
      {
        "index": 399,
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "predicted": "select t2.name, t1.course_id from course_order as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id",
        "db_id": "course_teach"
      },
      {
        "index": 400,
        "question": "What is the name of each teacher and what course they teach?",
        "predicted": "select t2.name, t1.course_id from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id",
        "db_id": "course_teach"
      },
      {
        "index": 401,
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "predicted": "select t2.name, t1.course_id from course_order as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id order by t2.name asc",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id order by t3.name",
        "db_id": "course_teach"
      },
      {
        "index": 402,
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "predicted": "select t2.name, t1.course_id from course as t1 join teachers as t2 on t1.teacher_id = t2.teacher_id order by t2.name",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id order by t3.name",
        "db_id": "course_teach"
      },
      {
        "index": 403,
        "question": "Show the name of the teacher for the math course.",
        "predicted": "select t2.name from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t1.course_name = \"math\"",
        "gold": "select t3.name from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id where t2.course  =  \"math\"",
        "db_id": "course_teach"
      },
      {
        "index": 404,
        "question": "What are the names of the people who teach math courses?",
        "predicted": "select t2.name from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t1.course_id = 'math'",
        "gold": "select t3.name from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id where t2.course  =  \"math\"",
        "db_id": "course_teach"
      },
      {
        "index": 425,
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "predicted": "select sum(total_cost_cost) from customer where level = 1",
        "gold": "select sum(t2.total_spent) from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id where t1.level_of_membership  =  1",
        "db_id": "museum_visit"
      },
      {
        "index": 427,
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "predicted": "select count(*) from customer where customer_id not in (select customer_id from visit where open_year > 2010)",
        "gold": "select count(*) from visitor where id not in (select t2.visitor_id from museum as t1 join visit as t2 on t1.museum_id  =  t2.museum_id where t1.open_year  >  2010)",
        "db_id": "museum_visit"
      },
      {
        "index": 435,
        "question": "Find the average age of losers and winners of all matches.",
        "predicted": "select avg(t1.age), avg(t1.winner) from matches as t1 join match as t2 on t1.player_id = t2.player_id",
        "gold": "select avg(loser_age) ,  avg(winner_age) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 436,
        "question": "What are the average ages of losers and winners across matches?",
        "predicted": "select avg(t1.age), avg(t1.winner) from matches as t1 join match as t2 on t1.match_id = t2.match_id",
        "gold": "select avg(loser_age) ,  avg(winner_age) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 445,
        "question": "Find the name of tourney that has more than 10 matches.",
        "predicted": "select t1.name from tourneys as t1 join matchs as t2 on t1.tournament_id = t2.tournament_id group by t2.tournament_name having count(*) > 10",
        "gold": "select tourney_name from matches group by tourney_name having count(*)  >  10",
        "db_id": "wta_1"
      },
      {
        "index": 446,
        "question": "What are the names of tournaments that have more than 10 matches?",
        "predicted": "select t2.name from matches as t1 join tournaments as t2 on t1.tournament_id = t2.tournament_id group by t2.name having count(*) > 10",
        "gold": "select tourney_name from matches group by tourney_name having count(*)  >  10",
        "db_id": "wta_1"
      },
      {
        "index": 447,
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "predicted": "select t2.winner_name from rankings as t1 join team as t2 on t1.team = t2.team_id where t1.year = 2014 intersect select t2.winner_name from rankings as t1 join matches as t2 on t1.winning_id = t2.winning_id where t1.year = 2016",
        "gold": "select winner_name from matches where year  =  2013 intersect select winner_name from matches where year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 448,
        "question": "What are the names of players who won in both 2013 and 2016?",
        "predicted": "select t2.name from rankings as t1 join player as t2 on t1.player_id = t2.player_id where t1.year = 2013 intersect select t2.name from rankings as t1 join players as t2 on t1.player_id = t2.player_id where t1.year = 2016",
        "gold": "select winner_name from matches where year  =  2013 intersect select winner_name from matches where year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 451,
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "predicted": "select t1.country_code, t1.first_name from players as t1 join matchs as t2 on t1.player_id = t2.player_id where t2.winning_name = \"australia open\" intersect select t1.country_code, t1.winning_name from players as t1 join matchs as t2 on t1.player_id = t2.player_id where t2.winning_year = \"tournament\"",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'wta championships' intersect select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'australian open'",
        "db_id": "wta_1"
      },
      {
        "index": 452,
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "predicted": "select t2.first_name, t2.country_code from ratings as t1 join players as t2 on t1.player_id = t2.player_id where t1.rank = \"wta championship\" intersect select t2.first_name, t1.country_code from ratings as t1 join matches as t2 on t1.winning_id = t2.winning_id where t1.name = \"australia open\"",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'wta championships' intersect select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'australian open'",
        "db_id": "wta_1"
      },
      {
        "index": 459,
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "predicted": "select t2.first_name, t2.country_code from ratings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 460,
        "question": "What is the first name and country code of the player with the most tours?",
        "predicted": "select t2.first_name, t2.country_code from performances as t1 join player as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 463,
        "question": "Find the name and rank points of the winner who won the most times.",
        "predicted": "select t2.name, t2.rank_points from rankings as t1 join match as t2 on t1.tournament_id = t2.winner_id group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name ,  winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 464,
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "predicted": "select t2.winning_name, count(*) from rankings as t1 join team as t2 on t1.team_id = t2.team_id group by t1.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name ,  winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 465,
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "predicted": "select t2.winning_name from rankings as t1 join match as t2 on t1.winning_id = t2.winning_id where t1.country = \"australia open open\" group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 466,
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "predicted": "select t2.winning_name from rankings as t1 join results as t2 on t1.winning_id = t2.winning_id where t1.country = \"australia open open\" group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 467,
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "predicted": "select t2.winning_name, t2.winning_name from matches as t1 join players as t2 on t1.match_id = t2.match_id group by t2.winning_r order by sum(t1.minutes) desc limit 1",
        "gold": "select winner_name ,  loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 469,
        "question": "Find the average ranking for each player and their first name.",
        "predicted": "select avg(t1.ranking_points), t2.first_name from ratings as t1 join players as t2 on t1.player_id = t2.player_id group by t2.name",
        "gold": "select avg(ranking) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 470,
        "question": "What are the first names of all players, and their average rankings?",
        "predicted": "select t2.first_name, t2.last_name, avg(t1.ranking_points) from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "gold": "select avg(ranking) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 471,
        "question": "Find the total ranking points for each player and their first name.",
        "predicted": "select t1.ranking_points, t2.first_name from rankings as t1 join players as t2 on t1.player_id = t2.player_id",
        "gold": "select sum(ranking_points) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 472,
        "question": "What are the first names of all players, and their total ranking points?",
        "predicted": "select t2.first_name, t2.ranked_points from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "gold": "select sum(ranking_points) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 483,
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "predicted": "select t2.winning_name, t2.rank from matches as t1 join players as t2 on t1.player_id = t2.player_id order by t1.age limit 3",
        "gold": "select distinct winner_name ,  winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1"
      },
      {
        "index": 484,
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "predicted": "select t2.winner_name, t2.rank from matches as t1 join rankings as t2 on t1.winning_id = t2.winning_id order by t1.age limit 3",
        "gold": "select distinct winner_name ,  winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1"
      },
      {
        "index": 487,
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "predicted": "select t2.first_name, t1.country_code, t2.birth_name from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select t1.first_name ,  t1.country_code ,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 488,
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "predicted": "select t2.first_name, t1.country_code, t2.birthday from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.first_name ,  t1.country_code ,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 497,
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "predicted": "select name, t1.result from battle as t1 join commander as t2 on t1.armed = t2.armed where t2.kompetition!= 'boril'",
        "gold": "select name ,  result from battle where bulgarian_commander != 'boril'",
        "db_id": "battle_death"
      },
      {
        "index": 498,
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "predicted": "select distinct t1.id, t2.name from ship as t1 join death as t2 on t1.id = t2.ship_id where t1.type = 'brig'",
        "gold": "select distinct t1.id ,  t1.name from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.ship_type  =  'brig'",
        "db_id": "battle_death"
      },
      {
        "index": 499,
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "predicted": "select t1.id, t2.name from death as t1 join ship as t2 on t1.ship_id = t2.id group by t1.ship_id having count(*) > 10",
        "gold": "select t1.id ,  t1.name from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle join death as t3 on t2.id  =  t3.caused_by_ship_id group by t1.id having sum(t3.killed)  >  10",
        "db_id": "battle_death"
      },
      {
        "index": 500,
        "question": "What is the ship id and name that caused most total injuries?",
        "predicted": "select t1.ship_id, t1.name from ship as t1 join death as t2 on t1.ship_id = t2.ship_id group by t2.ship_id order by sum(t2.injury) desc limit 1",
        "gold": "select t2.id ,  t2.name from death as t1 join ship as t2 on t1.caused_by_ship_id  =  t2.id group by t2.id order by count(*) desc limit 1",
        "db_id": "battle_death"
      },
      {
        "index": 501,
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "predicted": "select distinct t2.name from rank as t1 join battle as t2 on t1.film_id = t2.baldwin i'",
        "gold": "select name from battle where bulgarian_commander  =  'kaloyan' and latin_commander  =  'baldwin i'",
        "db_id": "battle_death"
      },
      {
        "index": 504,
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "predicted": "select t2.name, t2.date from ship as t1 join death as t2 on t1.id = t2.ship_id join ship as t3 on t2.ship_id = t3.id where t1.name = 'lettice' and t2.name = 'hms atalanta'",
        "gold": "select t1.name ,  t1.date from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.name  =  'lettice' intersect select t1.name ,  t1.date from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.name  =  'hms atalanta'",
        "db_id": "battle_death"
      },
      {
        "index": 505,
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "predicted": "select name, results, bulgarian commander from battle where ship_id not in (select ship_id from death where location = 'english channel')",
        "gold": "select name ,  result ,  bulgarian_commander from battle except select t1.name ,  t1.result ,  t1.bulgarian_commander from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.location  =  'english channel'",
        "db_id": "battle_death"
      },
      {
        "index": 516,
        "question": "What is the name and id of the department with the most number of degrees ?",
        "predicted": "select dept_name, dept_id from degrees group by dept_name order by count(*) desc limit 1",
        "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 521,
        "question": "How many degrees does the engineering department offer?",
        "predicted": "select count(*) from departments as t1 join degrees as t2 on t1.dept_name = t2.dept_name where dept_name = \"engineer\"",
        "gold": "select count(*) from departments as t1 join degree_programs as t2 on t1.department_id  =  t2.department_id where t1.department_name  =  'engineer'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 522,
        "question": "How many degrees does the engineering department have?",
        "predicted": "select count(*) from departments as t1 join degrees as t2 on t1.dept_name = t2.dept_name where dept_name = \"engineer\"",
        "gold": "select count(*) from departments as t1 join degree_programs as t2 on t1.department_id  =  t2.department_id where t1.department_name  =  'engineer'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 529,
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "predicted": "select semester_name, semester_id from student_enrolment group by semester_id order by count(*) desc limit 1",
        "gold": "select t1.semester_name ,  t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id  =  t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 530,
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "predicted": "select t2.semester_name, t1.semester_id from student_enrolment as t1 join semesters as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "gold": "select t1.semester_name ,  t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id  =  t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 535,
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t2.degree_code = 'boston red stockings'",
        "gold": "select distinct t1.first_name ,  t1.middle_name ,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id join degree_programs as t3 on t2.degree_program_id  =  t3.degree_program_id where t3.degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 536,
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t2.student_id = 'boston red stockings'",
        "gold": "select distinct t1.first_name ,  t1.middle_name ,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id join degree_programs as t3 on t2.degree_program_id  =  t3.degree_program_id where t3.degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 545,
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "predicted": "select t1.course_name from courses as t1 join student_course_enrolment as t2 on t1.course_id = t2.course_id",
        "gold": "select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 546,
        "question": "What are the names of all courses that have some students enrolled?",
        "predicted": "select t1.course_name from courses as t1 join student_enrolment as t2 on t1.course_id = t2.course_id",
        "gold": "select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 547,
        "question": "What's the name of the course with most number of enrollments?",
        "predicted": "select t1.course_name from courses as t1 join student_enrolment as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "gold": "select  t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 548,
        "question": "What is the name of the course with the most students enrolled?",
        "predicted": "select t1.course_name from courses as t1 join student_enrolment as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "gold": "select  t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 549,
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "predicted": "select t1.last_name from students as t1 join student_enrolment as t2 on t1.address_id = t2.address_id where t2.state_province_county = \"north carolina\" except select t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id",
        "gold": "select t1.last_name from students as t1 join addresses as t2 on t1.current_address_id  =  t2.address_id where t2.state_province_county  =  'northcarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id  =  t4.student_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 550,
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "predicted": "select t1.last_name from students as t1 join student_enrolment as t2 on t1.address_id = t2.address_id where t1.state_province_county = \"north carolina\" except select t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id",
        "gold": "select t1.last_name from students as t1 join addresses as t2 on t1.current_address_id  =  t2.address_id where t2.state_province_county  =  'northcarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id  =  t4.student_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 551,
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_enrolment as t2 on t1.cript_id = t2.course_id group by t1.cript_id having count(*) >= 2",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id having count(*)  >=  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 552,
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_course_contents as t2 on t1.cript_id = t2.cript_id group by t1.cript_id having count(*) >= 2",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id having count(*)  >=  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 554,
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "predicted": "select t2.mobile_number from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t1.first_name = \"tilmothy ward\"",
        "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 555,
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_first_registered asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 556,
        "question": "What is the first, middle, and last name of the first student to register?",
        "predicted": "select t2.first_name, t2.middle_name, t2.last_name from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id order by t1.date_registration_date asc limit 1",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_first_registered asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 557,
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id order by t2.date_undergraduated limit 1",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_left asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 560,
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "predicted": "select t1.first_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id",
        "gold": "select first_name from students where current_address_id != permanent_address_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 561,
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "predicted": "select t1.address_id, t1.line_1 from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.address_id group by t1.address_id order by count(*) desc limit 1",
        "gold": "select t1.address_id ,  t1.line_1 ,  t1.line_2 from addresses as t1 join students as t2 on t1.address_id  =  t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 562,
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "predicted": "select t1.address_id, t1.line_1, t1.line_2 from addresses as t1 join student_enrolments as t2 on t1.address_id = t2.address_id group by t1.address_id order by count(*) desc limit 1",
        "gold": "select t1.address_id ,  t1.line_1 ,  t1.line_2 from addresses as t1 join students as t2 on t1.address_id  =  t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 565,
        "question": "When is the first transcript released? List the date and details.",
        "predicted": "select t1.date, t1.other_details from transcripts as t1 join student_enrolment as t2 on t1.journal_id = t2.journal_id order by t1.date asc limit 1",
        "gold": "select transcript_date ,  other_details from transcripts order by transcript_date asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 566,
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "predicted": "select t1.date, t1.other_details from transcripts as t1 join transcript_contents as t2 on t1.cript_id = t2.transaction_id order by t1.date asc limit 1",
        "gold": "select transcript_date ,  other_details from transcripts order by transcript_date asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 569,
        "question": "What is the last transcript release date?",
        "predicted": "select t1.transaction_date from transcripts as t1 join transcript_contents as t2 on t1.transaction_id = t2.transaction_id",
        "gold": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 572,
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "predicted": "select t1.student_course_id, count(*) from student_course_enrolment as t1 join student_enrolment as t2 on t1.student_course_id = t2.course_id group by t1.course_id order by count(*) desc limit 1",
        "gold": "select count(*) ,  student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 573,
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_contents as t2 on t1.cript_id = t2.cript_id group by t1.cript_id order by count(*) asc limit 1",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 574,
        "question": "What is the date and id of the transcript with the least number of results?",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_enrolment as t2 on t1.cript_id = t2.course_id group by t1.cript_id order by count(*) asc limit 1",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 575,
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "predicted": "select semester from student_enrolment where student_id = 'm' intersect select semester from student_enrolment where student_id = 'birth'",
        "gold": "select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 576,
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "predicted": "select semester_id from student_enrolment where student_id = 'm' intersect select semester_id from student_enrolment where student_id = 'birth'",
        "gold": "select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 578,
        "question": "What are the different addresses that have students living there?",
        "predicted": "select distinct t1.address_id from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.address_id",
        "gold": "select count(distinct current_address_id) from students",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 583,
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "predicted": "select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t2.country = \"hafghanistan\" union select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t2.country = \"hapan\" and t1.number = \"09700166842\"",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 584,
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "predicted": "select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t1.country = \"hapanese\" union select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t2.city = \"09700\"",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 597,
        "question": "List the number of different series names and contents in the TV Channel table.",
        "predicted": "select count(distinct t1.series_name), count(distinct t1.contents) from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.title = \"tv channel\"",
        "gold": "select count(distinct series_name) ,  count(distinct content) from tv_channel;",
        "db_id": "tvshow"
      },
      {
        "index": 598,
        "question": "How many different series and contents are listed in the TV Channel table?",
        "predicted": "select count(distinct t1.series_name), count(distinct t1.contents) from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.title = \"tv channel\"",
        "gold": "select count(distinct series_name) ,  count(distinct content) from tv_channel;",
        "db_id": "tvshow"
      },
      {
        "index": 602,
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "predicted": "select t1.paket_option from t1.paket_option as t1 join t1.channel as t2 on t1.id = t2.channel_id join series as t3 on t1.series_id = t3.id where t3.series_name = \"c sky radio\"",
        "gold": "select package_option from tv_channel where series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 609,
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "predicted": "select t2.series_name from cartoon as t1 join t1.series as t2 on t1.id = t2.series_id join tv_channel as t3 on t1.id = t3.channel_id where t1.title = \"the rise of the blue beetle\"",
        "gold": "select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"the rise of the blue beetle!\";",
        "db_id": "tvshow"
      },
      {
        "index": 610,
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "predicted": "select t1.series_name from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id join cartoon as t3 on t2.characteristic_id = t3.id where t3.title = \"the rise of the blue beetle\"",
        "gold": "select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"the rise of the blue beetle!\";",
        "db_id": "tvshow"
      },
      {
        "index": 611,
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "predicted": "select t1.title from cartoon as t1 join t1.characteristic as t2 on t1.id = t2.characteristic_id join series as t3 on t2.series_id = t3.id where t3.series_name = \"sky radio\"",
        "gold": "select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 612,
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "predicted": "select t3.title from television as t1 join t1.series as t2 on t1.id = t2.station_id join cartoon as t3 on t1.series_id = t3.id where t1.series_name = \"ttv channel\" and t1.series_name = \"sky radio\"",
        "gold": "select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 616,
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "predicted": "select having count(*), t1.rating from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id where t2.title = \"tv series\" group by t1.id order by count(*) desc limit 3",
        "gold": "select episode ,  rating from tv_series order by rating desc limit 3;",
        "db_id": "tvshow"
      },
      {
        "index": 619,
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "predicted": "select t2.airport_date from tv_series as t1 join series as t2 on t1.series_id = t2.id where t1.title = \"a love of a lifetime\"",
        "gold": "select air_date from tv_series where episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 623,
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "predicted": "select t2.platform_name from episodes as t1 join tv_channel as t2 on t1.id = t2.tv_channel_id where t1.title = \"a love of a lifetime\"",
        "gold": "select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 624,
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "predicted": "select t2.series_name from episode as t1 join series as t2 on t1.series_id = t2.id where t1.title = \"a love of a lifetime\"",
        "gold": "select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 625,
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "predicted": "select t1.event from tv_series as t1 join t1.series as t2 on t1.id = t2.series_id join tv_series as t3 on t2.series_id = t3.id where t3.series_name = \"sky radio\"",
        "gold": "select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 626,
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "predicted": "select t1.event from t1.event as t1 join series as t2 on t1.series_id = t2.id where t2.title = \"sky radio\"",
        "gold": "select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 631,
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "predicted": "select t1.paket_name, t1.series_name from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.channel = \"tv\" group by t2.channel order by count(*) desc limit 1",
        "gold": "select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\"",
        "db_id": "tvshow"
      },
      {
        "index": 632,
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "predicted": "select t1.paket_name, t1.series_name from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id join tv as t3 on t2.tv_channel = t3.id where t3.channel = \"tv channel\" order by high_definition desc limit 1",
        "gold": "select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\"",
        "db_id": "tvshow"
      },
      {
        "index": 633,
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "predicted": "select t1.country from t1.country as t1 join t1.country as t2 on t1.id = t2.country_id join cartoon as t3 on t2.artist_id = t3.id where t3.directed_by = \" todd casey\"",
        "gold": "select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey'",
        "db_id": "tvshow"
      },
      {
        "index": 635,
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "predicted": "select country from t1.country where id not in (select country from cartoon where written_by = \"t todd casey\")",
        "gold": "select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey'",
        "db_id": "tvshow"
      },
      {
        "index": 637,
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "predicted": "select t2.series_name, t2.country from t1.channel as t1 join t1.series as t2 on t1.id = t2.channel_id join cartoon as t3 on t1.series_id = t3.id where t3.directed_by = \"billy jones\" intersect select t2.series_name, t1.country from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel where t3.directed_by = \"michael chang\"",
        "gold": "select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'michael chang' intersect select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 638,
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "predicted": "select t2.series_name, t2.country from t1.channel as t1 join t1.series as t2 on t1.id = t2.channel_id join cartoon as t3 on t1.series_id = t3.id where t3.directed_by = t2.by t3.directed_by = t1.id join channel as t4 on t3.channel_id = t4.id where t4.directed_by = 'beijing chang'",
        "gold": "select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'michael chang' intersect select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 641,
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "predicted": "select t1.id from t1.country as t1 join t1.country as t2 on t1.id = t2.country group by t2.country having count(*) > 2",
        "gold": "select id from tv_channel group by country having count(*)  >  2",
        "db_id": "tvshow"
      },
      {
        "index": 645,
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "predicted": "select t1.paket_option from t1.channel except select t1.paket_option from t1.channel as t1 join t2.channel_id from t1.channel_id as t2 on t1.id = t2.channel_id join cartoon as t3 on t2.characteristic_id = t3.id where t3.directed_by = \"benn jones\"",
        "gold": "select package_option from tv_channel where id not in (select channel from cartoon where directed_by  =  'ben jones')",
        "db_id": "tvshow"
      },
      {
        "index": 646,
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "predicted": "select distinct channel from t1.channel except select t1.paket_option from t1.channel as t1 join t2.channel as t2 on t1.id = t2.channel_id join cartoon as t3 on t2.characteristic_id = t3.id where t3.directed_by = \"benn jones\"",
        "gold": "select package_option from tv_channel where id not in (select channel from cartoon where directed_by  =  'ben jones')",
        "db_id": "tvshow"
      },
      {
        "index": 650,
        "question": "What are the earnings of poker players, ordered descending by value?",
        "predicted": "select t1.money from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.professor desc",
        "gold": "select earnings from poker_player order by earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 651,
        "question": "List the final tables made and the best finishes of poker players.",
        "predicted": "select t1.lat_table_made, t1.date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.best_score desc limit 1",
        "gold": "select final_table_made ,  best_finish from poker_player",
        "db_id": "poker_player"
      },
      {
        "index": 652,
        "question": "What are the final tables made and best finishes for all poker players?",
        "predicted": "select t1.lat_table_made, t2.max(t2.money_date) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "gold": "select final_table_made ,  best_finish from poker_player",
        "db_id": "poker_player"
      },
      {
        "index": 655,
        "question": "What is the money rank of the poker player with the highest earnings?",
        "predicted": "select t1.money_ranking from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc limit 1",
        "gold": "select money_rank from poker_player order by earnings desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 657,
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "predicted": "select max(t1.lat_table_made) from poker_player as t1 join people as t2 on t1.phone_id = t2.people_id where t1.money  200000",
        "gold": "select max(final_table_made) from poker_player where earnings  <  200000",
        "db_id": "poker_player"
      },
      {
        "index": 658,
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "predicted": "select max(t1.lat_table_made) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.assets  200000",
        "gold": "select max(final_table_made) from poker_player where earnings  <  200000",
        "db_id": "poker_player"
      },
      {
        "index": 659,
        "question": "What are the names of poker players?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id",
        "db_id": "poker_player"
      },
      {
        "index": 660,
        "question": "Return the names of all the poker players.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id",
        "db_id": "poker_player"
      },
      {
        "index": 661,
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.money > 300000",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t2.earnings  >  300000",
        "db_id": "poker_player"
      },
      {
        "index": 662,
        "question": "Give the names of poker players who have earnings above 300000.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.money > 300000",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t2.earnings  >  300000",
        "db_id": "poker_player"
      },
      {
        "index": 663,
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.date asc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.final_table_made",
        "db_id": "poker_player"
      },
      {
        "index": 664,
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.date asc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.final_table_made",
        "db_id": "poker_player"
      },
      {
        "index": 665,
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "predicted": "select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc limit 1",
        "gold": "select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings asc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 666,
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "predicted": "select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money asc limit 1",
        "gold": "select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings asc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 667,
        "question": "What is the money rank of the tallest poker player?",
        "predicted": "select t1.money_ranking from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "gold": "select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t1.height desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 668,
        "question": "Return the money rank of the poker player with the greatest height.",
        "predicted": "select t1.money_rank from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "gold": "select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t1.height desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 669,
        "question": "What is the average earnings of poker players with height higher than 200?",
        "predicted": "select avg(t1.money) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200",
        "gold": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t1.height  >  200",
        "db_id": "poker_player"
      },
      {
        "index": 670,
        "question": "Give average earnings of poker players who are taller than 200.",
        "predicted": "select avg(t1.money) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200",
        "gold": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t1.height  >  200",
        "db_id": "poker_player"
      },
      {
        "index": 671,
        "question": "What are the names of poker players in descending order of earnings?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.profits desc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 672,
        "question": "Return the names of poker players sorted by their earnings descending.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 691,
        "question": "What is last date created of votes from the state 'CA'?",
        "predicted": "select t1.latin_date from votes as t1 join state as t2 on t1.state = t2.district where t2.state = \"ca\"",
        "gold": "select max(created) from votes where state  =  'ca'",
        "db_id": "voter_1"
      },
      {
        "index": 693,
        "question": "What are the distinct states and create time of all votes?",
        "predicted": "select distinct t1.state, t1.created from state as t1 join votes as t2 on t1.state = t2.state",
        "gold": "select distinct state ,  created from votes",
        "db_id": "voter_1"
      },
      {
        "index": 694,
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "predicted": "select t2.advisor_number, t1.name from votes as t1 join contestants as t2 on t1.country_tony = t2.country group by t1.country_number having count(*) >= 2",
        "gold": "select t1.contestant_number , t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number group by t1.contestant_number having count(*)  >=  2",
        "db_id": "voter_1"
      },
      {
        "index": 695,
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "predicted": "select t2.advisor, t2.name from votes as t1 join contestants as t2 on t1.tony = t2.tony_number group by t2.tony_number order by count(*) asc limit 1",
        "gold": "select t1.contestant_number , t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number group by t1.contestant_number order by count(*) asc limit 1",
        "db_id": "voter_1"
      },
      {
        "index": 699,
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "predicted": "select t1.date, t1.state, t1.phone_number from votes as t1 join contestants as t2 on t1.vote = t2.vote_id where t2.name = 'tabatha gehling'",
        "gold": "select t2.created ,  t2.state ,  t2.phone_number from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number where t1.contestant_name  =  'tabatha gehling'",
        "db_id": "voter_1"
      },
      {
        "index": 700,
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "predicted": "select t1.area_code from areas as t1 join votes as t2 on t1.area_code = t2.area_code join contestants as t3 on t1.country_id = t3.country where t3.title = 'tabatha' and t2.affirmation = 'kelly clauss'",
        "gold": "select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number join area_code_state as t3 on t2.state  =  t3.state where t1.contestant_name  =  'tabatha gehling' intersect select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number join area_code_state as t3 on t2.state  =  t3.state where t1.contestant_name  =  'kelly clauss'",
        "db_id": "voter_1"
      },
      {
        "index": 707,
        "question": "How much surface area do the countires in the Carribean cover together?",
        "predicted": "select count(*) from country as t1 join sqlite_area as t2 on t1.id = t2.country_code where t1.name = \"carribean\"",
        "gold": "select sum(surfacearea) from country where region  =  \"caribbean\"",
        "db_id": "world_1"
      },
      {
        "index": 709,
        "question": "What is the continent name which Anguilla belongs to?",
        "predicted": "select t1.continent from country as t1 join country as t2 on t1.country_code = t2.country where t2.name = \"anguilla\"",
        "gold": "select continent from country where name  =  \"anguilla\"",
        "db_id": "world_1"
      },
      {
        "index": 710,
        "question": "Which region is the city Kabul located in?",
        "predicted": "select t1.area from country as t1 join country as t2 on t1.country_code = t2.country where t2.name = \"kayaking\"",
        "gold": "select region from country as t1 join city as t2 on t1.code  =  t2.countrycode where t2.name  =  \"kabul\"",
        "db_id": "world_1"
      },
      {
        "index": 711,
        "question": "What region is Kabul in?",
        "predicted": "select region from country where city = \"bangul\"",
        "gold": "select region from country as t1 join city as t2 on t1.code  =  t2.countrycode where t2.name  =  \"kabul\"",
        "db_id": "world_1"
      },
      {
        "index": 712,
        "question": "Which language is the most popular in Aruba?",
        "predicted": "select language from country_language where country_name = \"aruba\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 713,
        "question": "What language is predominantly spoken in Aruba?",
        "predicted": "select language from country_language where country_name = \"aruba\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 717,
        "question": "What region does Angola belong to and what is its population?",
        "predicted": "select t1.region, t1.population from country as t1 join country as t2 on t1.country_code = t2.country_code where t2.name = \"angola\"",
        "gold": "select population ,  region from country where name  =  \"angola\"",
        "db_id": "world_1"
      },
      {
        "index": 718,
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.region_code = \"central africa\"",
        "gold": "select avg(lifeexpectancy) from country where region  =  \"central africa\"",
        "db_id": "world_1"
      },
      {
        "index": 719,
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country = \"central africa\"",
        "gold": "select avg(lifeexpectancy) from country where region  =  \"central africa\"",
        "db_id": "world_1"
      },
      {
        "index": 722,
        "question": "What is the total population and maximum GNP in Asia?",
        "predicted": "select sum(population), max(gnp) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"aspan\"",
        "gold": "select sum(population) ,  max(gnp) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 723,
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "predicted": "select count(*), country_code from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"aspan\" group by t1.country_code order by count(*) desc limit 1",
        "gold": "select sum(population) ,  max(gnp) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 724,
        "question": "What is the average life expectancy in African countries that are republics?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"africa\"",
        "gold": "select avg(lifeexpectancy) from country where continent  =  \"africa\" and governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 725,
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country = \"africa\"",
        "gold": "select avg(lifeexpectancy) from country where continent  =  \"africa\" and governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 726,
        "question": "What is the total surface area of the continents Asia and Europe?",
        "predicted": "select sum(surface_area) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"asia\" intersect select sum(t1.surface_area) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"europea\"",
        "gold": "select sum(surfacearea) from country where continent  =  \"asia\" or continent  =  \"europe\"",
        "db_id": "world_1"
      },
      {
        "index": 727,
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "predicted": "select sum(surface_area) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"aspan\" or t1.country_code = \"europea\"",
        "gold": "select sum(surfacearea) from country where continent  =  \"asia\" or continent  =  \"europe\"",
        "db_id": "world_1"
      },
      {
        "index": 728,
        "question": "How many people live in Gelderland district?",
        "predicted": "select count(*) from city as t1 join city as t2 on t1.city_code = t2.id where t1.district = \"monerland\"",
        "gold": "select sum(population) from city where district  =  \"gelderland\"",
        "db_id": "world_1"
      },
      {
        "index": 730,
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "predicted": "select avg(t1.gnp), sum(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.governor = \"united states\"",
        "gold": "select avg(gnp) ,  sum(population) from country where governmentform  =  \"us territory\"",
        "db_id": "world_1"
      },
      {
        "index": 731,
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "predicted": "select avg(t1.gnp), sum(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country_code = \"united states\"",
        "gold": "select avg(gnp) ,  sum(population) from country where governmentform  =  \"us territory\"",
        "db_id": "world_1"
      },
      {
        "index": 734,
        "question": "How many type of governments are in Africa?",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"africa\"",
        "gold": "select count(distinct governmentform) from country where continent  =  \"africa\"",
        "db_id": "world_1"
      },
      {
        "index": 735,
        "question": "How many different forms of governments are there in Africa?",
        "predicted": "select count(distinct government_form) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country = \"africa\"",
        "gold": "select count(distinct governmentform) from country where continent  =  \"africa\"",
        "db_id": "world_1"
      },
      {
        "index": 736,
        "question": "What is the total number of languages used in Aruba?",
        "predicted": "select count(*) from country as t1 join country_language as t2 on t1.country_code = t2.country where t1.country = \"aruba\"",
        "gold": "select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\"",
        "db_id": "world_1"
      },
      {
        "index": 737,
        "question": "How many languages are spoken in Aruba?",
        "predicted": "select count(*) from country_language where country = \"aruba\"",
        "gold": "select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\"",
        "db_id": "world_1"
      },
      {
        "index": 738,
        "question": "How many official languages does Afghanistan have?",
        "predicted": "select count(*) from country_language where country = \"afghanistan\"",
        "gold": "select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"afghanistan\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 739,
        "question": "How many official languages are spoken in Afghanistan?",
        "predicted": "select count(*) from country_language where country = \"afghanistan\"",
        "gold": "select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"afghanistan\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 740,
        "question": "What is name of the country that speaks the largest number of languages?",
        "predicted": "select t1.country_name from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code order by count(*) desc limit 1",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 741,
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 742,
        "question": "Which continent has the most diverse languages?",
        "predicted": "select t1.country from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country order by count(*) desc limit 1",
        "gold": "select t1.continent from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 743,
        "question": "Which continent speaks the most languages?",
        "predicted": "select t1.country from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code order by count(*) desc limit 1",
        "gold": "select t1.continent from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 744,
        "question": "How many countries speak both English and Dutch?",
        "predicted": "select count(*) from country where languages = \"english\" intersect select count(*) from country where languages = \"english\"",
        "gold": "select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\")",
        "db_id": "world_1"
      },
      {
        "index": 745,
        "question": "What is the number of nations that use English and Dutch?",
        "predicted": "select count(*) from country where languages = \"english\" intersect select count(*) from country where languages = \"english\"",
        "gold": "select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\")",
        "db_id": "world_1"
      },
      {
        "index": 746,
        "question": "What are the names of nations speak both English and French?",
        "predicted": "select name from country where language = \"english\" intersect select name from country where language = \"franchise\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\"",
        "db_id": "world_1"
      },
      {
        "index": 747,
        "question": "Give the names of nations that speak both English and French.",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" intersect select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country_code where t2.language = \"english\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\"",
        "db_id": "world_1"
      },
      {
        "index": 748,
        "question": "What are the names of nations where both English and French are official languages?",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" intersect select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country_code where t2.language = \"france\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 749,
        "question": "Give the names of countries with English and French as official languages.",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" intersect select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country_code where t2.official_population = \"franchise\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 750,
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "predicted": "select count(distinct continent) from country where language = \"chinese\"",
        "gold": "select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"chinese\"",
        "db_id": "world_1"
      },
      {
        "index": 751,
        "question": "How many continents speak Chinese?",
        "predicted": "select count(*) from country where language = \"chinese\"",
        "gold": "select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"chinese\"",
        "db_id": "world_1"
      },
      {
        "index": 752,
        "question": "What are the regions that use English or Dutch?",
        "predicted": "select region from country where languages = \"english\" or languages = \"english\"",
        "gold": "select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" or t2.language  =  \"dutch\"",
        "db_id": "world_1"
      },
      {
        "index": 753,
        "question": "Which regions speak Dutch or English?",
        "predicted": "select region from country where language = \"english\" or language = \"english\"",
        "gold": "select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" or t2.language  =  \"dutch\"",
        "db_id": "world_1"
      },
      {
        "index": 754,
        "question": "What are the countries where either English or Dutch is the official language ?",
        "predicted": "select country from country where languages = \"english\" or languages = \"native\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 755,
        "question": "Which countries have either English or Dutch as an official language?",
        "predicted": "select t1.country from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" or t2.language = \"native\"",
        "gold": "select * from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select * from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 756,
        "question": "Which language is the most popular on the Asian continent?",
        "predicted": "select language from country where t1.country = \"asian\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  \"asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 757,
        "question": "What is the language that is used by the largest number of Asian nations?",
        "predicted": "select language from country_language where country_name = \"asian\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  \"asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 758,
        "question": "Which languages are spoken by only one country in republic governments?",
        "predicted": "select language from country_language group by language having count(*) = 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.governmentform  =  \"republic\" group by t2.language having count(*)  =  1",
        "db_id": "world_1"
      },
      {
        "index": 759,
        "question": "What languages are only used by a single country with a republic government?",
        "predicted": "select language from country where state = \"japan\" group by language",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.governmentform  =  \"republic\" group by t2.language having count(*)  =  1",
        "db_id": "world_1"
      },
      {
        "index": 760,
        "question": "Find the city with the largest population that uses English.",
        "predicted": "select city from city where country_code = \"english\" group by city_code order by population desc limit 1",
        "gold": "select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 761,
        "question": "What is the most populace city that speaks English?",
        "predicted": "select city from city where country_code = \"english\" group by city order by count(*) desc limit 1",
        "gold": "select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 764,
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "predicted": "select avg(life_attendance) from country where country!= \"english\"",
        "gold": "select avg(lifeexpectancy) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\")",
        "db_id": "world_1"
      },
      {
        "index": 765,
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "predicted": "select avg(life_attendance) from country where country!= \"english\"",
        "gold": "select avg(lifeexpectancy) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\")",
        "db_id": "world_1"
      },
      {
        "index": 766,
        "question": "What is the total number of people living in the nations that do not use English?",
        "predicted": "select count(*) from country where country_code not in (select country_code from country where languages = \"english\")",
        "gold": "select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\")",
        "db_id": "world_1"
      },
      {
        "index": 767,
        "question": "How many people live in countries that do not speak English?",
        "predicted": "select count(*) from country where country_code not in (select country_code from country where languages = \"english\")",
        "gold": "select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\")",
        "db_id": "world_1"
      },
      {
        "index": 768,
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "predicted": "select t1.official_female from country_language as t1 join country as t2 on t1.country_code = t2.country where t2.heightrix\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.headofstate  =  \"beatrix\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 769,
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "predicted": "select t1.official_female from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.heightrix\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.headofstate  =  \"beatrix\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 770,
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "predicted": "select count(distinct t1.official_percentage) from country as t1 join country_language as t2 on t1.country_code = t2.country where t1.year  1930",
        "gold": "select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where  indepyear  <  1930 and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 771,
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "predicted": "select count(distinct t1.official_population) from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.founded  1930",
        "gold": "select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where  indepyear  <  1930 and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 784,
        "question": "Which cities are in European countries where English is not the official language?",
        "predicted": "select city from city where country_code = \"european\" except select city from country_language where country = \"english\"",
        "gold": "select distinct t2.name from country as t1 join city as t2 on t2.countrycode  =  t1.code where t1.continent  =  'europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code  =  t4.countrycode where t4.isofficial  =  't' and t4.language  =  'english')",
        "db_id": "world_1"
      },
      {
        "index": 785,
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "predicted": "select name from city where country!= \"europea\"",
        "gold": "select distinct t2.name from country as t1 join city as t2 on t2.countrycode  =  t1.code where t1.continent  =  'europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code  =  t4.countrycode where t4.isofficial  =  't' and t4.language  =  'english')",
        "db_id": "world_1"
      },
      {
        "index": 786,
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "predicted": "select count(*) from city as t1 join country_language as t2 on t1.country_code = t2.country_code where t1.country_name = \"asian\" and t2.language = \"chinese\"",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 787,
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "predicted": "select distinct t1.name from city as t1 join country_language as t2 on t1.country_code = t2.country_code join country as t3 on t1.country_code = t3.id where t3.country = \"aspan\" intersect select distinct t1.name from city as t1 join country_language as t2 on t1.country_code = t2.country where t2.governor = \"chinese\"",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 789,
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "predicted": "select t1.name, t1.year, t1.surface_area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.population limit 1",
        "gold": "select name ,  surfacearea ,  indepyear from country order by population limit 1",
        "db_id": "world_1"
      },
      {
        "index": 790,
        "question": "What are the population, name and leader of the country with the largest area?",
        "predicted": "select t1.population, t1.name, t1.leader from country as t1 join country as t2 on t1.country_code = t2.country_code order by t2.area desc limit 1",
        "gold": "select name ,  population ,  headofstate from country order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 791,
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "predicted": "select t1.name, t1.population, t2.head_of_state from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.area desc limit 1",
        "gold": "select name ,  population ,  headofstate from country order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 792,
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "predicted": "select t1.country_name, count(*) from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code having count(*) >= 3",
        "gold": "select count(t2.language) ,  t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name having count(*)  >  2",
        "db_id": "world_1"
      },
      {
        "index": 793,
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "predicted": "select t1.name, count(*) from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code having count(*) > 2",
        "gold": "select count(t2.language) ,  t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name having count(*)  >  2",
        "db_id": "world_1"
      },
      {
        "index": 796,
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "predicted": "select t1.governor_name, sum(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country group by t1.governor_form having avg(t1.attendance) > 72",
        "gold": "select sum(population) ,  governmentform from country group by governmentform having avg(lifeexpectancy)  >  72",
        "db_id": "world_1"
      },
      {
        "index": 799,
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "predicted": "select continent, sum(t1.life expectancy), avg(t1.life expectancy) from country as t1 join country as t2 on t1.country_code = t2.country group by t1.country_code having avg(t1.life expectancy)  72",
        "gold": "select sum(population) ,  avg(lifeexpectancy) ,  continent from country group by continent having avg(lifeexpectancy)  <  72",
        "db_id": "world_1"
      },
      {
        "index": 800,
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "predicted": "select t1.name, t1.area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t2.area desc limit 5",
        "gold": "select name ,  surfacearea from country order by surfacearea desc limit 5",
        "db_id": "world_1"
      },
      {
        "index": 801,
        "question": "Return the names and surface areas of the 5 largest countries.",
        "predicted": "select t1.name, t1.region_area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.country_code desc limit 5",
        "gold": "select name ,  surfacearea from country order by surfacearea desc limit 5",
        "db_id": "world_1"
      },
      {
        "index": 805,
        "question": "Return the names of the 3 countries with the fewest people.",
        "predicted": "select t1.name from country as t1 join country as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 3",
        "gold": "select name from country order by population asc limit 3",
        "db_id": "world_1"
      },
      {
        "index": 806,
        "question": "how many countries are in Asia?",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"asia\"",
        "gold": "select count(*) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 807,
        "question": "Count the number of countries in Asia.",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"asia\"",
        "gold": "select count(*) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 810,
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "predicted": "select sum(t1.population), avg(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country_name = \"north america\" and t1.population > 3000",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "db_id": "world_1"
      },
      {
        "index": 811,
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "predicted": "select sum(t1.population), avg(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country_code where t2.country_area > 3000",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "db_id": "world_1"
      },
      {
        "index": 816,
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "predicted": "select t2.language from country_language as t1 join country as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 1",
        "gold": "select language ,  countrycode ,  max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 817,
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "predicted": "select t1.country_code, t2.language from country as t1 join languages as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 1",
        "gold": "select language ,  countrycode ,  max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 819,
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country where t1.language = \"spanish\"",
        "gold": "select count(*) ,   max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 839,
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "predicted": "select t2.name from conductor as t1 join conductor as t2 on t1.interaction_id = t2.interaction_id join performance as t3 on t1.performance_id = t3.performance_id group by t1.name order by count(*) desc limit 1",
        "gold": "select name from conductor order by year_of_work desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 840,
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "predicted": "select t1.name, t2.name from conductor as t1 join orchestra as t2 on t1.order_id = t2.order_id join performance as t3 on t1.performance_id = t3.performance_id",
        "gold": "select t1.name ,  t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id",
        "db_id": "orchestra"
      },
      {
        "index": 841,
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "predicted": "select t1.name, t2.name from conductor as t1 join orchestra as t2 on t1.order_id = t2.order_id join performance as t3 on t1.performance_id = t3.performance_id",
        "gold": "select t1.name ,  t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id",
        "db_id": "orchestra"
      },
      {
        "index": 842,
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "predicted": "select t1.name from conductor as t1 join performance as t2 on t1.of_or_id = t2.of_id join orchestra as t3 on t1.orchester_id = t3.orchester_id group by t1.name having count(*) > 1",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id having count(*)  >  1",
        "db_id": "orchestra"
      },
      {
        "index": 843,
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "predicted": "select t1.name from conductor as t1 join performance as t2 on t1.other_id = t2.of_id join orchestra as t3 on t1.orchester_id = t3.orchester_id group by t1.name having count(*) > 1",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id having count(*)  >  1",
        "db_id": "orchestra"
      },
      {
        "index": 844,
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "predicted": "select t1.name from conductor as t1 join performance as t2 on t1.order_id = t2.order_id join orchestra as t3 on t1.order_id = t3.order_id group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 845,
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "predicted": "select t1.name from conductor as t1 join performance as t2 on t1.order = t2.order_id join orchestra as t3 on t1.order_id = t3.order_id group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 846,
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "predicted": "select t2.name from orchestra as t1 join conductor as t2 on t1.order = t2.order_id join performance as t3 on t1.performance_id = t3.performance_id where t1.year > 2008",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id where year_of_founded  >  2008",
        "db_id": "orchestra"
      },
      {
        "index": 847,
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "predicted": "select t2.name from orchestra as t1 join conductor as t2 on t1.order_id = t2.order_id join performance as t3 on t1.order_id = t3.order_id where t1.year > 2008",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id where year_of_founded  >  2008",
        "db_id": "orchestra"
      },
      {
        "index": 849,
        "question": "How many orchestras does each record company manage?",
        "predicted": "select t1.record_company, count(*) from orchestra as t1 join performance as t2 on t1.order_id = t2.order_id group by t1.record_company",
        "gold": "select record_company ,  count(*) from orchestra group by record_company",
        "db_id": "orchestra"
      },
      {
        "index": 864,
        "question": "Show the names and grades of each high schooler.",
        "predicted": "select t2.name, t2.grade from high_schooler as t1 join school as t2 on t1.schooler_id = t2.id",
        "gold": "select name ,  grade from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 873,
        "question": "What is Kyle's id?",
        "predicted": "select kyles.id from home_school as t1 join student as t2 on t1.school_id = t2.id where t2.name = 'kerry'",
        "gold": "select id from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 882,
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "predicted": "select t1.id, count(*) from student as t1 join friend as t2 on t1.stuid = t2.stuid group by t1.id",
        "gold": "select student_id ,  count(*) from friend group by student_id",
        "db_id": "network_1"
      },
      {
        "index": 883,
        "question": "How many friends does each student have?",
        "predicted": "select count(t2.friend), t1.name from student as t1 join friend as t2 on t1.stuid = t2.stuid group by t1.name",
        "gold": "select student_id ,  count(*) from friend group by student_id",
        "db_id": "network_1"
      },
      {
        "index": 884,
        "question": "Show the names of high school students and their corresponding number of friends.",
        "predicted": "select t2.name, count(*) from college as t1 join friend as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 885,
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "predicted": "select t2.name, count(*) from friends as t1 join high_schooler as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 886,
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "predicted": "select t2.name from friends as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.high_schooler order by count(*) desc limit 1",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 887,
        "question": "Return the name of the high school student with the most friends.",
        "predicted": "select t2.name from friend as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.high_schooler order by count(*) desc limit 1",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 888,
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "predicted": "select t2.name from friend as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.high_schooler having count(*) >= 3",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  3",
        "db_id": "network_1"
      },
      {
        "index": 889,
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "predicted": "select t2.name from friends as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.high_schooler having count(*) >= 3",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  3",
        "db_id": "network_1"
      },
      {
        "index": 890,
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "predicted": "select t3.name from friend as t1 join lives as t2 on t1.stuid = t2.stuid join school as t3 on t3.id = t2.friend where t1.name = 'k kyle'",
        "gold": "select t3.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id join highschooler as t3 on t1.friend_id  =  t3.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 891,
        "question": "Return the names of friends of the high school student Kyle.",
        "predicted": "select t2.name from high_school as t1 join friend as t2 on t1.school_id = t2.id join student as t3 on t3.stuid = t2.stuid where t3.name = 'k kyle'",
        "gold": "select t3.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id join highschooler as t3 on t1.friend_id  =  t3.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 892,
        "question": "How many friends does the high school student Kyle have?",
        "predicted": "select count(t2.friend) from high_school as t1 join friend as t2 on t1.school_id = t2.id join student as t3 on t3.stuid = t2.stuid where t3.name = 'k kyle'",
        "gold": "select count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 893,
        "question": "Count the number of friends Kyle has.",
        "predicted": "select count(t2.friend) from friend as t1 join friend as t2 on t1.id = t2.friend where t1.name = 'kerry'",
        "gold": "select count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 896,
        "question": "Show names of all high school students who do not have any friends.",
        "predicted": "select name from high_schooler where id not in (select high_schooler from friend)",
        "gold": "select name from highschooler except select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 897,
        "question": "What are the names of students who have no friends?",
        "predicted": "select name from student where id not in (select stuid from friends)",
        "gold": "select name from highschooler except select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 898,
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "predicted": "select t1.id from high_schooler as t1 join likes as t2 on t1.id = t2.school_id join friend as t3 on t2.friend = t3.id where t3.friend = t2.name intersect select t1.id from high_schooler as t1 join people as t2 on t1.stuid = t2.stuid",
        "gold": "select student_id from friend intersect select liked_id from likes",
        "db_id": "network_1"
      },
      {
        "index": 899,
        "question": "What are the ids of students who both have friends and are liked?",
        "predicted": "select stuid from student as t1 join likes as t2 on t1.stuid = t2.stuid where t2.friend = t2.friend except select stuid from likes as t1 join friend as t2 on t1.stuid = t2.stuid",
        "gold": "select student_id from friend intersect select liked_id from likes",
        "db_id": "network_1"
      },
      {
        "index": 900,
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.stuid = t2.stuid join friend as t3 on t3.stuid = t2.friend where t3.friend!= \"null\"",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 901,
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "predicted": "select t1.name from high_schooler as t1 join likes as t2 on t1.id = t2.school_id join friend as t3 on t2.friend = t3.id group by t2.high_schooler order by count(*) desc limit 1",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 904,
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "predicted": "select t2.name, count(*) from likes as t1 join school as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 905,
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "predicted": "select t2.name, count(*) from likes as t1 join school as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 906,
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "predicted": "select t2.name from likes as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.schooler order by count(*) desc limit 1",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 907,
        "question": "Give the name of the student with the most likes.",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.id = t2.stuid group by t1.stuid order by count(*) desc limit 1",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 908,
        "question": "Show the names of students who have at least 2 likes.",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.id = t2.stuid group by t2.stuid having count(*) >= 2",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 909,
        "question": "What are the names of students who have 2 or more likes?",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.id = t2.stuid group by t2.stuid having count(*) >= 2",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 910,
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "predicted": "select t1.name from student as t1 join friend as t2 on t1.id = t2.stuid where t2.grade > 5 group by t2.stuid having count(*) >= 2",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.grade  >  5 group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 911,
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "predicted": "select t1.name from high_schooler as t1 join friends as t2 on t1.id = t2.school_id group by t1.id having count(*) > 5 intersect select t1.name from high_schooler as t1 join friends as t2 on t1.school_id = t2.school_id group by t1.high_school_id having count(*) >= 2",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.grade  >  5 group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 912,
        "question": "How many likes does Kyle have?",
        "predicted": "select count(*) from student as t1 join likes as t2 on t1.stuid = t2.stuid where t1.name = 'kerry'",
        "gold": "select count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 913,
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "predicted": "select count(*) from student as t1 join likes as t2 on t1.stuid = t2.stuid join high_schooler as t3 on t3.id = t2.high_schooler where t3.name = 'k kyle'",
        "gold": "select count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 914,
        "question": "Find the average grade of all students who have some friends.",
        "predicted": "select avg(t2.grade) from friends as t1 join high_schooler as t2 on t1.stuid = t2.stuid",
        "gold": "select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 915,
        "question": "What is the average grade of students who have friends?",
        "predicted": "select avg(t2.grade) from friends as t1 join high_schooler as t2 on t1.stuid = t2.stuid",
        "gold": "select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 916,
        "question": "Find the minimum grade of students who have no friends.",
        "predicted": "select min(grade) from high_schooler where id not in (select id from friends)",
        "gold": "select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 917,
        "question": "What is the lowest grade of students who do not have any friends?",
        "predicted": "select distinct grade from student where id not in (select id from friends)",
        "gold": "select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 930,
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "predicted": "select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t2.first_name ,  t2.last_name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 931,
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "predicted": "select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t2.first_name ,  t2.last_name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 934,
        "question": "What is the name of the breed with the most dogs?",
        "predicted": "select breed_name from dogs group by breed_code order by count(*) desc limit 1",
        "gold": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code  =  t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 935,
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "predicted": "select breed_name from dogs group by breed_code order by count(*) desc limit 1",
        "gold": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code  =  t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 936,
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "predicted": "select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 937,
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "predicted": "select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 938,
        "question": "What is the description of the treatment type that costs the least money in total?",
        "predicted": "select treatment_type_description from treatments order by cost_of_treatment asc limit 1",
        "gold": "select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 939,
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "predicted": "select treatment_type_description from treatment_types group by treatment_type_code order by sum(cost_of_treatment) limit 1",
        "gold": "select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 940,
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "predicted": "select t1.owner_id, t1.zip_code from owners as t1 join charges as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t1.amount) desc limit 1",
        "gold": "select t1.owner_id ,  t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 941,
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "predicted": "select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t2.amount) desc limit 1",
        "gold": "select t1.owner_id ,  t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 948,
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "predicted": "select treatment_type_code, treatment_type_description from treatments group by treatment_type_code",
        "gold": "select t1.cost_of_treatment ,  t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 949,
        "question": "What are the cost and treatment type description of each treatment?",
        "predicted": "select treatment_type_code, cost_of_treatment, treatment_type_description from treatments",
        "gold": "select t1.cost_of_treatment ,  t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 952,
        "question": "List pairs of the owner's first name and the dogs's name.",
        "predicted": "select first_name, last_name from dogs",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 954,
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "predicted": "select t2.name, t1.date_treatment_id from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id where t1.type_code = \"king\"",
        "gold": "select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 955,
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "predicted": "select t2.name, t1.date_treatment_date from breeds as t1 join dogs as t2 on t1.dog_id = t2.dog_id order by t1.age limit 1",
        "gold": "select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 968,
        "question": "How many professionals have performed any treatment to dogs?",
        "predicted": "select count(*) from procedures as t1 join dogs as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"dogs\"",
        "gold": "select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 969,
        "question": "Find the number of professionals who have ever treated dogs.",
        "predicted": "select count(*) from procedures as t1 join dogs as t2 on t1.professional_id = t2.professional_id",
        "gold": "select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 996,
        "question": "What are all the possible breed type and size type combinations?",
        "predicted": "select distinct t1.type_code, t1.size_code from breeds as t1 join sizes as t2 on t1. breed_code = t2. breed_code",
        "gold": "select distinct breed_code ,  size_code from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 997,
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "predicted": "select distinct t2. breed_type_code, t2.size_code from dogs as t1 join breeds as t2 on t1.dog_id = t2.dog_id",
        "gold": "select distinct breed_code ,  size_code from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 998,
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "predicted": "select t1.first_name, t1.last_name, t2.treatment_type_code from professionals as t1 join treatments as t2 on t1.treatment_id = t2.treatment_id where t2.treatment_type_code = \"done\"",
        "gold": "select distinct t1.first_name ,  t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id join treatment_types as t3 on t2.treatment_type_code  =  t3.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 999,
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "predicted": "select t1.first_name, t1.last_name, t2.treatment_type_description from professionals as t1 join treatments as t2 on t1.treatment_id = t2.treatment_id",
        "gold": "select distinct t1.first_name ,  t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id join treatment_types as t3 on t2.treatment_type_code  =  t3.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 1031,
        "question": "What is the feature type name of feature AirCon?",
        "predicted": "select feature_type_name from ref_feature_types as t1 join features as t2 on t1.feature_id = t2.feature_id where t2.feature_name = \"aircon\"",
        "gold": "select t2.feature_type_name from other_available_features as t1 join ref_feature_types as t2 on t1.feature_type_code  =  t2.feature_type_code where t1.feature_name  =  \"aircon\"",
        "db_id": "real_estate_properties"
      },
      {
        "index": 1032,
        "question": "Show the property type descriptions of properties belonging to that code.",
        "predicted": "select t1.property_type_description from ref_property_types as t1 join properties as t2 on t1.property_type_code = t2.property_type_code",
        "gold": "select t2.property_type_description from properties as t1 join ref_property_types as t2 on t1.property_type_code  =  t2.property_type_code group by t1.property_type_code",
        "db_id": "real_estate_properties"
      }
    ],
    "aggregation_errors": [
      {
        "index": 16,
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "predicted": "select max(capacity), avg(avg(avg(amount) from stadium",
        "gold": "select max(capacity), average from stadium",
        "db_id": "concert_singer"
      },
      {
        "index": 18,
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "predicted": "select name, capacity from stadium order by avg(average_attendance) desc limit 1",
        "gold": "select name ,  capacity from stadium order by average desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 19,
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "predicted": "select name, capacity from stadium order by avg(attendance) desc limit 1",
        "gold": "select name ,  capacity from stadium order by average desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 48,
        "question": "How much does the youngest dog weigh?",
        "predicted": "select count(*) from pets where pet_name = \"dog\" and age = (select min(age) from pets)",
        "gold": "select weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 68,
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "predicted": "select pets, count(*) from pets where age = ( select min(age) from pets )",
        "gold": "select pettype ,  weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 101,
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "predicted": "select t1.make, t1.model_make from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id order by t2.accelerator_year asc limit 1",
        "gold": "select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);",
        "db_id": "car_1"
      },
      {
        "index": 102,
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "predicted": "select t1.manufacturer, t1.year from manufacturers as t1 join cars_data as t2 on t1.id = t2.machine_id order by t2.accelerator_year asc limit 1",
        "gold": "select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);",
        "db_id": "car_1"
      },
      {
        "index": 112,
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "predicted": "select sum(t1.weight) from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.model = 'acquired' and t2.weight = (select sportname from cars_data as t1 join cars as t2 on t1.machine_id = t2.machine_id where t1.machine = 'abrait sportabout')",
        "gold": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.make  =  'amc hornet sportabout (sw)';",
        "db_id": "car_1"
      },
      {
        "index": 131,
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "predicted": "select max(t1.machine), max(t1.machine_make) from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.cylinders = 3",
        "gold": "select t2.horsepower ,  t1.make from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 132,
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "predicted": "select max(t1.supplier), t1.model_make from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.number = 3",
        "gold": "select t2.horsepower ,  t1.make from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 139,
        "question": "What is the maximum accelerate for different number of cylinders?",
        "predicted": "select max(accelerator), count(*) from cars_data group by count(*)",
        "gold": "select max(accelerate) ,  cylinders from cars_data group by cylinders;",
        "db_id": "car_1"
      },
      {
        "index": 157,
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "predicted": "select count(*) from cars_data where model_id = (select model_id from cars_data order by accelerate_year asc limit 1)",
        "gold": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 158,
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "predicted": "select count(*) from cars_data where model = (select model_id from cars_data group by model_id order by count(*) asc limit 1)",
        "gold": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 159,
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "predicted": "select count(*) from cars_data where speed > (select max(speed) from cars_data)",
        "gold": "select count(*) from cars_data where accelerate  >  ( select accelerate from cars_data order by horsepower desc limit 1 );",
        "db_id": "car_1"
      },
      {
        "index": 160,
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "predicted": "select count(*) from cars_data where speed > (select max(speed) from cars_data order by horsepower desc limit 1)",
        "gold": "select count(*) from cars_data where accelerate  >  ( select accelerate from cars_data order by horsepower desc limit 1 );",
        "db_id": "car_1"
      },
      {
        "index": 167,
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "predicted": "select distinct t1.driver, t1.make_name from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.mpg > 3",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <=  3;",
        "db_id": "car_1"
      },
      {
        "index": 168,
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "predicted": "select t1.machine_id, t1.make_name from cars as t1 join cars_data as t2 on t1.machine_id = t2.machine_id where t1.supplier!= 4",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "db_id": "car_1"
      },
      {
        "index": 270,
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "predicted": "select t2.manager_name, t2.district from products as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "gold": "select manager_name ,  district from shop order by number_products desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 274,
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "predicted": "select name, location, district from shop order by count(*) desc",
        "gold": "select name ,  location ,  district from shop order by number_products desc",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 279,
        "question": "Find the name of the employee who got the highest one time bonus.",
        "predicted": "select t1.name from employee as t1 join hiring as t2 on t1.employee_id = t2.employee_id group by t1.employee_id order by count(*) desc limit 1",
        "gold": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id order by t2.bonus desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 377,
        "question": "What is the document id with 1 to 2 paragraphs?",
        "predicted": "select document_id from paragraphs where document_id between 1 and 2",
        "gold": "select document_id from paragraphs group by document_id having count(*) between 1 and 2",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 423,
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "predicted": "select t1.name, t1.age from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id group by t1.customer_id order by sum(total_ticket_total) desc limit 1",
        "gold": "select t1.name ,  t1.age from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id order by t2.num_of_ticket desc limit 1",
        "db_id": "museum_visit"
      },
      {
        "index": 439,
        "question": "Find the highest rank of losers in all matches.",
        "predicted": "select rank from players order by rank asc limit 1",
        "gold": "select min(loser_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 440,
        "question": "What is the best rank of losers across all matches?",
        "predicted": "select rank from players order by distance desc limit 1",
        "gold": "select min(loser_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 459,
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "predicted": "select t2.first_name, t2.country_code from ratings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 460,
        "question": "What is the first name and country code of the player with the most tours?",
        "predicted": "select t2.first_name, t2.country_code from performances as t1 join player as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 465,
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "predicted": "select t2.winning_name from rankings as t1 join match as t2 on t1.winning_id = t2.winning_id where t1.country = \"australia open open\" group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 466,
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "predicted": "select t2.winning_name from rankings as t1 join results as t2 on t1.winning_id = t2.winning_id where t1.country = \"australia open open\" group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 467,
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "predicted": "select t2.winning_name, t2.winning_name from matches as t1 join players as t2 on t1.match_id = t2.match_id group by t2.winning_r order by sum(t1.minutes) desc limit 1",
        "gold": "select winner_name ,  loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 468,
        "question": "What are the names of the winner and loser who played in the longest match?",
        "predicted": "select t2.winning_name, t2.loser_r = t1.winning_r where t2.year = (select max(year) from matches)",
        "gold": "select winner_name ,  loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 471,
        "question": "Find the total ranking points for each player and their first name.",
        "predicted": "select t1.ranking_points, t2.first_name from rankings as t1 join players as t2 on t1.player_id = t2.player_id",
        "gold": "select sum(ranking_points) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 472,
        "question": "What are the first names of all players, and their total ranking points?",
        "predicted": "select t2.first_name, t2.ranked_points from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "gold": "select sum(ranking_points) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 479,
        "question": "Find the total number of tours for each ranking date.",
        "predicted": "select ranking_date, count(*) from courses group by ranking_date",
        "gold": "select sum(tours) ,  ranking_date from rankings group by ranking_date",
        "db_id": "wta_1"
      },
      {
        "index": 480,
        "question": "How many total tours were there for each ranking date?",
        "predicted": "select ranking_date, count(*) from courses group by ranking_date",
        "gold": "select sum(tours) ,  ranking_date from rankings group by ranking_date",
        "db_id": "wta_1"
      },
      {
        "index": 487,
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "predicted": "select t2.first_name, t1.country_code, t2.birth_name from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select t1.first_name ,  t1.country_code ,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 488,
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "predicted": "select t2.first_name, t1.country_code, t2.birthday from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.first_name ,  t1.country_code ,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 499,
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "predicted": "select t1.id, t2.name from death as t1 join ship as t2 on t1.ship_id = t2.id group by t1.ship_id having count(*) > 10",
        "gold": "select t1.id ,  t1.name from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle join death as t3 on t2.id  =  t3.caused_by_ship_id group by t1.id having sum(t3.killed)  >  10",
        "db_id": "battle_death"
      },
      {
        "index": 500,
        "question": "What is the ship id and name that caused most total injuries?",
        "predicted": "select t1.ship_id, t1.name from ship as t1 join death as t2 on t1.ship_id = t2.ship_id group by t2.ship_id order by sum(t2.injury) desc limit 1",
        "gold": "select t2.id ,  t2.name from death as t1 join ship as t2 on t1.caused_by_ship_id  =  t2.id group by t2.id order by count(*) desc limit 1",
        "db_id": "battle_death"
      },
      {
        "index": 578,
        "question": "What are the different addresses that have students living there?",
        "predicted": "select distinct t1.address_id from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.address_id",
        "gold": "select count(distinct current_address_id) from students",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 616,
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "predicted": "select having count(*), t1.rating from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id where t2.title = \"tv series\" group by t1.id order by count(*) desc limit 3",
        "gold": "select episode ,  rating from tv_series order by rating desc limit 3;",
        "db_id": "tvshow"
      },
      {
        "index": 631,
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "predicted": "select t1.paket_name, t1.series_name from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.channel = \"tv\" group by t2.channel order by count(*) desc limit 1",
        "gold": "select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\"",
        "db_id": "tvshow"
      },
      {
        "index": 652,
        "question": "What are the final tables made and best finishes for all poker players?",
        "predicted": "select t1.lat_table_made, t2.max(t2.money_date) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "gold": "select final_table_made ,  best_finish from poker_player",
        "db_id": "poker_player"
      },
      {
        "index": 691,
        "question": "What is last date created of votes from the state 'CA'?",
        "predicted": "select t1.latin_date from votes as t1 join state as t2 on t1.state = t2.district where t2.state = \"ca\"",
        "gold": "select max(created) from votes where state  =  'ca'",
        "db_id": "voter_1"
      },
      {
        "index": 707,
        "question": "How much surface area do the countires in the Carribean cover together?",
        "predicted": "select count(*) from country as t1 join sqlite_area as t2 on t1.id = t2.country_code where t1.name = \"carribean\"",
        "gold": "select sum(surfacearea) from country where region  =  \"caribbean\"",
        "db_id": "world_1"
      },
      {
        "index": 712,
        "question": "Which language is the most popular in Aruba?",
        "predicted": "select language from country_language where country_name = \"aruba\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 723,
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "predicted": "select count(*), country_code from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"aspan\" group by t1.country_code order by count(*) desc limit 1",
        "gold": "select sum(population) ,  max(gnp) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 728,
        "question": "How many people live in Gelderland district?",
        "predicted": "select count(*) from city as t1 join city as t2 on t1.city_code = t2.id where t1.district = \"monerland\"",
        "gold": "select sum(population) from city where district  =  \"gelderland\"",
        "db_id": "world_1"
      },
      {
        "index": 759,
        "question": "What languages are only used by a single country with a republic government?",
        "predicted": "select language from country where state = \"japan\" group by language",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.governmentform  =  \"republic\" group by t2.language having count(*)  =  1",
        "db_id": "world_1"
      },
      {
        "index": 761,
        "question": "What is the most populace city that speaks English?",
        "predicted": "select city from city where country_code = \"english\" group by city order by count(*) desc limit 1",
        "gold": "select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 766,
        "question": "What is the total number of people living in the nations that do not use English?",
        "predicted": "select count(*) from country where country_code not in (select country_code from country where languages = \"english\")",
        "gold": "select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\")",
        "db_id": "world_1"
      },
      {
        "index": 767,
        "question": "How many people live in countries that do not speak English?",
        "predicted": "select count(*) from country where country_code not in (select country_code from country where languages = \"english\")",
        "gold": "select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\")",
        "db_id": "world_1"
      },
      {
        "index": 772,
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "predicted": "select country_code from country where surface > (select max(surface_area) from country where country = \"europea\")",
        "gold": "select name from country where surfacearea  >  (select min(surfacearea) from country where continent  =  \"europe\")",
        "db_id": "world_1"
      },
      {
        "index": 773,
        "question": "Which countries have greater area than that of any country in Europe?",
        "predicted": "select country from country where area > (select max(area) from country where country = \"europea\")",
        "gold": "select name from country where surfacearea  >  (select min(surfacearea) from country where continent  =  \"europe\")",
        "db_id": "world_1"
      },
      {
        "index": 777,
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "predicted": "select country from country where population > (select max(population) from country where country = 'africa')",
        "gold": "select name from country where continent  =  \"asia\"  and population  >  (select min(population) from country where continent  =  \"africa\")",
        "db_id": "world_1"
      },
      {
        "index": 786,
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "predicted": "select count(*) from city as t1 join country_language as t2 on t1.country_code = t2.country_code where t1.country_name = \"asian\" and t2.language = \"chinese\"",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 805,
        "question": "Return the names of the 3 countries with the fewest people.",
        "predicted": "select t1.name from country as t1 join country as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 3",
        "gold": "select name from country order by population asc limit 3",
        "db_id": "world_1"
      },
      {
        "index": 816,
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "predicted": "select t2.language from country_language as t1 join country as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 1",
        "gold": "select language ,  countrycode ,  max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 817,
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "predicted": "select t1.country_code, t2.language from country as t1 join languages as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 1",
        "gold": "select language ,  countrycode ,  max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 818,
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "predicted": "select count(*) from country where country = \"spain\" group by country_code order by count(*) desc limit 1",
        "gold": "select count(*) ,   max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 819,
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country where t1.language = \"spanish\"",
        "gold": "select count(*) ,   max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 820,
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "predicted": "select country_code from country where country = \"spain\" group by country_code order by count(*) desc limit 1",
        "gold": "select countrycode ,  max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 821,
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "predicted": "select country_code from country where language = \"spanish\" group by country_code order by count(*) desc limit 1",
        "gold": "select countrycode ,  max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 839,
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "predicted": "select t2.name from conductor as t1 join conductor as t2 on t1.interaction_id = t2.interaction_id join performance as t3 on t1.performance_id = t3.performance_id group by t1.name order by count(*) desc limit 1",
        "gold": "select name from conductor order by year_of_work desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 901,
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "predicted": "select t1.name from high_schooler as t1 join likes as t2 on t1.id = t2.school_id join friend as t3 on t2.friend = t3.id group by t2.high_schooler order by count(*) desc limit 1",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 917,
        "question": "What is the lowest grade of students who do not have any friends?",
        "predicted": "select distinct grade from student where id not in (select id from friends)",
        "gold": "select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 918,
        "question": "Which states have both owners and professionals living there?",
        "predicted": "select state from professionals group by state having count(*) = 'owner' intersect select state from professionals",
        "gold": "select state from owners intersect select state from professionals",
        "db_id": "dog_kennels"
      },
      {
        "index": 919,
        "question": "Find the states where both owners and professionals live.",
        "predicted": "select state from professionals group by state having count(*) = 'owner' intersect select state from professionals",
        "gold": "select state from owners intersect select state from professionals",
        "db_id": "dog_kennels"
      },
      {
        "index": 924,
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "predicted": "select name from dogs where dogs_id not in ( select dogs_id from treatments where cost_of_treatment > 1000 )",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 925,
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "predicted": "select name from dogs where owner!= 1000",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 938,
        "question": "What is the description of the treatment type that costs the least money in total?",
        "predicted": "select treatment_type_description from treatments order by cost_of_treatment asc limit 1",
        "gold": "select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 944,
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "predicted": "select t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"gone\"",
        "gold": "select distinct t1.first_name ,  t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment  <  ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 950,
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "predicted": "select t1.first_name, t1.last_name, count(*) from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id",
        "gold": "select t1.first_name ,  t1.last_name ,  t2.size_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 951,
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "predicted": "select t1.first_name, t1.last_name, count(*) from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id",
        "gold": "select t1.first_name ,  t1.last_name ,  t2.size_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 954,
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "predicted": "select t2.name, t1.date_treatment_id from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id where t1.type_code = \"king\"",
        "gold": "select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 955,
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "predicted": "select t2.name, t1.date_treatment_date from breeds as t1 join dogs as t2 on t1.dog_id = t2.dog_id order by t1.age limit 1",
        "gold": "select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 960,
        "question": "List the last name of the owner owning the youngest dog.",
        "predicted": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t1.age limit 1",
        "gold": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t2.age  =  ( select max(age) from dogs )",
        "db_id": "dog_kennels"
      },
      {
        "index": 961,
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "predicted": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t2.age limit 1",
        "gold": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t2.age  =  ( select max(age) from dogs )",
        "db_id": "dog_kennels"
      },
      {
        "index": 988,
        "question": "What is the age of the oldest dog?",
        "predicted": "select age from dogs order by date_of_birth desc limit 1",
        "gold": "select max(age) from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 989,
        "question": "Tell me the age of the oldest dog.",
        "predicted": "select age from dogs order by date_of_birth desc limit 1",
        "gold": "select max(age) from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 992,
        "question": "How much does the most expensive charge type costs?",
        "predicted": "select charge_amount from charges order by charge_type desc limit 1",
        "gold": "select max(charge_amount) from charges",
        "db_id": "dog_kennels"
      },
      {
        "index": 993,
        "question": "What is the charge amount of the most expensive charge type?",
        "predicted": "select charge_amount from charges order by charge_type desc limit 1",
        "gold": "select max(charge_amount) from charges",
        "db_id": "dog_kennels"
      }
    ],
    "order_limit_errors": [
      {
        "index": 6,
        "question": "Show the name and the release year of the song by the youngest singer.",
        "predicted": "select t2.name, t2.release_year from singer as t1 join song as t2 on t1.song_id = t2.song_id order by t1.age limit 1",
        "gold": "select song_name ,  song_release_year from singer order by age limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 7,
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "predicted": "select song_name, release_year from singer order by age asc limit 1",
        "gold": "select song_name ,  song_release_year from singer order by age limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 18,
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "predicted": "select name, capacity from stadium order by avg(average_attendance) desc limit 1",
        "gold": "select name ,  capacity from stadium order by average desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 19,
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "predicted": "select name, capacity from stadium order by avg(attendance) desc limit 1",
        "gold": "select name ,  capacity from stadium order by average desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 43,
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "predicted": "select count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id order by t2.capacity desc limit 1",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "db_id": "concert_singer"
      },
      {
        "index": 47,
        "question": "Find the weight of the youngest dog.",
        "predicted": "select weight from pets order by age limit 1",
        "gold": "select weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 48,
        "question": "How much does the youngest dog weigh?",
        "predicted": "select count(*) from pets where pet_name = \"dog\" and age = (select min(age) from pets)",
        "gold": "select weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 67,
        "question": "Find the type and weight of the youngest pet.",
        "predicted": "select pet_type, weight from pets order by age limit 1",
        "gold": "select pettype ,  weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 68,
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "predicted": "select pets, count(*) from pets where age = ( select min(age) from pets )",
        "gold": "select pettype ,  weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 95,
        "question": "Which model of the car has the minimum horsepower?",
        "predicted": "select model from cars_data order by horsepower limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 96,
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "predicted": "select model from cars_data order by horsepower limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 101,
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "predicted": "select t1.make, t1.model_make from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id order by t2.accelerator_year asc limit 1",
        "gold": "select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);",
        "db_id": "car_1"
      },
      {
        "index": 102,
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "predicted": "select t1.manufacturer, t1.year from manufacturers as t1 join cars_data as t2 on t1.id = t2.machine_id order by t2.accelerator_year asc limit 1",
        "gold": "select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);",
        "db_id": "car_1"
      },
      {
        "index": 131,
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "predicted": "select max(t1.machine), max(t1.machine_make) from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.cylinders = 3",
        "gold": "select t2.horsepower ,  t1.make from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 132,
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "predicted": "select max(t1.supplier), t1.model_make from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.number = 3",
        "gold": "select t2.horsepower ,  t1.make from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 133,
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "predicted": "select model_name from cars_data order by horsepower desc limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 134,
        "question": "What is the car model with the highest mpg ?",
        "predicted": "select model_name from cars order by horsepower desc limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 142,
        "question": "What model has the most different versions?",
        "predicted": "select model_name from model_lists group by model_name order by count(distinct model_id) desc limit 1",
        "gold": "select model from car_names group by model order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 155,
        "question": "What is the horsepower of the car with the largest accelerate?",
        "predicted": "select horsepower from cars_data order by accelerate_year desc limit 1",
        "gold": "select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 156,
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "predicted": "select horsepower from cars_data order by accelerate_year desc limit 1",
        "gold": "select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 157,
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "predicted": "select count(*) from cars_data where model_id = (select model_id from cars_data order by accelerate_year asc limit 1)",
        "gold": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 158,
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "predicted": "select count(*) from cars_data where model = (select model_id from cars_data group by model_id order by count(*) asc limit 1)",
        "gold": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 159,
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "predicted": "select count(*) from cars_data where speed > (select max(speed) from cars_data)",
        "gold": "select count(*) from cars_data where accelerate  >  ( select accelerate from cars_data order by horsepower desc limit 1 );",
        "db_id": "car_1"
      },
      {
        "index": 165,
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "predicted": "select model_name from cars_data where horsepower = 4",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 166,
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "predicted": "select model_name from cars_data order by horsepower desc limit 4",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 261,
        "question": "Sort employee names by their age in ascending order.",
        "predicted": "select name from employee order by age asc",
        "gold": "select name from employee order by age",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 262,
        "question": "List the names of employees and sort in ascending order of age.",
        "predicted": "select name from employee order by age asc",
        "gold": "select name from employee order by age",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 269,
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "predicted": "select manager_name, district from shop order by products desc limit 1",
        "gold": "select manager_name ,  district from shop order by number_products desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 270,
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "predicted": "select t2.manager_name, t2.district from products as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "gold": "select manager_name ,  district from shop order by number_products desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 273,
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "predicted": "select name, location, district from shop order by products desc",
        "gold": "select name ,  location ,  district from shop order by number_products desc",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 274,
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "predicted": "select name, location, district from shop order by count(*) desc",
        "gold": "select name ,  location ,  district from shop order by number_products desc",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 279,
        "question": "Find the name of the employee who got the highest one time bonus.",
        "predicted": "select t1.name from employee as t1 join hiring as t2 on t1.employee_id = t2.employee_id group by t1.employee_id order by count(*) desc limit 1",
        "gold": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id order by t2.bonus desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 280,
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "predicted": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.onscholarship desc limit 1",
        "gold": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id order by t2.bonus desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 391,
        "question": "What is the hometown of the youngest teacher?",
        "predicted": "select t2.hometown from course as t1 join teacher as t2 on t1.instructor = t2.instructor_id order by t1.age limit 1",
        "gold": "select hometown from teacher order by age asc limit 1",
        "db_id": "course_teach"
      },
      {
        "index": 392,
        "question": "Where is the youngest teacher from?",
        "predicted": "select t1.name from teacher as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id order by t2.age limit 1",
        "gold": "select hometown from teacher order by age asc limit 1",
        "db_id": "course_teach"
      },
      {
        "index": 401,
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "predicted": "select t2.name, t1.course_id from course_order as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id order by t2.name asc",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id order by t3.name",
        "db_id": "course_teach"
      },
      {
        "index": 402,
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "predicted": "select t2.name, t1.course_id from course as t1 join teachers as t2 on t1.teacher_id = t2.teacher_id order by t2.name",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id order by t3.name",
        "db_id": "course_teach"
      },
      {
        "index": 412,
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "predicted": "select name from customer where level > 4 order by level",
        "gold": "select name from visitor where level_of_membership  >  4 order by level_of_membership desc",
        "db_id": "museum_visit"
      },
      {
        "index": 414,
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "predicted": "select name, level_of_membership from customer where age > 4 order by age",
        "gold": "select name ,  level_of_membership from visitor where level_of_membership  >  4 order by age desc",
        "db_id": "museum_visit"
      },
      {
        "index": 420,
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "predicted": "select t1.customer_id, t1.name, t2.level from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id group by t1.customer_id order by sum(total_cost_cost) desc limit 1",
        "gold": "select t2.visitor_id ,  t1.name ,  t1.level_of_membership from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id group by t2.visitor_id order by sum(t2.total_spent) desc limit 1",
        "db_id": "museum_visit"
      },
      {
        "index": 423,
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "predicted": "select t1.name, t1.age from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id group by t1.customer_id order by sum(total_ticket_total) desc limit 1",
        "gold": "select t1.name ,  t1.age from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id order by t2.num_of_ticket desc limit 1",
        "db_id": "museum_visit"
      },
      {
        "index": 439,
        "question": "Find the highest rank of losers in all matches.",
        "predicted": "select rank from players order by rank asc limit 1",
        "gold": "select min(loser_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 440,
        "question": "What is the best rank of losers across all matches?",
        "predicted": "select rank from players order by distance desc limit 1",
        "gold": "select min(loser_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 453,
        "question": "Find the first name and country code of the oldest player.",
        "predicted": "select firstname, country_code from player order by age desc limit 1",
        "gold": "select first_name ,  country_code from players order by birth_date limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 454,
        "question": "What is the first name and country code of the oldest player?",
        "predicted": "select firstname, country_code from player order by age desc limit 1",
        "gold": "select first_name ,  country_code from players order by birth_date limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 459,
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "predicted": "select t2.first_name, t2.country_code from ratings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 460,
        "question": "What is the first name and country code of the player with the most tours?",
        "predicted": "select t2.first_name, t2.country_code from performances as t1 join player as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 465,
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "predicted": "select t2.winning_name from rankings as t1 join match as t2 on t1.winning_id = t2.winning_id where t1.country = \"australia open open\" group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 466,
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "predicted": "select t2.winning_name from rankings as t1 join results as t2 on t1.winning_id = t2.winning_id where t1.country = \"australia open open\" group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 467,
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "predicted": "select t2.winning_name, t2.winning_name from matches as t1 join players as t2 on t1.match_id = t2.match_id group by t2.winning_r order by sum(t1.minutes) desc limit 1",
        "gold": "select winner_name ,  loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 468,
        "question": "What are the names of the winner and loser who played in the longest match?",
        "predicted": "select t2.winning_name, t2.loser_r = t1.winning_r where t2.year = (select max(year) from matches)",
        "gold": "select winner_name ,  loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 483,
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "predicted": "select t2.winning_name, t2.rank from matches as t1 join players as t2 on t1.player_id = t2.player_id order by t1.age limit 3",
        "gold": "select distinct winner_name ,  winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1"
      },
      {
        "index": 484,
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "predicted": "select t2.winner_name, t2.rank from matches as t1 join rankings as t2 on t1.winning_id = t2.winning_id order by t1.age limit 3",
        "gold": "select distinct winner_name ,  winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1"
      },
      {
        "index": 487,
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "predicted": "select t2.first_name, t1.country_code, t2.birth_name from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select t1.first_name ,  t1.country_code ,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 488,
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "predicted": "select t2.first_name, t1.country_code, t2.birthday from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.first_name ,  t1.country_code ,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 500,
        "question": "What is the ship id and name that caused most total injuries?",
        "predicted": "select t1.ship_id, t1.name from ship as t1 join death as t2 on t1.ship_id = t2.ship_id group by t2.ship_id order by sum(t2.injury) desc limit 1",
        "gold": "select t2.id ,  t2.name from death as t1 join ship as t2 on t1.caused_by_ship_id  =  t2.id group by t2.id order by count(*) desc limit 1",
        "db_id": "battle_death"
      },
      {
        "index": 555,
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_first_registered asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 556,
        "question": "What is the first, middle, and last name of the first student to register?",
        "predicted": "select t2.first_name, t2.middle_name, t2.last_name from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id order by t1.date_registration_date asc limit 1",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_first_registered asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 557,
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id order by t2.date_undergraduated limit 1",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_left asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 558,
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "predicted": "select first_name, middle_name, last_name from students order by date desc limit 1",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_left asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 565,
        "question": "When is the first transcript released? List the date and details.",
        "predicted": "select t1.date, t1.other_details from transcripts as t1 join student_enrolment as t2 on t1.journal_id = t2.journal_id order by t1.date asc limit 1",
        "gold": "select transcript_date ,  other_details from transcripts order by transcript_date asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 566,
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "predicted": "select t1.date, t1.other_details from transcripts as t1 join transcript_contents as t2 on t1.cript_id = t2.transaction_id order by t1.date asc limit 1",
        "gold": "select transcript_date ,  other_details from transcripts order by transcript_date asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 569,
        "question": "What is the last transcript release date?",
        "predicted": "select t1.transaction_date from transcripts as t1 join transcript_contents as t2 on t1.transaction_id = t2.transaction_id",
        "gold": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 570,
        "question": "When was the last transcript released?",
        "predicted": "select date from transcripts order by date desc limit 1",
        "gold": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 579,
        "question": "List all the student details in reversed lexicographical order.",
        "predicted": "select * from student_details order by student_details desc",
        "gold": "select other_student_details from students order by other_student_details desc",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 580,
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "predicted": "select other_details from students order by other_details desc",
        "gold": "select other_student_details from students order by other_student_details desc",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 591,
        "question": "list all cartoon titles and their directors ordered by their air date",
        "predicted": "select title, directed_by from cartoon order by air_date",
        "gold": "select title ,  directed_by from cartoon order by original_air_date",
        "db_id": "tvshow"
      },
      {
        "index": 592,
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "predicted": "select title, directed_by from cartoon order by air_date",
        "gold": "select title ,  directed_by from cartoon order by original_air_date",
        "db_id": "tvshow"
      },
      {
        "index": 616,
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "predicted": "select having count(*), t1.rating from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id where t2.title = \"tv series\" group by t1.id order by count(*) desc limit 3",
        "gold": "select episode ,  rating from tv_series order by rating desc limit 3;",
        "db_id": "tvshow"
      },
      {
        "index": 629,
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "predicted": "select production_code, channel from cartoon order by date desc limit 1",
        "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "db_id": "tvshow"
      },
      {
        "index": 630,
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "predicted": "select produdction_code, channel from cartoon order by date desc limit 1",
        "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "db_id": "tvshow"
      },
      {
        "index": 631,
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "predicted": "select t1.paket_name, t1.series_name from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.channel = \"tv\" group by t2.channel order by count(*) desc limit 1",
        "gold": "select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\"",
        "db_id": "tvshow"
      },
      {
        "index": 632,
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "predicted": "select t1.paket_name, t1.series_name from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id join tv as t3 on t2.tv_channel = t3.id where t3.channel = \"tv channel\" order by high_definition desc limit 1",
        "gold": "select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\"",
        "db_id": "tvshow"
      },
      {
        "index": 649,
        "question": "List the earnings of poker players in descending order.",
        "predicted": "select profit from poker_player order by profit desc",
        "gold": "select earnings from poker_player order by earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 650,
        "question": "What are the earnings of poker players, ordered descending by value?",
        "predicted": "select t1.money from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.professor desc",
        "gold": "select earnings from poker_player order by earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 651,
        "question": "List the final tables made and the best finishes of poker players.",
        "predicted": "select t1.lat_table_made, t1.date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.best_score desc limit 1",
        "gold": "select final_table_made ,  best_finish from poker_player",
        "db_id": "poker_player"
      },
      {
        "index": 655,
        "question": "What is the money rank of the poker player with the highest earnings?",
        "predicted": "select t1.money_ranking from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc limit 1",
        "gold": "select money_rank from poker_player order by earnings desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 656,
        "question": "Return the money rank of the player with the greatest earnings.",
        "predicted": "select money_rank from poker_player order by money desc limit 1",
        "gold": "select money_rank from poker_player order by earnings desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 663,
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.date asc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.final_table_made",
        "db_id": "poker_player"
      },
      {
        "index": 664,
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.date asc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.final_table_made",
        "db_id": "poker_player"
      },
      {
        "index": 665,
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "predicted": "select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc limit 1",
        "gold": "select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings asc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 666,
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "predicted": "select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money asc limit 1",
        "gold": "select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings asc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 667,
        "question": "What is the money rank of the tallest poker player?",
        "predicted": "select t1.money_ranking from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "gold": "select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t1.height desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 668,
        "question": "Return the money rank of the poker player with the greatest height.",
        "predicted": "select t1.money_rank from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "gold": "select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t1.height desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 671,
        "question": "What are the names of poker players in descending order of earnings?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.profits desc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 672,
        "question": "Return the names of poker players sorted by their earnings descending.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 712,
        "question": "Which language is the most popular in Aruba?",
        "predicted": "select language from country_language where country_name = \"aruba\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 713,
        "question": "What language is predominantly spoken in Aruba?",
        "predicted": "select language from country_language where country_name = \"aruba\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 720,
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "predicted": "select name from country where country = 'asia' order by lifestance limit 1",
        "gold": "select name from country where continent  =  \"asia\" order by lifeexpectancy limit 1",
        "db_id": "world_1"
      },
      {
        "index": 721,
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "predicted": "select name from country where country = 'asia' order by life_attendance limit 1",
        "gold": "select name from country where continent  =  \"asia\" order by lifeexpectancy limit 1",
        "db_id": "world_1"
      },
      {
        "index": 723,
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "predicted": "select count(*), country_code from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"aspan\" group by t1.country_code order by count(*) desc limit 1",
        "gold": "select sum(population) ,  max(gnp) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 756,
        "question": "Which language is the most popular on the Asian continent?",
        "predicted": "select language from country where t1.country = \"asian\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  \"asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 757,
        "question": "What is the language that is used by the largest number of Asian nations?",
        "predicted": "select language from country_language where country_name = \"asian\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  \"asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 760,
        "question": "Find the city with the largest population that uses English.",
        "predicted": "select city from city where country_code = \"english\" group by city_code order by population desc limit 1",
        "gold": "select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 761,
        "question": "What is the most populace city that speaks English?",
        "predicted": "select city from city where country_code = \"english\" group by city order by count(*) desc limit 1",
        "gold": "select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 762,
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "predicted": "select name, population, expected_from country from country where country = 'asian' order by population desc limit 1",
        "gold": "select name ,  population ,  lifeexpectancy from country where continent  =  \"asia\" order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 763,
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "predicted": "select name, population, life_attendancy from country where country = 'asian' order by country_name desc limit 1",
        "gold": "select name ,  population ,  lifeexpectancy from country where continent  =  \"asia\" order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 788,
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "predicted": "select name, independence, surface_area from country order by population asc limit 1",
        "gold": "select name ,  surfacearea ,  indepyear from country order by population limit 1",
        "db_id": "world_1"
      },
      {
        "index": 789,
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "predicted": "select t1.name, t1.year, t1.surface_area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.population limit 1",
        "gold": "select name ,  surfacearea ,  indepyear from country order by population limit 1",
        "db_id": "world_1"
      },
      {
        "index": 790,
        "question": "What are the population, name and leader of the country with the largest area?",
        "predicted": "select t1.population, t1.name, t1.leader from country as t1 join country as t2 on t1.country_code = t2.country_code order by t2.area desc limit 1",
        "gold": "select name ,  population ,  headofstate from country order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 791,
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "predicted": "select t1.name, t1.population, t2.head_of_state from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.area desc limit 1",
        "gold": "select name ,  population ,  headofstate from country order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 800,
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "predicted": "select t1.name, t1.area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t2.area desc limit 5",
        "gold": "select name ,  surfacearea from country order by surfacearea desc limit 5",
        "db_id": "world_1"
      },
      {
        "index": 801,
        "question": "Return the names and surface areas of the 5 largest countries.",
        "predicted": "select t1.name, t1.region_area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.country_code desc limit 5",
        "gold": "select name ,  surfacearea from country order by surfacearea desc limit 5",
        "db_id": "world_1"
      },
      {
        "index": 805,
        "question": "Return the names of the 3 countries with the fewest people.",
        "predicted": "select t1.name from country as t1 join country as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 3",
        "gold": "select name from country order by population asc limit 3",
        "db_id": "world_1"
      },
      {
        "index": 816,
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "predicted": "select t2.language from country_language as t1 join country as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 1",
        "gold": "select language ,  countrycode ,  max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 817,
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "predicted": "select t1.country_code, t2.language from country as t1 join languages as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 1",
        "gold": "select language ,  countrycode ,  max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 818,
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "predicted": "select count(*) from country where country = \"spain\" group by country_code order by count(*) desc limit 1",
        "gold": "select count(*) ,   max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 820,
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "predicted": "select country_code from country where country = \"spain\" group by country_code order by count(*) desc limit 1",
        "gold": "select countrycode ,  max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 821,
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "predicted": "select country_code from country where language = \"spanish\" group by country_code order by count(*) desc limit 1",
        "gold": "select countrycode ,  max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 828,
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "predicted": "select record_company from orchestra order by years_of_founded desc",
        "gold": "select record_company from orchestra order by year_of_founded desc",
        "db_id": "orchestra"
      },
      {
        "index": 829,
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "predicted": "select record_company from orchestra order by years_of_founded desc",
        "gold": "select record_company from orchestra order by year_of_founded desc",
        "db_id": "orchestra"
      },
      {
        "index": 836,
        "question": "List names of conductors in descending order of years of work.",
        "predicted": "select name from conductor order by years_of_work desc",
        "gold": "select name from conductor order by year_of_work desc",
        "db_id": "orchestra"
      },
      {
        "index": 837,
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "predicted": "select name from conductor order by years_of_work desc",
        "gold": "select name from conductor order by year_of_work desc",
        "db_id": "orchestra"
      },
      {
        "index": 838,
        "question": "List the name of the conductor with the most years of work.",
        "predicted": "select name from conductor order by years_of_work desc limit 1",
        "gold": "select name from conductor order by year_of_work desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 839,
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "predicted": "select t2.name from conductor as t1 join conductor as t2 on t1.interaction_id = t2.interaction_id join performance as t3 on t1.performance_id = t3.performance_id group by t1.name order by count(*) desc limit 1",
        "gold": "select name from conductor order by year_of_work desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 851,
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "predicted": "select major from orchestra order by count(*) desc",
        "gold": "select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "db_id": "orchestra"
      },
      {
        "index": 901,
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "predicted": "select t1.name from high_schooler as t1 join likes as t2 on t1.id = t2.school_id join friend as t3 on t2.friend = t3.id group by t2.high_schooler order by count(*) desc limit 1",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 938,
        "question": "What is the description of the treatment type that costs the least money in total?",
        "predicted": "select treatment_type_description from treatments order by cost_of_treatment asc limit 1",
        "gold": "select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 939,
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "predicted": "select treatment_type_description from treatment_types group by treatment_type_code order by sum(cost_of_treatment) limit 1",
        "gold": "select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 940,
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "predicted": "select t1.owner_id, t1.zip_code from owners as t1 join charges as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t1.amount) desc limit 1",
        "gold": "select t1.owner_id ,  t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 941,
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "predicted": "select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t2.amount) desc limit 1",
        "gold": "select t1.owner_id ,  t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 954,
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "predicted": "select t2.name, t1.date_treatment_id from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id where t1.type_code = \"king\"",
        "gold": "select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 955,
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "predicted": "select t2.name, t1.date_treatment_date from breeds as t1 join dogs as t2 on t1.dog_id = t2.dog_id order by t1.age limit 1",
        "gold": "select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 960,
        "question": "List the last name of the owner owning the youngest dog.",
        "predicted": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t1.age limit 1",
        "gold": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t2.age  =  ( select max(age) from dogs )",
        "db_id": "dog_kennels"
      },
      {
        "index": 961,
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "predicted": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t2.age limit 1",
        "gold": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t2.age  =  ( select max(age) from dogs )",
        "db_id": "dog_kennels"
      },
      {
        "index": 976,
        "question": "How much does the most recent treatment cost?",
        "predicted": "select treatment_type_code from treatments order by date_of_treatment_cost desc limit 1",
        "gold": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 988,
        "question": "What is the age of the oldest dog?",
        "predicted": "select age from dogs order by date_of_birth desc limit 1",
        "gold": "select max(age) from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 989,
        "question": "Tell me the age of the oldest dog.",
        "predicted": "select age from dogs order by date_of_birth desc limit 1",
        "gold": "select max(age) from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 992,
        "question": "How much does the most expensive charge type costs?",
        "predicted": "select charge_amount from charges order by charge_type desc limit 1",
        "gold": "select max(charge_amount) from charges",
        "db_id": "dog_kennels"
      },
      {
        "index": 993,
        "question": "What is the charge amount of the most expensive charge type?",
        "predicted": "select charge_amount from charges order by charge_type desc limit 1",
        "gold": "select max(charge_amount) from charges",
        "db_id": "dog_kennels"
      },
      {
        "index": 1002,
        "question": "List the name of singers in ascending order of net worth.",
        "predicted": "select name from singer order by net_value asc",
        "gold": "select name from singer order by net_worth_millions asc",
        "db_id": "singer"
      },
      {
        "index": 1003,
        "question": "What are the names of singers ordered by ascending net worth?",
        "predicted": "select name from singer order by net_value asc",
        "gold": "select name from singer order by net_worth_millions asc",
        "db_id": "singer"
      },
      {
        "index": 1010,
        "question": "What is the name of the singer with the largest net worth?",
        "predicted": "select name from singer order by net_value_millions desc limit 1",
        "gold": "select name from singer order by net_worth_millions desc limit 1",
        "db_id": "singer"
      },
      {
        "index": 1011,
        "question": "What is the name of the singer who is worth the most?",
        "predicted": "select name from singer order by profits desc limit 1",
        "gold": "select name from singer order by net_worth_millions desc limit 1",
        "db_id": "singer"
      }
    ],
    "syntax_errors": [
      {
        "index": 2,
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "predicted": "select name, country, age from singer order by age desc",
        "gold": "select name ,  country ,  age from singer order by age desc",
        "db_id": "concert_singer"
      },
      {
        "index": 3,
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "predicted": "select name, country, age from singer order by age desc",
        "gold": "select name ,  country ,  age from singer order by age desc",
        "db_id": "concert_singer"
      },
      {
        "index": 4,
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "predicted": "select avg(age), min(age), max(age) from singer where country = 'france'",
        "gold": "select avg(age) ,  min(age) ,  max(age) from singer where country  =  'france'",
        "db_id": "concert_singer"
      },
      {
        "index": 5,
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "predicted": "select avg(age), min(age), max(age) from singer where country = 'france'",
        "gold": "select avg(age) ,  min(age) ,  max(age) from singer where country  =  'france'",
        "db_id": "concert_singer"
      },
      {
        "index": 6,
        "question": "Show the name and the release year of the song by the youngest singer.",
        "predicted": "select t2.name, t2.release_year from singer as t1 join song as t2 on t1.song_id = t2.song_id order by t1.age limit 1",
        "gold": "select song_name ,  song_release_year from singer order by age limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 7,
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "predicted": "select song_name, release_year from singer order by age asc limit 1",
        "gold": "select song_name ,  song_release_year from singer order by age limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 8,
        "question": "What are all distinct countries where singers above age 20 are from?",
        "predicted": "select distinct t1.country from singer as t1 join singer_in_match as t2 on t1.song_id = t2.song_id where t2.age > 20",
        "gold": "select distinct country from singer where age  >  20",
        "db_id": "concert_singer"
      },
      {
        "index": 10,
        "question": "Show all countries and the number of singers in each country.",
        "predicted": "select country, count(*) from singer group by country",
        "gold": "select country ,  count(*) from singer group by country",
        "db_id": "concert_singer"
      },
      {
        "index": 11,
        "question": "How many singers are from each country?",
        "predicted": "select country, count(*) from singer group by country",
        "gold": "select country ,  count(*) from singer group by country",
        "db_id": "concert_singer"
      },
      {
        "index": 14,
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "predicted": "select location, name from stadium where capacity between 5000 and 10000",
        "gold": "select location ,  name from stadium where capacity between 5000 and 10000",
        "db_id": "concert_singer"
      },
      {
        "index": 15,
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "predicted": "select location, name from stadium where capacity between 5000 and 10000",
        "gold": "select location ,  name from stadium where capacity between 5000 and 10000",
        "db_id": "concert_singer"
      },
      {
        "index": 16,
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "predicted": "select max(capacity), avg(avg(avg(amount) from stadium",
        "gold": "select max(capacity), average from stadium",
        "db_id": "concert_singer"
      },
      {
        "index": 17,
        "question": "What is the average and maximum capacities for all stadiums ?",
        "predicted": "select avg(capacity), max(capacity) from stadium",
        "gold": "select avg(capacity) ,  max(capacity) from stadium",
        "db_id": "concert_singer"
      },
      {
        "index": 18,
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "predicted": "select name, capacity from stadium order by avg(average_attendance) desc limit 1",
        "gold": "select name ,  capacity from stadium order by average desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 19,
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "predicted": "select name, capacity from stadium order by avg(attendance) desc limit 1",
        "gold": "select name ,  capacity from stadium order by average desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 22,
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "predicted": "select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "gold": "select t2.name ,  count(*) from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id group by t1.stadium_id",
        "db_id": "concert_singer"
      },
      {
        "index": 23,
        "question": "For each stadium, how many concerts play there?",
        "predicted": "select t2.name, count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id",
        "gold": "select t2.name ,  count(*) from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id group by t1.stadium_id",
        "db_id": "concert_singer"
      },
      {
        "index": 24,
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "predicted": "select t2.name, t1.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year >= 2014 group by t1.stadium_id order by count(*) desc limit 1",
        "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >=  2014 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 25,
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "predicted": "select t1.name, t1.capacity from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year > 2014 group by t1.stadium_id order by count(*) desc limit 1",
        "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "db_id": "concert_singer"
      },
      {
        "index": 30,
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "predicted": "select country from singer where age > 40 intersect select country from singer where age  30",
        "gold": "select country from singer where age  >  40 intersect select country from singer where age  <  30",
        "db_id": "concert_singer"
      },
      {
        "index": 32,
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "predicted": "select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.club_id where t1.year = 2014",
        "gold": "select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014",
        "db_id": "concert_singer"
      },
      {
        "index": 33,
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "predicted": "select t2.name, t2.theme, count(*) from singer_in_council as t1 join concert as t2 on t1.konzert_id = t2.konzert_id group by t1.konzert_id",
        "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "db_id": "concert_singer"
      },
      {
        "index": 34,
        "question": "What are the names , themes , and number of singers for every concert ?",
        "predicted": "select t1.name, t1.theme, count(*) from singer as t1 join concert as t2 on t1.songid = t2.songid group by t1.songid",
        "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "db_id": "concert_singer"
      },
      {
        "index": 35,
        "question": "List singer names and number of concerts for each singer.",
        "predicted": "select t1.name, count(*) from singer as t1 join concert as t2 on t1.songid = t2.songid group by t1.songid",
        "gold": "select t2.name ,  count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id group by t2.singer_id",
        "db_id": "concert_singer"
      },
      {
        "index": 36,
        "question": "What are the names of the singers and number of concerts for each person?",
        "predicted": "select t2.name, count(*) from singer_in_council as t1 join singer as t2 on t1.songid = t2.songid group by t1.songid",
        "gold": "select t2.name ,  count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id group by t2.singer_id",
        "db_id": "concert_singer"
      },
      {
        "index": 37,
        "question": "List all singer names in concerts in year 2014.",
        "predicted": "select t1.name from singer as t1 join concert as t2 on t1.songid = t2.songid where t2.year = 2014",
        "gold": "select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id join concert as t3 on t1.concert_id  =  t3.concert_id where t3.year  =  2014",
        "db_id": "concert_singer"
      },
      {
        "index": 38,
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "predicted": "select t2.name from concert as t1 join singer as t2 on t1.songid = t2.songid where t1.year = 2014",
        "gold": "select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id join concert as t3 on t1.concert_id  =  t3.concert_id where t3.year  =  2014",
        "db_id": "concert_singer"
      },
      {
        "index": 39,
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "predicted": "select name, country from singer where song like \"%hey%\"",
        "gold": "select name ,  country from singer where song_name like '%hey%'",
        "db_id": "concert_singer"
      },
      {
        "index": 40,
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "predicted": "select name, country from singer where song like \"%hey%\"",
        "gold": "select name ,  country from singer where song_name like '%hey%'",
        "db_id": "concert_singer"
      },
      {
        "index": 41,
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "predicted": "select t1.name, t2.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2014 intersect select t1.name, t1.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2015",
        "gold": "select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014 intersect select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2015",
        "db_id": "concert_singer"
      },
      {
        "index": 42,
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "predicted": "select t1.name, t2.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2014 intersect select t1.name, t1.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2015",
        "gold": "select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014 intersect select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2015",
        "db_id": "concert_singer"
      },
      {
        "index": 43,
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "predicted": "select count(*) from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id order by t2.capacity desc limit 1",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "db_id": "concert_singer"
      },
      {
        "index": 44,
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "predicted": "select count(*) from stadium order by capacity desc limit 1",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "db_id": "concert_singer"
      },
      {
        "index": 47,
        "question": "Find the weight of the youngest dog.",
        "predicted": "select weight from pets order by age limit 1",
        "gold": "select weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 48,
        "question": "How much does the youngest dog weigh?",
        "predicted": "select count(*) from pets where pet_name = \"dog\" and age = (select min(age) from pets)",
        "gold": "select weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 49,
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "predicted": "select pets, max(weight), pet_type from pets group by pets",
        "gold": "select max(weight) ,  pettype from pets group by pettype",
        "db_id": "pets_1"
      },
      {
        "index": 50,
        "question": "List the maximum weight and type for each type of pet.",
        "predicted": "select pets, max(weight), pet_type from pets group by pets",
        "gold": "select max(weight) ,  pettype from pets group by pettype",
        "db_id": "pets_1"
      },
      {
        "index": 51,
        "question": "Find number of pets owned by students who are older than 20.",
        "predicted": "select count(*) from pets as t1 join has_phone as t2 on t1.phone_id = t2.phone_id where t2.age > 20",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.age  >  20",
        "db_id": "pets_1"
      },
      {
        "index": 52,
        "question": "How many pets are owned by students that have an age greater than 20?",
        "predicted": "select count(*) from pets where age > 20",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.age  >  20",
        "db_id": "pets_1"
      },
      {
        "index": 53,
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "predicted": "select count(*) from pets as t1 join has_phone as t2 on t1.phone_id = t2.phone_id where t2.sex = \"f\"",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t2.petid  =  t3.petid where t1.sex  =  'f' and t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 54,
        "question": "How many dog pets are raised by female students?",
        "predicted": "select count(*) from pets where t2.sex = \"f\"",
        "gold": "select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t2.petid  =  t3.petid where t1.sex  =  'f' and t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 55,
        "question": "Find the number of distinct type of pets.",
        "predicted": "select count(*) from pets",
        "gold": "select count(distinct pettype) from pets",
        "db_id": "pets_1"
      },
      {
        "index": 56,
        "question": "How many different types of pet are there?",
        "predicted": "select count(distinct pet_type) from pets",
        "gold": "select count(distinct pettype) from pets",
        "db_id": "pets_1"
      },
      {
        "index": 57,
        "question": "Find the first name of students who have cat or dog pet.",
        "predicted": "select distinct t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" or t2.phone = \"dog\"",
        "gold": "select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' or t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 58,
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "predicted": "select distinct t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" or t2.phone = \"horses\"",
        "gold": "select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' or t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 59,
        "question": "Find the first name of students who have both cat and dog pets .",
        "predicted": "select t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" intersect select t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"dog\"",
        "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 60,
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "predicted": "select t1.fname from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"cat\" intersect select t1.fname from student as t1 join has_horses as t2 on t1.stuid = t2.stuid where t2.horses = \"horses\"",
        "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'",
        "db_id": "pets_1"
      },
      {
        "index": 61,
        "question": "Find the major and age of students who do not have a cat pet.",
        "predicted": "select major, age from student where stuid not in (select stuid from has_horses where pet_type = \"cat\")",
        "gold": "select major ,  age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 62,
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "predicted": "select major, age from student where stuid not in (select stuid from has_pid where petid = \"cat\")",
        "gold": "select major ,  age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 63,
        "question": "Find the id of students who do not have a cat pet.",
        "predicted": "select stuid from student except select stuid from has_phone where pets = \"cat\"",
        "gold": "select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 64,
        "question": "What are the ids of the students who do not own cats as pets?",
        "predicted": "select stuid from student except select stuid from has_horses",
        "gold": "select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 65,
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "predicted": "select fname, age from student where stuid not in (select stuid from has_phone)",
        "gold": "select t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 66,
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "predicted": "select fname from student where stuid in (select stuid from has_ pet where pets = \"dog\") except select stuid from has_cat\")",
        "gold": "select t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat')",
        "db_id": "pets_1"
      },
      {
        "index": 67,
        "question": "Find the type and weight of the youngest pet.",
        "predicted": "select pet_type, weight from pets order by age limit 1",
        "gold": "select pettype ,  weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 68,
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "predicted": "select pets, count(*) from pets where age = ( select min(age) from pets )",
        "gold": "select pettype ,  weight from pets order by pet_age limit 1",
        "db_id": "pets_1"
      },
      {
        "index": 69,
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "predicted": "select pets_id, weight from pets where age > 1",
        "gold": "select petid ,  weight from pets where pet_age  >  1",
        "db_id": "pets_1"
      },
      {
        "index": 70,
        "question": "What is the id and weight of every pet who is older than 1?",
        "predicted": "select pet_id, weight from pets where age > 1",
        "gold": "select petid ,  weight from pets where pet_age  >  1",
        "db_id": "pets_1"
      },
      {
        "index": 71,
        "question": "Find the average and maximum age for each type of pet.",
        "predicted": "select pets, avg(age), max(age) from pets group by pets",
        "gold": "select avg(pet_age) ,  max(pet_age) ,  pettype from pets group by pettype",
        "db_id": "pets_1"
      },
      {
        "index": 72,
        "question": "What is the average and maximum age for each pet type?",
        "predicted": "select pets, avg(age), max(age) from pets group by pets",
        "gold": "select avg(pet_age) ,  max(pet_age) ,  pettype from pets group by pettype",
        "db_id": "pets_1"
      },
      {
        "index": 73,
        "question": "Find the average weight for each pet type.",
        "predicted": "select pets, avg(weight) from pets group by pets",
        "gold": "select avg(weight) ,  pettype from pets group by pettype",
        "db_id": "pets_1"
      },
      {
        "index": 74,
        "question": "What is the average weight for each type of pet?",
        "predicted": "select pets, avg(weight) from pets group by pets",
        "gold": "select avg(weight) ,  pettype from pets group by pettype",
        "db_id": "pets_1"
      },
      {
        "index": 75,
        "question": "Find the first name and age of students who have a pet.",
        "predicted": "select distinct t1.fname, t1.age from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.phone = \"phone\"",
        "gold": "select distinct t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 76,
        "question": "What are the different first names and ages of the students who do have pets?",
        "predicted": "select distinct t1.fname, t1.age from student as t1 join has_phone as t2 on t1.stuid = t2.stuid where t2.pid = \" pets\"",
        "gold": "select distinct t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 77,
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "predicted": "select pet_id from has_phone where lname = 'smith'",
        "gold": "select t2.petid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.lname  =  'smith'",
        "db_id": "pets_1"
      },
      {
        "index": 78,
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "predicted": "select pet_id from has_phone where lname = 'smith'",
        "gold": "select t2.petid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.lname  =  'smith'",
        "db_id": "pets_1"
      },
      {
        "index": 79,
        "question": "Find the number of pets for each student who has any pet and student id.",
        "predicted": "select count(*), t1.stuid from student as t1 join has_phone as t2 on t1.stuid = t2.stuid group by t1.stuid",
        "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 80,
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "predicted": "select stuid, count(*) from has_phone group by stuid",
        "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "db_id": "pets_1"
      },
      {
        "index": 81,
        "question": "Find the first name and gender of student who have more than one pet.",
        "predicted": "select t1.fname, t1.sex from student as t1 join has_phone as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "gold": "select t1.fname ,  t1.sex from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid having count(*)  >  1",
        "db_id": "pets_1"
      },
      {
        "index": 82,
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "predicted": "select t1.fname, t1.sex from student as t1 join has_phone as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1",
        "gold": "select t1.fname ,  t1.sex from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid having count(*)  >  1",
        "db_id": "pets_1"
      },
      {
        "index": 83,
        "question": "Find the last name of the student who has a cat that is age 3.",
        "predicted": "select lname from student where age = 3 and stuid = 1",
        "gold": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pet_age  =  3 and t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 84,
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "predicted": "select lname from student where age = 3 and stuid = 1",
        "gold": "select t1.lname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pet_age  =  3 and t3.pettype  =  'cat'",
        "db_id": "pets_1"
      },
      {
        "index": 85,
        "question": "Find the average age of students who do not have any pet .",
        "predicted": "select avg(age) from student where stuid not in ( select stuid from has_pilot )",
        "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "db_id": "pets_1"
      },
      {
        "index": 86,
        "question": "What is the average age for all students who do not own any pets ?",
        "predicted": "select avg(age) from student where stuid not in ( select stuid from has_piad)",
        "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)",
        "db_id": "pets_1"
      },
      {
        "index": 87,
        "question": "How many continents are there?",
        "predicted": "select count(*) from continents",
        "gold": "select count(*) from continents;",
        "db_id": "car_1"
      },
      {
        "index": 88,
        "question": "What is the number of continents?",
        "predicted": "select count(*) from continents",
        "gold": "select count(*) from continents;",
        "db_id": "car_1"
      },
      {
        "index": 89,
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "predicted": "select t1.country, t1.country_name, count(*) from continents as t1 join countries as t2 on t1.country_id = t2.country_id group by t1.country_id",
        "gold": "select t1.contid ,  t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent group by t1.contid;",
        "db_id": "car_1"
      },
      {
        "index": 90,
        "question": "For each continent, list its id, name, and how many countries it has?",
        "predicted": "select t1. continent, t1.country, count(*) from continents as t1 join country as t2 on t1.country_id = t2.country_id group by t1.country_id",
        "gold": "select t1.contid ,  t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent group by t1.contid;",
        "db_id": "car_1"
      },
      {
        "index": 91,
        "question": "How many countries are listed?",
        "predicted": "select count(*) from countries",
        "gold": "select count(*) from countries;",
        "db_id": "car_1"
      },
      {
        "index": 92,
        "question": "How many countries exist?",
        "predicted": "select count(*) from countries",
        "gold": "select count(*) from countries;",
        "db_id": "car_1"
      },
      {
        "index": 93,
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "predicted": "select t1.fname, t1.fname, count(*) from car_makers as t1 join cars as t2 on t1.machine_id = t2.machine_id group by t1.machine_id",
        "gold": "select t1.fullname ,  t1.id ,  count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id;",
        "db_id": "car_1"
      },
      {
        "index": 94,
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "predicted": "select t1.fname, t1.fname, count(*) from car_makers as t1 join model_model as t2 on t1.machine_id = t2.machine_id group by t1.manufacturer_id",
        "gold": "select t1.fullname ,  t1.id ,  count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id;",
        "db_id": "car_1"
      },
      {
        "index": 95,
        "question": "Which model of the car has the minimum horsepower?",
        "predicted": "select model from cars_data order by horsepower limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 96,
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "predicted": "select model from cars_data order by horsepower limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.horsepower asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 97,
        "question": "Find the model of the car whose weight is below the average weight.",
        "predicted": "select model from cars where weight  (select avg(weight) from cars)",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.weight  <  (select avg(weight) from cars_data)",
        "db_id": "car_1"
      },
      {
        "index": 98,
        "question": "What is the model for the car with a weight smaller than the average?",
        "predicted": "select model from cars_data where weight  (select avg(weight) from cars)",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.weight  <  (select avg(weight) from cars_data)",
        "db_id": "car_1"
      },
      {
        "index": 99,
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "predicted": "select t1.machine_name from manufacturers as t1 join car_makers as t2 on t1.machine_id = t2.machine_id where t2.year = 1970",
        "gold": "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model join cars_data as t4 on t3.makeid  =  t4.id where t4.year  =  '1970';",
        "db_id": "car_1"
      },
      {
        "index": 100,
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "predicted": "select distinct t2.manufacturer from cars as t1 join car_makers as t2 on t1.model_id = t2.model_id where t1.year = 1970",
        "gold": "select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model join cars_data as t4 on t3.makeid  =  t4.id where t4.year  =  '1970';",
        "db_id": "car_1"
      },
      {
        "index": 101,
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "predicted": "select t1.make, t1.model_make from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id order by t2.accelerator_year asc limit 1",
        "gold": "select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);",
        "db_id": "car_1"
      },
      {
        "index": 102,
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "predicted": "select t1.manufacturer, t1.year from manufacturers as t1 join cars_data as t2 on t1.id = t2.machine_id order by t2.accelerator_year asc limit 1",
        "gold": "select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);",
        "db_id": "car_1"
      },
      {
        "index": 103,
        "question": "Which distinct car models are the produced after 1980?",
        "predicted": "select distinct model_model from cars_data where year > 1980",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id where t3.year  >  1980;",
        "db_id": "car_1"
      },
      {
        "index": 104,
        "question": "What are the different models for the cards produced after 1980?",
        "predicted": "select distinct model from model_list where year > 1980",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id where t3.year  >  1980;",
        "db_id": "car_1"
      },
      {
        "index": 105,
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "predicted": "select t1.country_name, count(*) from countries as t1 join carriers as t2 on t1.country_id = t2.country group by t1.country_name",
        "gold": "select t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent join car_makers as t3 on t2.countryid  =  t3.country group by t1.continent;",
        "db_id": "car_1"
      },
      {
        "index": 106,
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "predicted": "select t1.country_name, count(*) from continents as t1 join car_mades as t2 on t1.country_id = t2.country group by t1. continent",
        "gold": "select t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent join car_makers as t3 on t2.countryid  =  t3.country group by t1.continent;",
        "db_id": "car_1"
      },
      {
        "index": 107,
        "question": "Which of the countries has the most car makers? List the country name.",
        "predicted": "select t1.country_name from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_name order by count(*) desc limit 1",
        "gold": "select t2.countryname from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid group by t1.country order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 108,
        "question": "What is the name of the country with the most car makers?",
        "predicted": "select t1.country_name from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_name order by count(*) desc limit 1",
        "gold": "select t2.countryname from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid group by t1.country order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 109,
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "predicted": "select count(*), t1.fname from models as t1 join car_factories as t2 on t1.model_id = t2.model_id group by t1.manufacturer_id",
        "gold": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "db_id": "car_1"
      },
      {
        "index": 110,
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "predicted": "select count(*), t1.fname, t1.fname from models as t1 join car_factories as t2 on t1.model_id = t2.model_id group by t1.manufacturer_id",
        "gold": "select count(*) ,  t2.fullname ,  t2.id from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "db_id": "car_1"
      },
      {
        "index": 111,
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "predicted": "select t1.accelerator from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.machine_name = \"acquired\" and t1.machine_name = \"sw\"",
        "gold": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.make  =  'amc hornet sportabout (sw)';",
        "db_id": "car_1"
      },
      {
        "index": 112,
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "predicted": "select sum(t1.weight) from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.model = 'acquired' and t2.weight = (select sportname from cars_data as t1 join cars as t2 on t1.machine_id = t2.machine_id where t1.machine = 'abrait sportabout')",
        "gold": "select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.make  =  'amc hornet sportabout (sw)';",
        "db_id": "car_1"
      },
      {
        "index": 113,
        "question": "How many car makers are there in france?",
        "predicted": "select count(*) from car_factories",
        "gold": "select count(*) from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid where t2.countryname  =  'france';",
        "db_id": "car_1"
      },
      {
        "index": 114,
        "question": "What is the number of makers of care in France?",
        "predicted": "select count(*) from car_frances as t1 join countries as t2 on t1.country_id = t2.country_id where t1.country = \"france\"",
        "gold": "select count(*) from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid where t2.countryname  =  'france';",
        "db_id": "car_1"
      },
      {
        "index": 115,
        "question": "How many car models are produced in the usa?",
        "predicted": "select count(*) from car_types",
        "gold": "select count(*) from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id join countries as t3 on t2.country  =  t3.countryid where t3.countryname  =  'usa';",
        "db_id": "car_1"
      },
      {
        "index": 116,
        "question": "What is the count of the car models produced in the United States?",
        "predicted": "select count(*) from car_players where country = \"united states\"",
        "gold": "select count(*) from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id join countries as t3 on t2.country  =  t3.countryid where t3.countryname  =  'usa';",
        "db_id": "car_1"
      },
      {
        "index": 117,
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "predicted": "select avg(miles_per_year) from cars_data where cylinders = 4",
        "gold": "select avg(mpg) from cars_data where cylinders  =  4;",
        "db_id": "car_1"
      },
      {
        "index": 118,
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "predicted": "select avg(miles_per_year) from cars_data where cylinders = 4",
        "gold": "select avg(mpg) from cars_data where cylinders  =  4;",
        "db_id": "car_1"
      },
      {
        "index": 119,
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "predicted": "select min(weight) from cars_data where hire_year = 1974",
        "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "db_id": "car_1"
      },
      {
        "index": 120,
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "predicted": "select min(weight) from cars_data where year = 1974",
        "gold": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "db_id": "car_1"
      },
      {
        "index": 121,
        "question": "What are all the makers and models?",
        "predicted": "select t1.manufacturer, t1.model_model from car_makers as t1 join model_model as t2 on t1.model_id = t2.model_id",
        "gold": "select maker ,  model from model_list;",
        "db_id": "car_1"
      },
      {
        "index": 122,
        "question": "What are the makers and models?",
        "predicted": "select t1.machine, t1.model_model from car_makers as t1 join model_model as t2 on t1.model_id = t2.model_id",
        "gold": "select maker ,  model from model_list;",
        "db_id": "car_1"
      },
      {
        "index": 123,
        "question": "What are the countries having at least one car maker? List name and id.",
        "predicted": "select t1.country, t1.country from countries as t1 join car_factories as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) >= 1",
        "gold": "select t1.countryname ,  t1.countryid from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >=  1;",
        "db_id": "car_1"
      },
      {
        "index": 124,
        "question": "What are the names and ids of all countries with at least one car maker?",
        "predicted": "select t1.country, t1.country_id from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) >= 1",
        "gold": "select t1.countryname ,  t1.countryid from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >=  1;",
        "db_id": "car_1"
      },
      {
        "index": 125,
        "question": "What is the number of the cars with horsepower more than 150?",
        "predicted": "select count(*) from cars_data where horsepower > 150",
        "gold": "select count(*) from cars_data where horsepower  >  150;",
        "db_id": "car_1"
      },
      {
        "index": 126,
        "question": "What is the number of cars with a horsepower greater than 150?",
        "predicted": "select count(*) from cars_data where horsepower > 150",
        "gold": "select count(*) from cars_data where horsepower  >  150;",
        "db_id": "car_1"
      },
      {
        "index": 127,
        "question": "What is the average weight of cars each year?",
        "predicted": "select avg(weight), year from cars group by year",
        "gold": "select avg(weight) ,  year from cars_data group by year;",
        "db_id": "car_1"
      },
      {
        "index": 128,
        "question": "What is the average weight and year for each year?",
        "predicted": "select avg(weight), avg(year), year from vehicles group by year",
        "gold": "select avg(weight) ,  year from cars_data group by year;",
        "db_id": "car_1"
      },
      {
        "index": 129,
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "predicted": "select t1.country from countries as t1 join car_makers as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) >= 3",
        "gold": "select t1.countryname from countries as t1 join continents as t2 on t1.continent  =  t2.contid join car_makers as t3 on t1.countryid  =  t3.country where t2.continent  =  'europe' group by t1.countryname having count(*)  >=  3;",
        "db_id": "car_1"
      },
      {
        "index": 130,
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "predicted": "select t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id where t1.country = \"europea\" group by t1.country_name having count(*) >= 3",
        "gold": "select t1.countryname from countries as t1 join continents as t2 on t1.continent  =  t2.contid join car_makers as t3 on t1.countryid  =  t3.country where t2.continent  =  'europe' group by t1.countryname having count(*)  >=  3;",
        "db_id": "car_1"
      },
      {
        "index": 131,
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "predicted": "select max(t1.machine), max(t1.machine_make) from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.cylinders = 3",
        "gold": "select t2.horsepower ,  t1.make from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 132,
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "predicted": "select max(t1.supplier), t1.model_make from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.number = 3",
        "gold": "select t2.horsepower ,  t1.make from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  3 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 133,
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "predicted": "select model_name from cars_data order by horsepower desc limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 134,
        "question": "What is the car model with the highest mpg ?",
        "predicted": "select model_name from cars order by horsepower desc limit 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 135,
        "question": "What is the average horsepower of the cars before 1980?",
        "predicted": "select avg(traints) from cars_data where accelerate_year  1980",
        "gold": "select avg(horsepower) from cars_data where year  <  1980;",
        "db_id": "car_1"
      },
      {
        "index": 136,
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "predicted": "select avg(traints) from cars_data where year  1980",
        "gold": "select avg(horsepower) from cars_data where year  <  1980;",
        "db_id": "car_1"
      },
      {
        "index": 137,
        "question": "What is the average edispl of the cars of model volvo?",
        "predicted": "select avg(t1.edisplled) from cars_data as t1 join models as t2 on t1.model_id = t2.model_id where t2.model = 'volvo'",
        "gold": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t1.model  =  'volvo';",
        "db_id": "car_1"
      },
      {
        "index": 138,
        "question": "What is the average edispl for all volvos?",
        "predicted": "select avg(edisplish) from cars_data",
        "gold": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t1.model  =  'volvo';",
        "db_id": "car_1"
      },
      {
        "index": 139,
        "question": "What is the maximum accelerate for different number of cylinders?",
        "predicted": "select max(accelerator), count(*) from cars_data group by count(*)",
        "gold": "select max(accelerate) ,  cylinders from cars_data group by cylinders;",
        "db_id": "car_1"
      },
      {
        "index": 140,
        "question": "What is the maximum accelerate for all the different cylinders?",
        "predicted": "select max(accelerator), cycles from cars_data group by cycles",
        "gold": "select max(accelerate) ,  cylinders from cars_data group by cylinders;",
        "db_id": "car_1"
      },
      {
        "index": 141,
        "question": "Which model has the most version(make) of cars?",
        "predicted": "select model_name from cars_data order by count(*) desc limit 1",
        "gold": "select model from car_names group by model order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 142,
        "question": "What model has the most different versions?",
        "predicted": "select model_name from model_lists group by model_name order by count(distinct model_id) desc limit 1",
        "gold": "select model from car_names group by model order by count(*) desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 143,
        "question": "How many cars have more than 4 cylinders?",
        "predicted": "select count(*) from cars_data where horsepower > 4",
        "gold": "select count(*) from cars_data where cylinders  >  4;",
        "db_id": "car_1"
      },
      {
        "index": 144,
        "question": "What is the number of cars with more than 4 cylinders?",
        "predicted": "select count(*) from cars_data where horsepower > 4",
        "gold": "select count(*) from cars_data where cylinders  >  4;",
        "db_id": "car_1"
      },
      {
        "index": 145,
        "question": "how many cars were produced in 1980?",
        "predicted": "select count(*) from cars where year = 1980",
        "gold": "select count(*) from cars_data where year  =  1980;",
        "db_id": "car_1"
      },
      {
        "index": 146,
        "question": "In 1980, how many cars were made?",
        "predicted": "select count(*) from cars_data where model_make = 1980",
        "gold": "select count(*) from cars_data where year  =  1980;",
        "db_id": "car_1"
      },
      {
        "index": 147,
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "predicted": "select count(*) from car_makers as t1 join carriers as t2 on t1.machine_id = t2.machine_id where t2.fname = \"american motor company\"",
        "gold": "select count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker where t1.fullname  =  'american motor company';",
        "db_id": "car_1"
      },
      {
        "index": 148,
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "predicted": "select count(*) from car_factories as t1 join carriers as t2 on t1.machine_id = t2.machine_id where t2.maker = \"american motor company\"",
        "gold": "select count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker where t1.fullname  =  'american motor company';",
        "db_id": "car_1"
      },
      {
        "index": 149,
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "predicted": "select t1.fname, t1.fname, t1.machine_id from car_makers as t1 join cars as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) > 3",
        "gold": "select t1.fullname ,  t1.id from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 150,
        "question": "What are the names and ids of all makers with more than 3 models?",
        "predicted": "select t1.fname, t1.facid from car_makers as t1 join model_company as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) > 3",
        "gold": "select t1.fullname ,  t1.id from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 151,
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "predicted": "select distinct t1.model from model_model as t1 join manufacturers as t2 on t1.manufacturer = t2.id where t2.full_name = \"general motors\" or t2.weight > 3500",
        "gold": "select distinct t2.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model join car_makers as t3 on t2.maker  =  t3.id join cars_data as t4 on t1.makeid  =  t4.id where t3.fullname  =  'general motors' or t4.weight  >  3500;",
        "db_id": "car_1"
      },
      {
        "index": 152,
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "predicted": "select distinct t1.model from model_list as t1 join models as t2 on t1.model_id = t2.model_id where t2.name = \"general motors\" or t2.weight > 3500",
        "gold": "select distinct t2.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model join car_makers as t3 on t2.maker  =  t3.id join cars_data as t4 on t1.makeid  =  t4.id where t3.fullname  =  'general motors' or t4.weight  >  3500;",
        "db_id": "car_1"
      },
      {
        "index": 153,
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "predicted": "select distinct year from cars_data where weight  3000 and weight  4000",
        "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
        "db_id": "car_1"
      },
      {
        "index": 154,
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "predicted": "select distinct year from cars_data where weight  4000 intersect select distinct year from cars_data where weight > 3000",
        "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
        "db_id": "car_1"
      },
      {
        "index": 155,
        "question": "What is the horsepower of the car with the largest accelerate?",
        "predicted": "select horsepower from cars_data order by accelerate_year desc limit 1",
        "gold": "select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 156,
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "predicted": "select horsepower from cars_data order by accelerate_year desc limit 1",
        "gold": "select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 157,
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "predicted": "select count(*) from cars_data where model_id = (select model_id from cars_data order by accelerate_year asc limit 1)",
        "gold": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 158,
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "predicted": "select count(*) from cars_data where model = (select model_id from cars_data group by model_id order by count(*) asc limit 1)",
        "gold": "select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 159,
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "predicted": "select count(*) from cars_data where speed > (select max(speed) from cars_data)",
        "gold": "select count(*) from cars_data where accelerate  >  ( select accelerate from cars_data order by horsepower desc limit 1 );",
        "db_id": "car_1"
      },
      {
        "index": 160,
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "predicted": "select count(*) from cars_data where speed > (select max(speed) from cars_data order by horsepower desc limit 1)",
        "gold": "select count(*) from cars_data where accelerate  >  ( select accelerate from cars_data order by horsepower desc limit 1 );",
        "db_id": "car_1"
      },
      {
        "index": 161,
        "question": "How many countries has more than 2 car makers ?",
        "predicted": "select count(*) from manufacturers group by country having count(*) > 2",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "db_id": "car_1"
      },
      {
        "index": 162,
        "question": "What is the number of countries with more than 2 car makers ?",
        "predicted": "select count(*) from countries where count(*) > 2",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "db_id": "car_1"
      },
      {
        "index": 163,
        "question": "How many cars has over 6 cylinders?",
        "predicted": "select count(*) from cars_data where horsepower > 6",
        "gold": "select count(*) from cars_data where cylinders  >  6;",
        "db_id": "car_1"
      },
      {
        "index": 164,
        "question": "What is the number of carsw ith over 6 cylinders?",
        "predicted": "select count(*) from cars where horsepower > 6",
        "gold": "select count(*) from cars_data where cylinders  >  6;",
        "db_id": "car_1"
      },
      {
        "index": 165,
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "predicted": "select model_name from cars_data where horsepower = 4",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 166,
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "predicted": "select model_name from cars_data order by horsepower desc limit 4",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  4 order by t2.horsepower desc limit 1;",
        "db_id": "car_1"
      },
      {
        "index": 167,
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "predicted": "select distinct t1.driver, t1.make_name from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t1.mpg > 3",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <=  3;",
        "db_id": "car_1"
      },
      {
        "index": 168,
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "predicted": "select t1.machine_id, t1.make_name from cars as t1 join cars_data as t2 on t1.machine_id = t2.machine_id where t1.supplier!= 4",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "db_id": "car_1"
      },
      {
        "index": 169,
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "predicted": "select max(t1.miles_per_year) from cars as t1 join cars_data as t2 on t1.id = t2.driver_id where t2.number = \"8\" or t2.year  1980",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "db_id": "car_1"
      },
      {
        "index": 170,
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "predicted": "select max(t1.mpg) from cars as t1 join cars_data as t2 on t1.model_id = t2.model_id where t2.machine_year  1980",
        "gold": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "db_id": "car_1"
      },
      {
        "index": 171,
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "predicted": "select model_name from models where weight  3500 except select model_name from model_company where built_name = 'ford motor company'",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id join car_makers as t4 on t1.maker  =  t4.id where t3.weight  <  3500 and t4.fullname != 'ford motor company';",
        "db_id": "car_1"
      },
      {
        "index": 172,
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "predicted": "select distinct model_model from model_list where weight  3500 except select distinct model_model from model_company where manufacturer_name = \"for ford motor company\"",
        "gold": "select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id join car_makers as t4 on t1.maker  =  t4.id where t3.weight  <  3500 and t4.fullname != 'ford motor company';",
        "db_id": "car_1"
      },
      {
        "index": 173,
        "question": "What are the name of the countries where there is not a single car maker?",
        "predicted": "select country_name from countries where country_id not in (select country_id from car_factories)",
        "gold": "select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country;",
        "db_id": "car_1"
      },
      {
        "index": 174,
        "question": "What are the names of the countries with no car makers?",
        "predicted": "select country_name from countries except select t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id",
        "gold": "select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country;",
        "db_id": "car_1"
      },
      {
        "index": 175,
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "predicted": "select t1.manufacturer_id from car_suppliers as t1 join car_factories as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) >= 2 intersect select t1.machine_id, t1.machine_make from car_suppliers as t1 join car_suppliers as t2 on t1.model_id = t2.model_id group by t1.manufacturer_id having count(*) > 3",
        "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 176,
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "predicted": "select t1.machine_id, t1.machine_make from car_makers as t1 join cars as t2 on t1.machine_id = t2.machine_id group by t1.machine_id having count(*) >= 2 intersect select t1.machine_id, t1.machine_make from car_makers as t1 join cars as t2 on t1.model_id = t2.model_id group by t1.machine_model having count(*) > 3",
        "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "db_id": "car_1"
      },
      {
        "index": 177,
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "predicted": "select t1.country, t1.country_name from countries as t1 join car_factories as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) > 3 union select t1.country_id, t1.country_name from countries as t1 join car_factories as t2 on t1.country_id = t2.country_id join model_name from countries as t3 on t2.country = t3.country_id where t3.model = 'fiat'",
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "db_id": "car_1"
      },
      {
        "index": 178,
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "predicted": "select t1.country_id, t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id group by t1.country_id having count(*) > 3 union select t1.country_id, t1.country_name from countries as t1 join carriers as t2 on t1.country_id = t2.country_id group by t1.id having count(*) > 3",
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "db_id": "car_1"
      },
      {
        "index": 179,
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "predicted": "select country from airlines as t1 join airports as t2 on t1.alid = t2.alid where t1.name = \"airline\" and t1.alid = \"blue airways\"",
        "gold": "select country from airlines where airline  =  \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 180,
        "question": "What country is Jetblue Airways affiliated with?",
        "predicted": "select t1.country from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"jilblue airways\"",
        "gold": "select country from airlines where airline  =  \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 182,
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "predicted": "select abbreviation from airlines where airline = \"jilblue airways\"",
        "gold": "select abbreviation from airlines where airline  =  \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 183,
        "question": "List all airline names and their abbreviations in \"USA\".",
        "predicted": "select airline_name, abbreviation from airlines where country = \"usa\"",
        "gold": "select airline ,  abbreviation from airlines where country  =  \"usa\"",
        "db_id": "flight_2"
      },
      {
        "index": 184,
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "predicted": "select airline_name, abbreviation from airlines where country = 'usa'",
        "gold": "select airline ,  abbreviation from airlines where country  =  \"usa\"",
        "db_id": "flight_2"
      },
      {
        "index": 185,
        "question": "List the airport code and name in the city of Anthony.",
        "predicted": "select city_apid, airport_name from airports where city = \"anonymous\"",
        "gold": "select airportcode ,  airportname from airports where city  =  \"anthony\"",
        "db_id": "flight_2"
      },
      {
        "index": 186,
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "predicted": "select city_apid, airport_name from airports where city = \"anonymous\"",
        "gold": "select airportcode ,  airportname from airports where city  =  \"anthony\"",
        "db_id": "flight_2"
      },
      {
        "index": 193,
        "question": "Which airline has abbreviation 'UAL'?",
        "predicted": "select airline from airlines where abbreviation = 'ual'",
        "gold": "select airline from airlines where abbreviation  =  \"ual\"",
        "db_id": "flight_2"
      },
      {
        "index": 194,
        "question": "Give the airline with abbreviation 'UAL'.",
        "predicted": "select airline from airlines where abbreviation = 'ual'",
        "gold": "select airline from airlines where abbreviation  =  \"ual\"",
        "db_id": "flight_2"
      },
      {
        "index": 195,
        "question": "How many airlines are from USA?",
        "predicted": "select count(*) from airlines where country = 'usa'",
        "gold": "select count(*) from airlines where country  =  \"usa\"",
        "db_id": "flight_2"
      },
      {
        "index": 196,
        "question": "Return the number of airlines in the USA.",
        "predicted": "select count(*) from airlines where country = 'usa'",
        "gold": "select count(*) from airlines where country  =  \"usa\"",
        "db_id": "flight_2"
      },
      {
        "index": 197,
        "question": "Which city and country is the Alton airport at?",
        "predicted": "select city, country from airports where city = \"a alton\"",
        "gold": "select city ,  country from airports where airportname  =  \"alton\"",
        "db_id": "flight_2"
      },
      {
        "index": 198,
        "question": "Give the city and country for the Alton airport.",
        "predicted": "select city, country from airports where city = \"a alton\"",
        "gold": "select city ,  country from airports where airportname  =  \"alton\"",
        "db_id": "flight_2"
      },
      {
        "index": 199,
        "question": "What is the airport name for airport 'AKO'?",
        "predicted": "select airport_name from airports where airport_name = \"ako\"",
        "gold": "select airportname from airports where airportcode  =  \"ako\"",
        "db_id": "flight_2"
      },
      {
        "index": 200,
        "question": "Return the name of the airport with code 'AKO'.",
        "predicted": "select airport_name from airports where airport_code = 'ako'",
        "gold": "select airportname from airports where airportcode  =  \"ako\"",
        "db_id": "flight_2"
      },
      {
        "index": 201,
        "question": "What are airport names at City 'Aberdeen'?",
        "predicted": "select airport_name from airports where city = 'aberdeen'",
        "gold": "select airportname from airports where city = \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 202,
        "question": "What are the names of airports in Aberdeen?",
        "predicted": "select airport_name from airports where city = 'abern'",
        "gold": "select airportname from airports where city = \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 203,
        "question": "How many flights depart from 'APG'?",
        "predicted": "select count(*) from flights where origin_apid in (select apid from flights where destination = 'apg')",
        "gold": "select count(*) from flights where sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 204,
        "question": "Count the number of flights departing from 'APG'.",
        "predicted": "select count(*) from flights where origin_apid in (select apid from flights where destination = 'apg')",
        "gold": "select count(*) from flights where sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 205,
        "question": "How many flights have destination ATO?",
        "predicted": "select count(*) from flights where destination = 'ato'",
        "gold": "select count(*) from flights where destairport  =  \"ato\"",
        "db_id": "flight_2"
      },
      {
        "index": 206,
        "question": "Count the number of flights into ATO.",
        "predicted": "select count(*) from flights where destination = 'ato'",
        "gold": "select count(*) from flights where destairport  =  \"ato\"",
        "db_id": "flight_2"
      },
      {
        "index": 207,
        "question": "How many flights depart from City Aberdeen?",
        "predicted": "select count(*) from flights where origin_apid in (select apid from airports where city = \"c aberdeen\")",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 208,
        "question": "Return the number of flights departing from Aberdeen.",
        "predicted": "select count(*) from flights where origin_apid in (select apid from airports where airport = \"aberna\")",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 209,
        "question": "How many flights arriving in Aberdeen city?",
        "predicted": "select count(*) from airports as t1 join flights as t2 on t1.apid = t2.dst_apid where t1.country = 'abern'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 210,
        "question": "Return the number of flights arriving in Aberdeen.",
        "predicted": "select count(*) from flights where destination = 'abern'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 211,
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "predicted": "select count(*) from flights where origin_city = 'aberdeen' and destination = 'ashley'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airports as t3 on t1.sourceairport  =  t3.airportcode where t2.city  =  \"ashley\" and t3.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 212,
        "question": "How many flights fly from Aberdeen to Ashley?",
        "predicted": "select count(*) from flights where dst_apid from airports where airport = \"aberna\" and destination = \"ashley\"",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airports as t3 on t1.sourceairport  =  t3.airportcode where t2.city  =  \"ashley\" and t3.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 213,
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"jetblue airways\"",
        "gold": "select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.uid where t2.airline = \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 214,
        "question": "Give the number of Jetblue Airways flights.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"jilblue airways\"",
        "gold": "select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.uid where t2.airline = \"jetblue airways\"",
        "db_id": "flight_2"
      },
      {
        "index": 215,
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid = 'asy')",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.destairport  =  \"asy\"",
        "db_id": "flight_2"
      },
      {
        "index": 216,
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.name from airlines as t1 join airports as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid in (select t1.alid from airlines as t3 on t1.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid in (select t1.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t1.apid in (select t1.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t1.apid from airlines as t3 join airports as t4 on t3.alid = t4.alid where t4.apid in (select t3.apid from airlines as t4 on t3.alid = t4.alid where t4.apid in (select t3.apid from airlines as t5 on t3.alid = t4.alid where t4.apid in (select t1.apid from airlines as t5 on t3.alid = t4.alid where t4.apid in (select",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.destairport  =  \"asy\"",
        "db_id": "flight_2"
      },
      {
        "index": 217,
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid from airlines as t1 join airlines as t3 on t1.alid = t3.alid where t1.alid = 'ahd'",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 218,
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid join airlines as t3 on t2.alid = t3.alid where t1.alid = 'ahd airport')",
        "gold": "select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 219,
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "predicted": "select count(*) from airlines where destination = 'aberdeen'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airlines as t3 on t3.uid  =  t1.airline where t2.city  =  \"aberdeen\" and t3.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 220,
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "predicted": "select count(*) from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.dst_apid = 'abern'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airlines as t3 on t3.uid  =  t1.airline where t2.city  =  \"aberdeen\" and t3.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 221,
        "question": "Which city has most number of arriving flights?",
        "predicted": "select t1.city from airports as t1 join flights as t2 on t1.apid = t2.apid group by t1.city order by count(*) desc limit 1",
        "gold": "select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 222,
        "question": "Which city has the most frequent destination airport?",
        "predicted": "select city from airports group by city order by count(*) desc limit 1",
        "gold": "select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 223,
        "question": "Which city has most number of departing flights?",
        "predicted": "select t1.city from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.city order by count(*) desc limit 1",
        "gold": "select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 224,
        "question": "Which city is the most frequent source airport?",
        "predicted": "select city from airports group by city order by count(*) desc limit 1",
        "gold": "select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport group by t1.city order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 225,
        "question": "What is the code of airport that has the highest number of flights?",
        "predicted": "select airport_code from flights group by airport_code order by count(*) desc limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 226,
        "question": "What is the airport code of the airport with the most flights?",
        "predicted": "select airport_code from flights group by airport_code order by count(*) desc limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 227,
        "question": "What is the code of airport that has fewest number of flights?",
        "predicted": "select airport_code from flights group by airport_code order by count(*) limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 228,
        "question": "Give the code of the airport with the least flights.",
        "predicted": "select airport_code from flights group by airport_code order by count(*) limit 1",
        "gold": "select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 229,
        "question": "Which airline has most number of flights?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 230,
        "question": "What airline serves the most flights?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) desc limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 231,
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "predicted": "select t1.amenation, t1.country from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name order by count(*) limit 1",
        "gold": "select t1.abbreviation ,  t1.country from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 232,
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "predicted": "select t1.amenation, t1.country from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.country order by count(*) limit 1",
        "gold": "select t1.abbreviation ,  t1.country from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) limit 1",
        "db_id": "flight_2"
      },
      {
        "index": 233,
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select apid from airlines where airport = 'ahd')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 234,
        "question": "Which airlines have a flight with source airport AHD?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.name from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.src_apid = t2.apid join airlines as t3 on t2.alid = t3.alid where t1.alid = \"ahd\"",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 235,
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid = 'ahd')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.destairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 236,
        "question": "Which airlines have a flight with destination airport AHD?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.dst_apid = t2.apid where t1.apid in (select apid from airlines where airport = 'ahd')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.destairport  =  \"ahd\"",
        "db_id": "flight_2"
      },
      {
        "index": 237,
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.alid from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.apid from airlines as t3 on t1.apid = t3.apid where t1.apid in (select t1.apid = 'cvo')",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\"",
        "db_id": "flight_2"
      },
      {
        "index": 238,
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.name from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.apid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.apid from airlines as t3 join flights as t4 on t3.alid = t4.alid where t3.apid in (select t1.apid in (select t1.apid from airlines as t3 join airports as t4 on t3.apid = t4.apid where t3.apid in (select t1.apid from airlines as t3 join airlines as t4 on t3.alid = t4.apid where t3.apid in (select t1.apid in (select t3.apid from airlines as t4 on t3.alid = t4.apid where t3.apid in (select t1.apid in (select t1.apid from airlines as t4 on t3.alid = t4.apid where t4.apid in (select t1.apid in (select t1.apid from airlines as t4 on t3.alid = t4.apid where t4.apid in (select t1.apid from airlines as t4 on t3.alid",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\"",
        "db_id": "flight_2"
      },
      {
        "index": 239,
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t2.dst_apid in (select t1.alid from airlines as t1 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.dst_apid = t3.apid where t1.apid in (select t1.alid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t3 join airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.apid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t3.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t4.apid in (select t3.alid from airlines as t4 on t3.alid = t4.alid where t4.apid in (select t3.alid from airlines as t4 on t3.alid =",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 240,
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.alid from airlines as t1 join airports as t2 on t1.alid = t2.alid where t1.alid = \"cvo\" except select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.apid in (select t1.apid from airlines as t3 join airports as t3 on t2.alid = t3.apid where t1.apid in (select t1.alid from airlines as t3 join airlines as t3 on t2.alid = t3.alid where t1.apid in (select t1.alid from airlines as t3 join airports as t3 on t2.alid = t3.alid where t1.alid = \"apg\")",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 241,
        "question": "Find all airlines that have at least 10 flights.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name having count(*) >= 10",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  >  10",
        "db_id": "flight_2"
      },
      {
        "index": 242,
        "question": "Which airlines have at least 10 flights?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name having count(*) >= 10",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  >  10",
        "db_id": "flight_2"
      },
      {
        "index": 243,
        "question": "Find all airlines that have fewer than 200 flights.",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name having count(*)  200",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  <  200",
        "db_id": "flight_2"
      },
      {
        "index": 244,
        "question": "Which airlines have less than 200 flights?",
        "predicted": "select t1.name from airlines as t1 join flights as t2 on t1.alid = t2.alid group by t1.name having count(*)  200",
        "gold": "select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  <  200",
        "db_id": "flight_2"
      },
      {
        "index": 245,
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "predicted": "select flno from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.name = \"airline\" and t1.alid = \"united airlines\"",
        "gold": "select t1.flightno from flights as t1 join airlines as t2 on t2.uid  =  t1.airline where t2.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 246,
        "question": "Which flight numbers correspond to United Airlines flights?",
        "predicted": "select flno from airlines as t1 join flights as t2 on t1.alid = t2.alid where t1.alid = \"united airlines\"",
        "gold": "select t1.flightno from flights as t1 join airlines as t2 on t2.uid  =  t1.airline where t2.airline  =  \"united airlines\"",
        "db_id": "flight_2"
      },
      {
        "index": 247,
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "predicted": "select flno from flights where dst_apid in (select apid from airports where airport_name = \"apg\")",
        "gold": "select flightno from flights where sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 248,
        "question": "Give the flight numbers of flights leaving from APG.",
        "predicted": "select flno from flights where origin_apid in (select apid from flights where origin_apid in (select apid from flights where destination = \"apg\")",
        "gold": "select flightno from flights where sourceairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 249,
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "predicted": "select t1.flno from flights as t1 join airports as t2 on t1.dst_apid = t2.apid where t2.apid in (select apid from airports as t1 join flights as t2 on t1.apid = t2.dst_apid where t1.apid in (select apid from airports where airport_name = \"apg\")",
        "gold": "select flightno from flights where destairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 250,
        "question": "Give the flight numbers of flights landing at APG.",
        "predicted": "select flno from flights where airport = \"apg\"",
        "gold": "select flightno from flights where destairport  =  \"apg\"",
        "db_id": "flight_2"
      },
      {
        "index": 251,
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "predicted": "select flno from flights where origin_apid in (select apid from airports where city = \"aberdeen\")",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 252,
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "predicted": "select flno from flights where destination = 'atlanta'",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 253,
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "predicted": "select flno from flights where city = \"aberdeen\"",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.destairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 254,
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "predicted": "select flno from flights where destination = 'atlanta'",
        "gold": "select t1.flightno from flights as t1 join airports as t2 on t1.destairport   =  t2.airportcode where t2.city  =  \"aberdeen\"",
        "db_id": "flight_2"
      },
      {
        "index": 255,
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "predicted": "select count(*) from airports as t1 join flights as t2 on t1.apid = t2.dst_apid where t1.city = 'atlanta' or t1.city = 'abilene'",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\" or t2.city  =  \"abilene\"",
        "db_id": "flight_2"
      },
      {
        "index": 256,
        "question": "How many flights land in Aberdeen or Abilene?",
        "predicted": "select count(*) from airports as t1 join flights as t2 on t1.apid = t2.src_apid where t1.country = \"aberna\" or t1.country = \"alice\"",
        "gold": "select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\" or t2.city  =  \"abilene\"",
        "db_id": "flight_2"
      },
      {
        "index": 257,
        "question": "Find the name of airports which do not have any flight in and out.",
        "predicted": "select airport_name from airports where airport_code not in (select airport_code from flights)",
        "gold": "select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "db_id": "flight_2"
      },
      {
        "index": 258,
        "question": "Which airports do not have departing or arriving flights?",
        "predicted": "select airport_name from airports except select dst_apid from flights",
        "gold": "select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights)",
        "db_id": "flight_2"
      },
      {
        "index": 261,
        "question": "Sort employee names by their age in ascending order.",
        "predicted": "select name from employee order by age asc",
        "gold": "select name from employee order by age",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 262,
        "question": "List the names of employees and sort in ascending order of age.",
        "predicted": "select name from employee order by age asc",
        "gold": "select name from employee order by age",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 263,
        "question": "What is the number of employees from each city?",
        "predicted": "select count(*), city from employee group by city",
        "gold": "select count(*) ,  city from employee group by city",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 264,
        "question": "Count the number of employees for each city.",
        "predicted": "select count(*), city from employee group by city",
        "gold": "select count(*) ,  city from employee group by city",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 265,
        "question": "Which cities do more than one employee under age 30 come from?",
        "predicted": "select city from employee where age  30 group by city having count(*) > 1",
        "gold": "select city from employee where age  <  30 group by city having count(*)  >  1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 266,
        "question": "Find the cities that have more than one employee under age 30.",
        "predicted": "select city from employee where age  30 group by city having count(*) > 1",
        "gold": "select city from employee where age  <  30 group by city having count(*)  >  1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 267,
        "question": "Find the number of shops in each location.",
        "predicted": "select location, count(*) from shop group by location",
        "gold": "select count(*) ,  location from shop group by location",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 268,
        "question": "How many shops are there in each location?",
        "predicted": "select location, count(*) from shop group by location",
        "gold": "select count(*) ,  location from shop group by location",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 269,
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "predicted": "select manager_name, district from shop order by products desc limit 1",
        "gold": "select manager_name ,  district from shop order by number_products desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 270,
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "predicted": "select t2.manager_name, t2.district from products as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "gold": "select manager_name ,  district from shop order by number_products desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 271,
        "question": "find the minimum and maximum number of products of all stores.",
        "predicted": "select min(products), max(products) from shop",
        "gold": "select min(number_products) ,  max(number_products) from shop",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 272,
        "question": "What are the minimum and maximum number of products across all the shops?",
        "predicted": "select min(products), max(products) from shop",
        "gold": "select min(number_products) ,  max(number_products) from shop",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 273,
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "predicted": "select name, location, district from shop order by products desc",
        "gold": "select name ,  location ,  district from shop order by number_products desc",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 274,
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "predicted": "select name, location, district from shop order by count(*) desc",
        "gold": "select name ,  location ,  district from shop order by number_products desc",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 275,
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "predicted": "select name from shop where number > (select avg(products) from shop)",
        "gold": "select name from shop where number_products  >  (select avg(number_products) from shop)",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 276,
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "predicted": "select name from shop where products > (select avg(products) from shop)",
        "gold": "select name from shop where number_products  >  (select avg(number_products) from shop)",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 277,
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "predicted": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id group by t1.employee_id order by count(*) desc limit 1",
        "gold": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id group by t2.employee_id order by count(*) desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 278,
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "predicted": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id group by t1.employee_id order by count(*) desc limit 1",
        "gold": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id group by t2.employee_id order by count(*) desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 279,
        "question": "Find the name of the employee who got the highest one time bonus.",
        "predicted": "select t1.name from employee as t1 join hiring as t2 on t1.employee_id = t2.employee_id group by t1.employee_id order by count(*) desc limit 1",
        "gold": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id order by t2.bonus desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 280,
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "predicted": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.onscholarship desc limit 1",
        "gold": "select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id order by t2.bonus desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 284,
        "question": "Which shop has the most employees? Give me the shop name.",
        "predicted": "select t2.name from employees as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "gold": "select t2.name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t1.shop_id order by count(*) desc limit 1",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 287,
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "predicted": "select t2.name, count(*) from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id",
        "gold": "select count(*) ,  t2.name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t2.name",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 288,
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "predicted": "select t1.name, count(*) from shop as t1 join employee as t2 on t1.shop_id = t2.shop_id group by t1.shop_id",
        "gold": "select count(*) ,  t2.name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t2.name",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 290,
        "question": "Find the total amount of bonus given in all the evaluations.",
        "predicted": "select sum(amount) from evaluation",
        "gold": "select sum(bonus) from evaluation",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 293,
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "predicted": "select district from shop where products  3000 intersect select district from shop where products > 10000",
        "gold": "select district from shop where number_products  <  3000 intersect select district from shop where number_products  >  10000",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 294,
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "predicted": "select district from shop where product  3000 intersect select district from shop where product > 10000",
        "gold": "select district from shop where number_products  <  3000 intersect select district from shop where number_products  >  10000",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 295,
        "question": "How many different store locations are there?",
        "predicted": "select count(distinct location\"",
        "gold": "select count(distinct location) from shop",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 296,
        "question": "Count the number of distinct store locations.",
        "predicted": "select count(course_location) from shop",
        "gold": "select count(distinct location) from shop",
        "db_id": "employee_hire_evaluation"
      },
      {
        "index": 299,
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "predicted": "select document_id, document_name, document_description from documents",
        "gold": "select document_id ,  document_name ,  document_description from documents",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 300,
        "question": "What are the ids, names, and descriptions for all documents?",
        "predicted": "select document_id, document_name, document_description from documents",
        "gold": "select document_id ,  document_name ,  document_description from documents",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 301,
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "predicted": "select document_name, document_type_id from documents where document_description like '%w%'",
        "gold": "select document_name ,  template_id from documents where document_description like \"%w%\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 302,
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "predicted": "select document_name, document_name from documents where document_description like '%w%'",
        "gold": "select document_name ,  template_id from documents where document_description like \"%w%\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 303,
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "predicted": "select t1.document_id, t1.document_id, t2.document_description from documents as t1 join documents as t2 on t1.document_id = t2.document_id where t1.document_name = \"robbin cv\"",
        "gold": "select document_id ,  template_id ,  document_description from documents where document_name  =  \"robbin cv\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 304,
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "predicted": "select document_id, document_name, document_description from documents where document_name = \"robbin cv\"",
        "gold": "select document_id ,  template_id ,  document_description from documents where document_name  =  \"robbin cv\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 305,
        "question": "How many different templates do all document use?",
        "predicted": "select count(*) from documents",
        "gold": "select count(distinct template_id) from documents",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 307,
        "question": "How many documents are using the template with type code 'PPT'?",
        "predicted": "select count(*) from documents where template_type_code = 'ppt'",
        "gold": "select count(*) from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id where t2.template_type_code  =  'ppt'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 308,
        "question": "Count the number of documents that use the PPT template type.",
        "predicted": "select count(*) from documents where template_type_code = \"ppt\"",
        "gold": "select count(*) from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id where t2.template_type_code  =  'ppt'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 309,
        "question": "Show all template ids and number of documents using each template.",
        "predicted": "select template_id, count(*) from documents group by template_id",
        "gold": "select template_id ,  count(*) from documents group by template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 310,
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "predicted": "select template_id, count(*) from documents group by template_id",
        "gold": "select template_id ,  count(*) from documents group by template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 311,
        "question": "What is the id and type code for the template used by the most documents?",
        "predicted": "select t1.document_id, t1.document_type_code from templates as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.template_id ,  t2.template_type_code from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 312,
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "predicted": "select t1.document_id, t1.document_type_code from templates as t1 join documents as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.template_id ,  t2.template_type_code from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t1.template_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 316,
        "question": "What are the ids for templates that are not used in any documents?",
        "predicted": "select template_id from templates where template_id not in (select template_id from documents)",
        "gold": "select template_id from templates except select template_id from documents",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 319,
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "predicted": "select template_id, version_number, template_type_code from templates",
        "gold": "select template_id ,  version_number ,  template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 320,
        "question": "What are the ids, version numbers, and type codes for each template?",
        "predicted": "select template_id, version_number, template_type_code from templates",
        "gold": "select template_id ,  version_number ,  template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 322,
        "question": "What are the different template type codes?",
        "predicted": "select distinct template_type_code from ref_documents",
        "gold": "select distinct template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 324,
        "question": "Return the ids of templates that have the code PP or PPT.",
        "predicted": "select template_id from templates where template_code = \"pp\" or template_code = \"ppt\"",
        "gold": "select template_id from templates where template_type_code  =  \"pp\" or template_type_code  =  \"ppt\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 327,
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "predicted": "select t1.document_number, t1.document_type_code from templates as t1 join templates as t2 on t1.document_type_code = t2.document_type_code where t1.date_of_date > 5",
        "gold": "select version_number ,  template_type_code from templates where version_number  >  5",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 328,
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "predicted": "select t1.document_number, t1.document_type_code from templates as t1 join templates as t2 on t1. templates_id = t2. templates_id where t1.date_number > 5",
        "gold": "select version_number ,  template_type_code from templates where version_number  >  5",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 329,
        "question": "Show all template type codes and number of templates for each.",
        "predicted": "select template_type_code, count(*) from templates group by template_type_code",
        "gold": "select template_type_code ,  count(*) from templates group by template_type_code",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 330,
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "predicted": "select template_type_code, count(*) from templates group by template_type_code",
        "gold": "select template_type_code ,  count(*) from templates group by template_type_code",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 333,
        "question": "Show all template type codes with less than three templates.",
        "predicted": "select template_type_code from templates group by template_type_code having count(*)  3",
        "gold": "select template_type_code from templates group by template_type_code having count(*)  <  3",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 334,
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "predicted": "select template_type_code from templates group by template_type_code having count(*)  3",
        "gold": "select template_type_code from templates group by template_type_code having count(*)  <  3",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 335,
        "question": "What the smallest version number and its template type code?",
        "predicted": "select min(version_number), template_type_code from templates",
        "gold": "select min(version_number) ,  template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 336,
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "predicted": "select min(version_number), template_type_code from templates;",
        "gold": "select min(version_number) ,  template_type_code from templates",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 337,
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "predicted": "select t2.model_type_code from documents as t1 join templates as t2 on t1.document_id = t2.document_id where t1.document_name = \"data base\"",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t2.document_name  =  \"data base\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 338,
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "predicted": "select t2.document_type_code from documents as t1 join templates as t2 on t1.document_id = t2.document_id where t1.document_name = \"data base\"",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t2.document_name  =  \"data base\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 339,
        "question": "Show all document names using templates with template type code BK.",
        "predicted": "select document_name from documents where template_type_code = \"bk\"",
        "gold": "select t2.document_name from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t1.template_type_code  =  \"bk\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 340,
        "question": "What are the names of documents that use templates with the code BK?",
        "predicted": "select document_name from documents where template_id = \"bk\"",
        "gold": "select t2.document_name from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t1.template_type_code  =  \"bk\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 341,
        "question": "Show all template type codes and the number of documents using each type.",
        "predicted": "select template_type_code, count(*) from documents group by template_type_code",
        "gold": "select t1.template_type_code ,  count(*) from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 342,
        "question": "What are the different template type codes, and how many documents use each type?",
        "predicted": "select template_type_code, count(*) from documents group by template_type_code",
        "gold": "select t1.template_type_code ,  count(*) from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 343,
        "question": "Which template type code is used by most number of documents?",
        "predicted": "select template_type_code from documents group by template_type_code order by count(*) desc limit 1",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 344,
        "question": "Return the code of the template type that is most commonly used in documents.",
        "predicted": "select template_type_code from documents group by template_type_code order by count(*) desc limit 1",
        "gold": "select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 345,
        "question": "Show all template type codes that are not used by any document.",
        "predicted": "select template_type_code from ref_ templates except select template_type_code from documents",
        "gold": "select template_type_code from templates except select template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 346,
        "question": "What are the codes of template types that are not used for any document?",
        "predicted": "select template_type_code from ref_ templates except select template_type_code from documents",
        "gold": "select template_type_code from templates except select template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 347,
        "question": "Show all template type codes and descriptions.",
        "predicted": "select template_type_code, template_type_description from ref_document_types",
        "gold": "select template_type_code ,  template_type_description from ref_template_types",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 348,
        "question": "What are the type codes and descriptions for all template types?",
        "predicted": "select template_type_code, template_type_description from ref_document_types",
        "gold": "select template_type_code ,  template_type_description from ref_template_types",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 349,
        "question": "What is the template type descriptions for template type code \"AD\".",
        "predicted": "select template_type_description from ref_document_types where template_type_code = \"ad\"",
        "gold": "select template_type_description from ref_template_types where template_type_code  =  \"ad\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 350,
        "question": "Return the template type description of the template type with the code AD.",
        "predicted": "select template_type_description from ref_documents where template_type_code = \"ad\"",
        "gold": "select template_type_description from ref_template_types where template_type_code  =  \"ad\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 351,
        "question": "What is the template type code for template type description \"Book\".",
        "predicted": "select template_type_code from ref_model_types where template_type_description = \"book\"",
        "gold": "select template_type_code from ref_template_types where template_type_description  =  \"book\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 352,
        "question": "Return the type code of the template type with the description \"Book\".",
        "predicted": "select template_type_code from ref_ templates where template_type_description = \"book\"",
        "gold": "select template_type_code from ref_template_types where template_type_description  =  \"book\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 353,
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "predicted": "select distinct t1.document_type_description from ref_ templates as t1 join documents as t2 on t1.document_type_code = t2.document_type_code",
        "gold": "select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code join documents as t3 on t2.template_id  =  t3.template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 354,
        "question": "Return the different descriptions for templates that have been used in a document.",
        "predicted": "select distinct template_description from documents",
        "gold": "select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code join documents as t3 on t2.template_id  =  t3.template_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 355,
        "question": "What are the template ids with template type description \"Presentation\".",
        "predicted": "select template_id from ref_shipping_types where template_type_description = \"presentation\"",
        "gold": "select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code where t1.template_type_description  =  \"presentation\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 356,
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "predicted": "select template_id from templates where template_description = 'presentation'",
        "gold": "select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code where t1.template_type_description  =  \"presentation\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 359,
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "predicted": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"summer show\"",
        "gold": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'summer show'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 360,
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "predicted": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"summer show\"",
        "gold": "select count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'summer show'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 361,
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "predicted": "select paragraph_details from paragraphs where text like '%korea%'",
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 362,
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "predicted": "select paragraph_details from paragraphs where paragraph_text like '%korea%'",
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 363,
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "predicted": "select t1.parat_id, t1.title_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"welcome to ny\"",
        "gold": "select t1.paragraph_id ,   t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'welcome to ny'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 364,
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "predicted": "select t1.parat_id, t1.parat_text from paragraphs as t1 join documents as t2 on t1.parat_id = t2.parat_id where t2.document_name = \"welcome to ny\"",
        "gold": "select t1.paragraph_id ,   t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'welcome to ny'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 365,
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "predicted": "select t1.parat_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"customer reviews\"",
        "gold": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  \"customer reviews\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 366,
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "predicted": "select t1.parat_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = \"customer reviews\"",
        "gold": "select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  \"customer reviews\"",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 367,
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "predicted": "select document_id, count(*) from paragraphs group by document_id order by document_id",
        "gold": "select document_id ,  count(*) from paragraphs group by document_id order by document_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 368,
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "predicted": "select document_id, count(*) from paragraphs group by document_id order by document_id",
        "gold": "select document_id ,  count(*) from paragraphs group by document_id order by document_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 369,
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "predicted": "select t1.document_id, t1.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "gold": "select t1.document_id ,  t2.document_name ,  count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 370,
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "predicted": "select t1.document_id, t1.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id",
        "gold": "select t1.document_id ,  t2.document_name ,  count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 373,
        "question": "What is the document id and name with greatest number of paragraphs?",
        "predicted": "select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.document_id ,  t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 374,
        "question": "Return the id and name of the document with the most paragraphs.",
        "predicted": "select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "gold": "select t1.document_id ,  t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by count(*) desc limit 1",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 377,
        "question": "What is the document id with 1 to 2 paragraphs?",
        "predicted": "select document_id from paragraphs where document_id between 1 and 2",
        "gold": "select document_id from paragraphs group by document_id having count(*) between 1 and 2",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 378,
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "predicted": "select document_id from documents group by document_id having count(*) between 1 and 2",
        "gold": "select document_id from paragraphs group by document_id having count(*) between 1 and 2",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 380,
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "predicted": "select document_id from documents where paragraph_text like '%brazil%' intersect select document_id from documents where paragraph_text = 'ireland'",
        "gold": "select document_id from paragraphs where paragraph_text  =  'brazil' intersect select document_id from paragraphs where paragraph_text  =  'ireland'",
        "db_id": "cre_Doc_Template_Mgt"
      },
      {
        "index": 385,
        "question": "What are the age and hometown of teachers?",
        "predicted": "select age, hometown from teacher",
        "gold": "select age ,  hometown from teacher",
        "db_id": "course_teach"
      },
      {
        "index": 386,
        "question": "What is the age and hometown of every teacher?",
        "predicted": "select age, hometown from teacher",
        "gold": "select age ,  hometown from teacher",
        "db_id": "course_teach"
      },
      {
        "index": 387,
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "predicted": "select name from teacher where hometown!= 'no lever urban district'",
        "gold": "select name from teacher where hometown != \"little lever urban district\"",
        "db_id": "course_teach"
      },
      {
        "index": 388,
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "predicted": "select name from teacher where hometown!= 'no lever urban district'",
        "gold": "select name from teacher where hometown != \"little lever urban district\"",
        "db_id": "course_teach"
      },
      {
        "index": 391,
        "question": "What is the hometown of the youngest teacher?",
        "predicted": "select t2.hometown from course as t1 join teacher as t2 on t1.instructor = t2.instructor_id order by t1.age limit 1",
        "gold": "select hometown from teacher order by age asc limit 1",
        "db_id": "course_teach"
      },
      {
        "index": 392,
        "question": "Where is the youngest teacher from?",
        "predicted": "select t1.name from teacher as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id order by t2.age limit 1",
        "gold": "select hometown from teacher order by age asc limit 1",
        "db_id": "course_teach"
      },
      {
        "index": 393,
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "predicted": "select t2.hometown, count(*) from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.hometown",
        "gold": "select hometown ,  count(*) from teacher group by hometown",
        "db_id": "course_teach"
      },
      {
        "index": 394,
        "question": "For each hometown, how many teachers are there?",
        "predicted": "select t2.hometown, count(*) from instructor as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.hometown",
        "gold": "select hometown ,  count(*) from teacher group by hometown",
        "db_id": "course_teach"
      },
      {
        "index": 398,
        "question": "What are the towns from which at least two teachers come from?",
        "predicted": "select t1.hometown from teacher as t1 join teacher as t2 on t1.instructor_id = t2.instructor_id group by t1.hometown having count(*) >= 2",
        "gold": "select hometown from teacher group by hometown having count(*)  >=  2",
        "db_id": "course_teach"
      },
      {
        "index": 399,
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "predicted": "select t2.name, t1.course_id from course_order as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id",
        "db_id": "course_teach"
      },
      {
        "index": 400,
        "question": "What is the name of each teacher and what course they teach?",
        "predicted": "select t2.name, t1.course_id from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id",
        "db_id": "course_teach"
      },
      {
        "index": 401,
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "predicted": "select t2.name, t1.course_id from course_order as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id order by t2.name asc",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id order by t3.name",
        "db_id": "course_teach"
      },
      {
        "index": 402,
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "predicted": "select t2.name, t1.course_id from course as t1 join teachers as t2 on t1.teacher_id = t2.teacher_id order by t2.name",
        "gold": "select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id order by t3.name",
        "db_id": "course_teach"
      },
      {
        "index": 403,
        "question": "Show the name of the teacher for the math course.",
        "predicted": "select t2.name from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t1.course_name = \"math\"",
        "gold": "select t3.name from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id where t2.course  =  \"math\"",
        "db_id": "course_teach"
      },
      {
        "index": 404,
        "question": "What are the names of the people who teach math courses?",
        "predicted": "select t2.name from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t1.course_id = 'math'",
        "gold": "select t3.name from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id where t2.course  =  \"math\"",
        "db_id": "course_teach"
      },
      {
        "index": 405,
        "question": "Show names of teachers and the number of courses they teach.",
        "predicted": "select t2.name, count(*) from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id",
        "gold": "select t2.name ,  count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t2.name",
        "db_id": "course_teach"
      },
      {
        "index": 406,
        "question": "What are the names of the teachers and how many courses do they teach?",
        "predicted": "select t2.name, count(*) from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id",
        "gold": "select t2.name ,  count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t2.name",
        "db_id": "course_teach"
      },
      {
        "index": 407,
        "question": "Show names of teachers that teach at least two courses.",
        "predicted": "select t2.name from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id having count(*) >= 2",
        "gold": "select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t2.name having count(*)  >=  2",
        "db_id": "course_teach"
      },
      {
        "index": 408,
        "question": "What are the names of the teachers who teach at least two courses?",
        "predicted": "select t2.name from course as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id having count(*) >= 2",
        "gold": "select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t2.name having count(*)  >=  2",
        "db_id": "course_teach"
      },
      {
        "index": 409,
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "predicted": "select name from teacher where teacher_id not in (select teacher_id from course_order)",
        "gold": "select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "db_id": "course_teach"
      },
      {
        "index": 410,
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "predicted": "select name from teacher where course_id not in (select t1.teacher_id from course_arranged)",
        "gold": "select name from teacher where teacher_id not in (select teacher_id from course_arrange)",
        "db_id": "course_teach"
      },
      {
        "index": 411,
        "question": "How many visitors below age 30 are there?",
        "predicted": "select count(*) from customer where age  30",
        "gold": "select count(*) from visitor where age  <  30",
        "db_id": "museum_visit"
      },
      {
        "index": 412,
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "predicted": "select name from customer where level > 4 order by level",
        "gold": "select name from visitor where level_of_membership  >  4 order by level_of_membership desc",
        "db_id": "museum_visit"
      },
      {
        "index": 413,
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "predicted": "select avg(age) from customer where level!= 4",
        "gold": "select avg(age) from visitor where level_of_membership  <=  4",
        "db_id": "museum_visit"
      },
      {
        "index": 414,
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "predicted": "select name, level_of_membership from customer where age > 4 order by age",
        "gold": "select name ,  level_of_membership from visitor where level_of_membership  >  4 order by age desc",
        "db_id": "museum_visit"
      },
      {
        "index": 415,
        "question": "Find the id and name of the museum that has the most staff members?",
        "predicted": "select museum_id, name from museum order by num_of_staff desc limit 1",
        "gold": "select museum_id ,  name from museum order by num_of_staff desc limit 1",
        "db_id": "museum_visit"
      },
      {
        "index": 416,
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "predicted": "select avg(num_of_staff) from museum where open_year  2009",
        "gold": "select avg(num_of_staff) from museum where open_year  <  2009",
        "db_id": "museum_visit"
      },
      {
        "index": 417,
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "predicted": "select open_year, num_of_staff from museum where name = 'place museum'",
        "gold": "select num_of_staff ,  open_year from museum where name  =  'plaza museum'",
        "db_id": "museum_visit"
      },
      {
        "index": 419,
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "predicted": "select t1.customer_id, t1.name, t1.age from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id group by t1.customer_id having count(*) > 1",
        "gold": "select t1.id ,  t1.name ,  t1.age from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id group by t1.id having count(*)  >  1",
        "db_id": "museum_visit"
      },
      {
        "index": 420,
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "predicted": "select t1.customer_id, t1.name, t2.level from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id group by t1.customer_id order by sum(total_cost_cost) desc limit 1",
        "gold": "select t2.visitor_id ,  t1.name ,  t1.level_of_membership from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id group by t2.visitor_id order by sum(t2.total_spent) desc limit 1",
        "db_id": "museum_visit"
      },
      {
        "index": 421,
        "question": "What are the id and name of the museum visited most times?",
        "predicted": "select t1.museum_id, t1.name from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id group by t1.museum_id order by count(*) desc limit 1",
        "gold": "select t2.museum_id ,  t1.name from museum as t1 join visit as t2 on t1.museum_id  =  t2.museum_id group by t2.museum_id order by count(*) desc limit 1",
        "db_id": "museum_visit"
      },
      {
        "index": 423,
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "predicted": "select t1.name, t1.age from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id group by t1.customer_id order by sum(total_ticket_total) desc limit 1",
        "gold": "select t1.name ,  t1.age from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id order by t2.num_of_ticket desc limit 1",
        "db_id": "museum_visit"
      },
      {
        "index": 424,
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "predicted": "select avg(num_of_tickets), max(num_of_tickets) from visit",
        "gold": "select avg(num_of_ticket) ,  max(num_of_ticket) from visit",
        "db_id": "museum_visit"
      },
      {
        "index": 425,
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "predicted": "select sum(total_cost_cost) from customer where level = 1",
        "gold": "select sum(t2.total_spent) from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id where t1.level_of_membership  =  1",
        "db_id": "museum_visit"
      },
      {
        "index": 426,
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "predicted": "select t1.name from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id join museum as t3 on t2.museum_id = t3.museum_id where t3.open_year  2009 intersect select t1.name from customer as t1 join visit as t2 on t1.customer_id = t2.customer_id join museum as t3 on t2.museum_id = t3.museum_id where t3.open_year > 2011",
        "gold": "select t1.name from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id join museum as t3 on t3.museum_id  =  t2.museum_id where t3.open_year  <  2009 intersect select t1.name from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id join museum as t3 on t3.museum_id  =  t2.museum_id where t3.open_year  >  2011",
        "db_id": "museum_visit"
      },
      {
        "index": 427,
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "predicted": "select count(*) from customer where customer_id not in (select customer_id from visit where open_year > 2010)",
        "gold": "select count(*) from visitor where id not in (select t2.visitor_id from museum as t1 join visit as t2 on t1.museum_id  =  t2.museum_id where t1.open_year  >  2010)",
        "db_id": "museum_visit"
      },
      {
        "index": 428,
        "question": "How many museums were opened after 2013 or before 2008?",
        "predicted": "select count(*) from museum where open_year > 2014 or open_year  2008",
        "gold": "select count(*) from museum where open_year  >  2013 or open_year  <  2008",
        "db_id": "museum_visit"
      },
      {
        "index": 429,
        "question": "Find the total number of players.",
        "predicted": "select count(*) from player",
        "gold": "select count(*) from players",
        "db_id": "wta_1"
      },
      {
        "index": 430,
        "question": "How many players are there?",
        "predicted": "select count(*) from player",
        "gold": "select count(*) from players",
        "db_id": "wta_1"
      },
      {
        "index": 431,
        "question": "Find the total number of matches.",
        "predicted": "select count(*) from matchs",
        "gold": "select count(*) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 432,
        "question": "Count the number of matches.",
        "predicted": "select count(*) from matchs",
        "gold": "select count(*) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 433,
        "question": "List the first name and birth date of all players from the country with code USA.",
        "predicted": "select first_name, birth_date from players where country_code = \"usa\"",
        "gold": "select first_name ,  birth_date from players where country_code  =  'usa'",
        "db_id": "wta_1"
      },
      {
        "index": 434,
        "question": "What are the first names and birth dates of players from the USA?",
        "predicted": "select first_name, birth_date from players where country_code = \"usa\"",
        "gold": "select first_name ,  birth_date from players where country_code  =  'usa'",
        "db_id": "wta_1"
      },
      {
        "index": 435,
        "question": "Find the average age of losers and winners of all matches.",
        "predicted": "select avg(t1.age), avg(t1.winner) from matches as t1 join match as t2 on t1.player_id = t2.player_id",
        "gold": "select avg(loser_age) ,  avg(winner_age) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 436,
        "question": "What are the average ages of losers and winners across matches?",
        "predicted": "select avg(t1.age), avg(t1.winner) from matches as t1 join match as t2 on t1.match_id = t2.match_id",
        "gold": "select avg(loser_age) ,  avg(winner_age) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 437,
        "question": "Find the average rank of winners in all matches.",
        "predicted": "select avg(rank) from match",
        "gold": "select avg(winner_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 438,
        "question": "What is the average rank for winners in all matches?",
        "predicted": "select avg(rank) from matchs",
        "gold": "select avg(winner_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 439,
        "question": "Find the highest rank of losers in all matches.",
        "predicted": "select rank from players order by rank asc limit 1",
        "gold": "select min(loser_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 440,
        "question": "What is the best rank of losers across all matches?",
        "predicted": "select rank from players order by distance desc limit 1",
        "gold": "select min(loser_rank) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 443,
        "question": "Find the number of distinct name of losers.",
        "predicted": "select count(distinct name) from players",
        "gold": "select count(distinct loser_name) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 444,
        "question": "How many different loser names are there?",
        "predicted": "select count(distinct loser) from match",
        "gold": "select count(distinct loser_name) from matches",
        "db_id": "wta_1"
      },
      {
        "index": 445,
        "question": "Find the name of tourney that has more than 10 matches.",
        "predicted": "select t1.name from tourneys as t1 join matchs as t2 on t1.tournament_id = t2.tournament_id group by t2.tournament_name having count(*) > 10",
        "gold": "select tourney_name from matches group by tourney_name having count(*)  >  10",
        "db_id": "wta_1"
      },
      {
        "index": 446,
        "question": "What are the names of tournaments that have more than 10 matches?",
        "predicted": "select t2.name from matches as t1 join tournaments as t2 on t1.tournament_id = t2.tournament_id group by t2.name having count(*) > 10",
        "gold": "select tourney_name from matches group by tourney_name having count(*)  >  10",
        "db_id": "wta_1"
      },
      {
        "index": 447,
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "predicted": "select t2.winner_name from rankings as t1 join team as t2 on t1.team = t2.team_id where t1.year = 2014 intersect select t2.winner_name from rankings as t1 join matches as t2 on t1.winning_id = t2.winning_id where t1.year = 2016",
        "gold": "select winner_name from matches where year  =  2013 intersect select winner_name from matches where year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 448,
        "question": "What are the names of players who won in both 2013 and 2016?",
        "predicted": "select t2.name from rankings as t1 join player as t2 on t1.player_id = t2.player_id where t1.year = 2013 intersect select t2.name from rankings as t1 join players as t2 on t1.player_id = t2.player_id where t1.year = 2016",
        "gold": "select winner_name from matches where year  =  2013 intersect select winner_name from matches where year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 449,
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "predicted": "select count(*) from matchs where year = 2013 or year = 2016",
        "gold": "select count(*) from matches where year  =  2013 or year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 450,
        "question": "How many matches were played in 2013 or 2016?",
        "predicted": "select count(*) from matchs where year = 2013 or year = 2016",
        "gold": "select count(*) from matches where year  =  2013 or year  =  2016",
        "db_id": "wta_1"
      },
      {
        "index": 451,
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "predicted": "select t1.country_code, t1.first_name from players as t1 join matchs as t2 on t1.player_id = t2.player_id where t2.winning_name = \"australia open\" intersect select t1.country_code, t1.winning_name from players as t1 join matchs as t2 on t1.player_id = t2.player_id where t2.winning_year = \"tournament\"",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'wta championships' intersect select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'australian open'",
        "db_id": "wta_1"
      },
      {
        "index": 452,
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "predicted": "select t2.first_name, t2.country_code from ratings as t1 join players as t2 on t1.player_id = t2.player_id where t1.rank = \"wta championship\" intersect select t2.first_name, t1.country_code from ratings as t1 join matches as t2 on t1.winning_id = t2.winning_id where t1.name = \"australia open\"",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'wta championships' intersect select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'australian open'",
        "db_id": "wta_1"
      },
      {
        "index": 453,
        "question": "Find the first name and country code of the oldest player.",
        "predicted": "select firstname, country_code from player order by age desc limit 1",
        "gold": "select first_name ,  country_code from players order by birth_date limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 454,
        "question": "What is the first name and country code of the oldest player?",
        "predicted": "select firstname, country_code from player order by age desc limit 1",
        "gold": "select first_name ,  country_code from players order by birth_date limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 455,
        "question": "List the first and last name of all players in the order of birth date.",
        "predicted": "select first_name, last_name from players order by birth_date",
        "gold": "select first_name ,  last_name from players order by birth_date",
        "db_id": "wta_1"
      },
      {
        "index": 456,
        "question": "What are the full names of all players, sorted by birth date?",
        "predicted": "select first_name, last_name from players order by birth_date",
        "gold": "select first_name ,  last_name from players order by birth_date",
        "db_id": "wta_1"
      },
      {
        "index": 457,
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "predicted": "select first_name, last_name from players where birth_date = \"left\" order by birth_date",
        "gold": "select first_name ,  last_name from players where hand  =  'l' order by birth_date",
        "db_id": "wta_1"
      },
      {
        "index": 458,
        "question": "What are the full names of all left handed players, in order of birth date?",
        "predicted": "select first_name, last_name from players order by birth_date",
        "gold": "select first_name ,  last_name from players where hand  =  'l' order by birth_date",
        "db_id": "wta_1"
      },
      {
        "index": 459,
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "predicted": "select t2.first_name, t2.country_code from ratings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 460,
        "question": "What is the first name and country code of the player with the most tours?",
        "predicted": "select t2.first_name, t2.country_code from performances as t1 join player as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.country_code ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t2.tours desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 461,
        "question": "Find the year that has the most number of matches.",
        "predicted": "select year from matchs group by year order by count(*) desc limit 1",
        "gold": "select year from matches group by year order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 462,
        "question": "Which year had the most matches?",
        "predicted": "select year from matchs group by year order by count(*) desc limit 1",
        "gold": "select year from matches group by year order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 463,
        "question": "Find the name and rank points of the winner who won the most times.",
        "predicted": "select t2.name, t2.rank_points from rankings as t1 join match as t2 on t1.tournament_id = t2.winner_id group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name ,  winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 464,
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "predicted": "select t2.winning_name, count(*) from rankings as t1 join team as t2 on t1.team_id = t2.team_id group by t1.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name ,  winner_rank_points from matches group by winner_name order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 465,
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "predicted": "select t2.winning_name from rankings as t1 join match as t2 on t1.winning_id = t2.winning_id where t1.country = \"australia open open\" group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 466,
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "predicted": "select t2.winning_name from rankings as t1 join results as t2 on t1.winning_id = t2.winning_id where t1.country = \"australia open open\" group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 467,
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "predicted": "select t2.winning_name, t2.winning_name from matches as t1 join players as t2 on t1.match_id = t2.match_id group by t2.winning_r order by sum(t1.minutes) desc limit 1",
        "gold": "select winner_name ,  loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 468,
        "question": "What are the names of the winner and loser who played in the longest match?",
        "predicted": "select t2.winning_name, t2.loser_r = t1.winning_r where t2.year = (select max(year) from matches)",
        "gold": "select winner_name ,  loser_name from matches order by minutes desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 469,
        "question": "Find the average ranking for each player and their first name.",
        "predicted": "select avg(t1.ranking_points), t2.first_name from ratings as t1 join players as t2 on t1.player_id = t2.player_id group by t2.name",
        "gold": "select avg(ranking) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 470,
        "question": "What are the first names of all players, and their average rankings?",
        "predicted": "select t2.first_name, t2.last_name, avg(t1.ranking_points) from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "gold": "select avg(ranking) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 471,
        "question": "Find the total ranking points for each player and their first name.",
        "predicted": "select t1.ranking_points, t2.first_name from rankings as t1 join players as t2 on t1.player_id = t2.player_id",
        "gold": "select sum(ranking_points) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 472,
        "question": "What are the first names of all players, and their total ranking points?",
        "predicted": "select t2.first_name, t2.ranked_points from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id",
        "gold": "select sum(ranking_points) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name",
        "db_id": "wta_1"
      },
      {
        "index": 473,
        "question": "find the number of players for each country.",
        "predicted": "select count(*), country_code from player group by country_code",
        "gold": "select count(*) ,  country_code from players group by country_code",
        "db_id": "wta_1"
      },
      {
        "index": 474,
        "question": "How many players are from each country?",
        "predicted": "select country_code, count(*) from player group by country_code",
        "gold": "select count(*) ,  country_code from players group by country_code",
        "db_id": "wta_1"
      },
      {
        "index": 475,
        "question": "find the code of the country where has the greatest number of players.",
        "predicted": "select country_code from player group by country_code order by count(*) desc limit 1",
        "gold": "select country_code from players group by country_code order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 476,
        "question": "What is the code of the country with the most players?",
        "predicted": "select country_code from player group by country_code order by count(*) desc limit 1",
        "gold": "select country_code from players group by country_code order by count(*) desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 477,
        "question": "Find the codes of countries that have more than 50 players.",
        "predicted": "select country_code from player group by country_code having count(*) > 50",
        "gold": "select country_code from players group by country_code having count(*)  >  50",
        "db_id": "wta_1"
      },
      {
        "index": 478,
        "question": "What are the codes of countries with more than 50 players?",
        "predicted": "select country_code from player group by country_code having count(*) > 50",
        "gold": "select country_code from players group by country_code having count(*)  >  50",
        "db_id": "wta_1"
      },
      {
        "index": 479,
        "question": "Find the total number of tours for each ranking date.",
        "predicted": "select ranking_date, count(*) from courses group by ranking_date",
        "gold": "select sum(tours) ,  ranking_date from rankings group by ranking_date",
        "db_id": "wta_1"
      },
      {
        "index": 480,
        "question": "How many total tours were there for each ranking date?",
        "predicted": "select ranking_date, count(*) from courses group by ranking_date",
        "gold": "select sum(tours) ,  ranking_date from rankings group by ranking_date",
        "db_id": "wta_1"
      },
      {
        "index": 481,
        "question": "Find the number of matches happened in each year.",
        "predicted": "select count(*), year from matchs group by year",
        "gold": "select count(*) ,  year from matches group by year",
        "db_id": "wta_1"
      },
      {
        "index": 482,
        "question": "How many matches were played in each year?",
        "predicted": "select count(*), year from matchs group by year",
        "gold": "select count(*) ,  year from matches group by year",
        "db_id": "wta_1"
      },
      {
        "index": 483,
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "predicted": "select t2.winning_name, t2.rank from matches as t1 join players as t2 on t1.player_id = t2.player_id order by t1.age limit 3",
        "gold": "select distinct winner_name ,  winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1"
      },
      {
        "index": 484,
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "predicted": "select t2.winner_name, t2.rank from matches as t1 join rankings as t2 on t1.winning_id = t2.winning_id order by t1.age limit 3",
        "gold": "select distinct winner_name ,  winner_rank from matches order by winner_age limit 3",
        "db_id": "wta_1"
      },
      {
        "index": 485,
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "predicted": "select count(*) from matchs where class = \"wta championship\" intersect select count(*) from wins where class = \"left\"",
        "gold": "select count(distinct winner_name) from matches where tourney_name  =  'wta championships' and winner_hand  =  'l'",
        "db_id": "wta_1"
      },
      {
        "index": 486,
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "predicted": "select count(*) from matchs where t2.winning_name = \"left\" and t1.year = \"wta championships\"",
        "gold": "select count(distinct winner_name) from matches where tourney_name  =  'wta championships' and winner_hand  =  'l'",
        "db_id": "wta_1"
      },
      {
        "index": 487,
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "predicted": "select t2.first_name, t1.country_code, t2.birth_name from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t2.winning_name order by count(*) desc limit 1",
        "gold": "select t1.first_name ,  t1.country_code ,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 488,
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "predicted": "select t2.first_name, t1.country_code, t2.birthday from rankings as t1 join players as t2 on t1.player_id = t2.player_id group by t1.player_id order by count(*) desc limit 1",
        "gold": "select t1.first_name ,  t1.country_code ,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id order by t2.winner_rank_points desc limit 1",
        "db_id": "wta_1"
      },
      {
        "index": 489,
        "question": "Find the number of players for each hand type.",
        "predicted": "select hand_type, count(*) from player group by hand_type",
        "gold": "select count(*) ,  hand from players group by hand",
        "db_id": "wta_1"
      },
      {
        "index": 490,
        "question": "How many players are there for each hand type?",
        "predicted": "select hand_type, count(*) from player group by hand_type",
        "gold": "select count(*) ,  hand from players group by hand",
        "db_id": "wta_1"
      },
      {
        "index": 491,
        "question": "How many ships ended up being 'Captured'?",
        "predicted": "select count(*) from ship where destination = 'captured'",
        "gold": "select count(*) from ship where disposition_of_ship  =  'captured'",
        "db_id": "battle_death"
      },
      {
        "index": 492,
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "predicted": "select name, tonnage from ship order by name desc",
        "gold": "select name ,  tonnage from ship order by name desc",
        "db_id": "battle_death"
      },
      {
        "index": 493,
        "question": "List the name, date and result of each battle.",
        "predicted": "select name, date, result from battle",
        "gold": "select name ,  date from battle",
        "db_id": "battle_death"
      },
      {
        "index": 494,
        "question": "What is maximum and minimum death toll caused each time?",
        "predicted": "select max(death), min(deaths), time from death group by time",
        "gold": "select max(killed) ,  min(killed) from death",
        "db_id": "battle_death"
      },
      {
        "index": 495,
        "question": "What is the average number of injuries caused each time?",
        "predicted": "select avg(injured), time from death group by time",
        "gold": "select avg(injured) from death",
        "db_id": "battle_death"
      },
      {
        "index": 496,
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "predicted": "select t1.death, t1.injury from death as t1 join ship as t2 on t1.ship_id = t2.ship_id where t2.tonnage!= \"tonnage\"",
        "gold": "select t1.killed ,  t1.injured from death as t1 join ship as t2 on t1.caused_by_ship_id  =  t2.id where t2.tonnage  =  't'",
        "db_id": "battle_death"
      },
      {
        "index": 497,
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "predicted": "select name, t1.result from battle as t1 join commander as t2 on t1.armed = t2.armed where t2.kompetition!= 'boril'",
        "gold": "select name ,  result from battle where bulgarian_commander != 'boril'",
        "db_id": "battle_death"
      },
      {
        "index": 498,
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "predicted": "select distinct t1.id, t2.name from ship as t1 join death as t2 on t1.id = t2.ship_id where t1.type = 'brig'",
        "gold": "select distinct t1.id ,  t1.name from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.ship_type  =  'brig'",
        "db_id": "battle_death"
      },
      {
        "index": 499,
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "predicted": "select t1.id, t2.name from death as t1 join ship as t2 on t1.ship_id = t2.id group by t1.ship_id having count(*) > 10",
        "gold": "select t1.id ,  t1.name from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle join death as t3 on t2.id  =  t3.caused_by_ship_id group by t1.id having sum(t3.killed)  >  10",
        "db_id": "battle_death"
      },
      {
        "index": 500,
        "question": "What is the ship id and name that caused most total injuries?",
        "predicted": "select t1.ship_id, t1.name from ship as t1 join death as t2 on t1.ship_id = t2.ship_id group by t2.ship_id order by sum(t2.injury) desc limit 1",
        "gold": "select t2.id ,  t2.name from death as t1 join ship as t2 on t1.caused_by_ship_id  =  t2.id group by t2.id order by count(*) desc limit 1",
        "db_id": "battle_death"
      },
      {
        "index": 501,
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "predicted": "select distinct t2.name from rank as t1 join battle as t2 on t1.film_id = t2.baldwin i'",
        "gold": "select name from battle where bulgarian_commander  =  'kaloyan' and latin_commander  =  'baldwin i'",
        "db_id": "battle_death"
      },
      {
        "index": 503,
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "predicted": "select count(*) from ship where id not in ( select ship_id from death where tonnage = 225 )",
        "gold": "select count(*) from battle where id not in ( select lost_in_battle from ship where tonnage  =  '225' );",
        "db_id": "battle_death"
      },
      {
        "index": 504,
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "predicted": "select t2.name, t2.date from ship as t1 join death as t2 on t1.id = t2.ship_id join ship as t3 on t2.ship_id = t3.id where t1.name = 'lettice' and t2.name = 'hms atalanta'",
        "gold": "select t1.name ,  t1.date from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.name  =  'lettice' intersect select t1.name ,  t1.date from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.name  =  'hms atalanta'",
        "db_id": "battle_death"
      },
      {
        "index": 505,
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "predicted": "select name, results, bulgarian commander from battle where ship_id not in (select ship_id from death where location = 'english channel')",
        "gold": "select name ,  result ,  bulgarian_commander from battle except select t1.name ,  t1.result ,  t1.bulgarian_commander from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.location  =  'english channel'",
        "db_id": "battle_death"
      },
      {
        "index": 506,
        "question": "What are the notes of the death events which has substring 'East'?",
        "predicted": "select note from death where event like '%east%'",
        "gold": "select note from death where note like '%east%'",
        "db_id": "battle_death"
      },
      {
        "index": 507,
        "question": "what are all the addresses including line 1 and line 2?",
        "predicted": "select address_id from addresses where line_1 like \"%\" and line_2",
        "gold": "select line_1 ,  line_2 from addresses",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 508,
        "question": "What is the first and second line for all addresses?",
        "predicted": "select first_name, last_line_1 from addresses",
        "gold": "select line_1 ,  line_2 from addresses",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 511,
        "question": "How is the math course described?",
        "predicted": "select course_description from courses where course_name = \"math\"",
        "gold": "select course_description from courses where course_name  =  'math'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 512,
        "question": "What are the descriptions for all the math courses?",
        "predicted": "select course_description from courses where course_name = \"math\"",
        "gold": "select course_description from courses where course_name  =  'math'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 513,
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "predicted": "select zip_postcode from addresses where city = \"port chelsea\"",
        "gold": "select zip_postcode from addresses where city  =  'port chelsea'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 514,
        "question": "What is the zip code for Port Chelsea?",
        "predicted": "select zip_postcode from addresses where city = \"port chelsea\"",
        "gold": "select zip_postcode from addresses where city  =  'port chelsea'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 515,
        "question": "Which department offers the most number of degrees? List department name and id.",
        "predicted": "select t2.dept_name, t1.dept_id from degrees as t1 join departments as t2 on t1.dept_name = t2.dept_id group by t1.dept_name order by count(*) desc limit 1",
        "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 516,
        "question": "What is the name and id of the department with the most number of degrees ?",
        "predicted": "select dept_name, dept_id from degrees group by dept_name order by count(*) desc limit 1",
        "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 517,
        "question": "How many departments offer any degree?",
        "predicted": "select count(distinct dept_name) from degrees",
        "gold": "select count(distinct department_id) from degree_programs",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 518,
        "question": "How many different departments offer degrees?",
        "predicted": "select count(distinct dept_name) from degrees",
        "gold": "select count(distinct department_id) from degree_programs",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 519,
        "question": "How many different degree names are offered?",
        "predicted": "select count(distinct degree_name) from degree_programs",
        "gold": "select count(distinct degree_summary_name) from degree_programs",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 520,
        "question": "How many different degrees are offered?",
        "predicted": "select count(distinct degrees) from student_programs",
        "gold": "select count(distinct degree_summary_name) from degree_programs",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 521,
        "question": "How many degrees does the engineering department offer?",
        "predicted": "select count(*) from departments as t1 join degrees as t2 on t1.dept_name = t2.dept_name where dept_name = \"engineer\"",
        "gold": "select count(*) from departments as t1 join degree_programs as t2 on t1.department_id  =  t2.department_id where t1.department_name  =  'engineer'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 522,
        "question": "How many degrees does the engineering department have?",
        "predicted": "select count(*) from departments as t1 join degrees as t2 on t1.dept_name = t2.dept_name where dept_name = \"engineer\"",
        "gold": "select count(*) from departments as t1 join degree_programs as t2 on t1.department_id  =  t2.department_id where t1.department_name  =  'engineer'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 523,
        "question": "What are the names and descriptions of all the sections?",
        "predicted": "select section_name, section_description from sections",
        "gold": "select section_name ,  section_description from sections",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 524,
        "question": "What are the names and descriptions for all the sections?",
        "predicted": "select section_name, section_description from sections",
        "gold": "select section_name ,  section_description from sections",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 525,
        "question": "What are the names and id of courses having at most 2 sections?",
        "predicted": "select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) = 2",
        "gold": "select t1.course_name ,  t1.course_id from courses as t1 join sections as t2 on t1.course_id  =  t2.course_id group by t1.course_id having count(*)  <=  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 526,
        "question": "What are the names and ids of every course with less than 2 sections?",
        "predicted": "select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*)  2",
        "gold": "select t1.course_name ,  t1.course_id from courses as t1 join sections as t2 on t1.course_id  =  t2.course_id group by t1.course_id having count(*)  <=  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 529,
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "predicted": "select semester_name, semester_id from student_enrolment group by semester_id order by count(*) desc limit 1",
        "gold": "select t1.semester_name ,  t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id  =  t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 530,
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "predicted": "select t2.semester_name, t1.semester_id from student_enrolment as t1 join semesters as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "gold": "select t1.semester_name ,  t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id  =  t2.semester_id group by t1.semester_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 531,
        "question": "What is the description of the department whose name has the substring the computer?",
        "predicted": "select dept_description from departments where dept_name like '%comp.%'",
        "gold": "select department_description from departments where department_name like '%computer%'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 532,
        "question": "What is the department description for the one whose name has the word computer?",
        "predicted": "select dept_description from departments where dept_name like '%comp.%'",
        "gold": "select department_description from departments where department_name like '%computer%'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 533,
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name, t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) = 2",
        "gold": "select t1.first_name ,  t1.middle_name ,  t1.last_name ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id having count(*)  =  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 534,
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) = 2",
        "gold": "select t1.first_name ,  t1.middle_name ,  t1.last_name ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id having count(*)  =  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 535,
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t2.degree_code = 'boston red stockings'",
        "gold": "select distinct t1.first_name ,  t1.middle_name ,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id join degree_programs as t3 on t2.degree_program_id  =  t3.degree_program_id where t3.degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 536,
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t2.student_id = 'boston red stockings'",
        "gold": "select distinct t1.first_name ,  t1.middle_name ,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id join degree_programs as t3 on t2.degree_program_id  =  t3.degree_program_id where t3.degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 537,
        "question": "Find the kind of program which most number of students are enrolled in?",
        "predicted": "select t1.type from courses as t1 join student_enrolment as t2 on t1.course_id = t2.course_id group by t1.type order by count(*) desc limit 1",
        "gold": "select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 538,
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "predicted": "select t1.degree from degrees as t1 join student_enrolment as t2 on t1.degree_id = t2.degree_id group by t1.degree_high_name order by count(*) desc limit 1",
        "gold": "select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 539,
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "predicted": "select t1.programm_id, t1.course_name from degrees as t1 join student_enrolment as t2 on t1.course_id = t2.course_id group by t1.course_id order by count(*) desc limit 1",
        "gold": "select t1.degree_program_id ,  t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 540,
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "predicted": "select t1.degree_program_id, t1.degree_surname from degrees as t1 join student_enrolment as t2 on t1.degree_id = t2.degree_id group by t1.degree_id order by count(*) desc limit 1",
        "gold": "select t1.degree_program_id ,  t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 541,
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "predicted": "select t1.student_id, t1.first_name, t1.last_name, count(*), t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "gold": "select t1.student_id ,  t1.first_name ,  t1.middle_name ,  t1.last_name ,  count(*) ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 542,
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name, count(*) from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "gold": "select t1.student_id ,  t1.first_name ,  t1.middle_name ,  t1.last_name ,  count(*) ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 543,
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "predicted": "select semester_name from semesters where semester_id not in (select semester_id from student_enrolment)",
        "gold": "select semester_name from semesters where semester_id not in( select semester_id from student_enrolment )",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 544,
        "question": "What is the name of the semester with no students enrolled?",
        "predicted": "select semester_name from semesters where semester_id not in (select semester_id from student_enrolment)",
        "gold": "select semester_name from semesters where semester_id not in( select semester_id from student_enrolment )",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 545,
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "predicted": "select t1.course_name from courses as t1 join student_course_enrolment as t2 on t1.course_id = t2.course_id",
        "gold": "select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 546,
        "question": "What are the names of all courses that have some students enrolled?",
        "predicted": "select t1.course_name from courses as t1 join student_enrolment as t2 on t1.course_id = t2.course_id",
        "gold": "select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 547,
        "question": "What's the name of the course with most number of enrollments?",
        "predicted": "select t1.course_name from courses as t1 join student_enrolment as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "gold": "select  t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 548,
        "question": "What is the name of the course with the most students enrolled?",
        "predicted": "select t1.course_name from courses as t1 join student_enrolment as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "gold": "select  t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id group by t1.course_name order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 549,
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "predicted": "select t1.last_name from students as t1 join student_enrolment as t2 on t1.address_id = t2.address_id where t2.state_province_county = \"north carolina\" except select t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id",
        "gold": "select t1.last_name from students as t1 join addresses as t2 on t1.current_address_id  =  t2.address_id where t2.state_province_county  =  'northcarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id  =  t4.student_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 550,
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "predicted": "select t1.last_name from students as t1 join student_enrolment as t2 on t1.address_id = t2.address_id where t1.state_province_county = \"north carolina\" except select t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id",
        "gold": "select t1.last_name from students as t1 join addresses as t2 on t1.current_address_id  =  t2.address_id where t2.state_province_county  =  'northcarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id  =  t4.student_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 551,
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_enrolment as t2 on t1.cript_id = t2.course_id group by t1.cript_id having count(*) >= 2",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id having count(*)  >=  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 552,
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_course_contents as t2 on t1.cript_id = t2.cript_id group by t1.cript_id having count(*) >= 2",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id having count(*)  >=  2",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 553,
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "predicted": "select phone_number from students where first_name = \"tylan\" and last_name = \"k ward\"",
        "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 554,
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "predicted": "select t2.mobile_number from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t1.first_name = \"tilmothy ward\"",
        "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 555,
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_first_registered asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 556,
        "question": "What is the first, middle, and last name of the first student to register?",
        "predicted": "select t2.first_name, t2.middle_name, t2.last_name from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id order by t1.date_registration_date asc limit 1",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_first_registered asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 557,
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "predicted": "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id order by t2.date_undergraduated limit 1",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_left asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 558,
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "predicted": "select first_name, middle_name, last_name from students order by date desc limit 1",
        "gold": "select first_name ,  middle_name ,  last_name from students order by date_left asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 559,
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "predicted": "select first_name, last_name from students where permanent_address_id!= \"null\" group by first_name",
        "gold": "select first_name from students where current_address_id != permanent_address_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 560,
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "predicted": "select t1.first_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id",
        "gold": "select first_name from students where current_address_id != permanent_address_id",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 561,
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "predicted": "select t1.address_id, t1.line_1 from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.address_id group by t1.address_id order by count(*) desc limit 1",
        "gold": "select t1.address_id ,  t1.line_1 ,  t1.line_2 from addresses as t1 join students as t2 on t1.address_id  =  t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 562,
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "predicted": "select t1.address_id, t1.line_1, t1.line_2 from addresses as t1 join student_enrolments as t2 on t1.address_id = t2.address_id group by t1.address_id order by count(*) desc limit 1",
        "gold": "select t1.address_id ,  t1.line_1 ,  t1.line_2 from addresses as t1 join students as t2 on t1.address_id  =  t2.current_address_id group by t1.address_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 563,
        "question": "On average, when were the transcripts printed?",
        "predicted": "select avg(transaction_date) from transcripts",
        "gold": "select avg(transcript_date) from transcripts",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 564,
        "question": "What is the average transcript date?",
        "predicted": "select avg(transaction_date) from transcripts",
        "gold": "select avg(transcript_date) from transcripts",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 565,
        "question": "When is the first transcript released? List the date and details.",
        "predicted": "select t1.date, t1.other_details from transcripts as t1 join student_enrolment as t2 on t1.journal_id = t2.journal_id order by t1.date asc limit 1",
        "gold": "select transcript_date ,  other_details from transcripts order by transcript_date asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 566,
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "predicted": "select t1.date, t1.other_details from transcripts as t1 join transcript_contents as t2 on t1.cript_id = t2.transaction_id order by t1.date asc limit 1",
        "gold": "select transcript_date ,  other_details from transcripts order by transcript_date asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 569,
        "question": "What is the last transcript release date?",
        "predicted": "select t1.transaction_date from transcripts as t1 join transcript_contents as t2 on t1.transaction_id = t2.transaction_id",
        "gold": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 570,
        "question": "When was the last transcript released?",
        "predicted": "select date from transcripts order by date desc limit 1",
        "gold": "select transcript_date from transcripts order by transcript_date desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 571,
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "predicted": "select count(*), student_course_id from student_enrolment group by student_course_id order by count(*) desc limit 1",
        "gold": "select count(*) ,  student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 572,
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "predicted": "select t1.student_course_id, count(*) from student_course_enrolment as t1 join student_enrolment as t2 on t1.student_course_id = t2.course_id group by t1.course_id order by count(*) desc limit 1",
        "gold": "select count(*) ,  student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 573,
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_contents as t2 on t1.cript_id = t2.cript_id group by t1.cript_id order by count(*) asc limit 1",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 574,
        "question": "What is the date and id of the transcript with the least number of results?",
        "predicted": "select t1.date, t1.journal_id from transcripts as t1 join student_enrolment as t2 on t1.cript_id = t2.course_id group by t1.cript_id order by count(*) asc limit 1",
        "gold": "select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 575,
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "predicted": "select semester from student_enrolment where student_id = 'm' intersect select semester from student_enrolment where student_id = 'birth'",
        "gold": "select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 576,
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "predicted": "select semester_id from student_enrolment where student_id = 'm' intersect select semester_id from student_enrolment where student_id = 'birth'",
        "gold": "select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'bachelor'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 577,
        "question": "How many different addresses do the students currently live?",
        "predicted": "select count(distinct address_id) from students",
        "gold": "select count(distinct current_address_id) from students",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 578,
        "question": "What are the different addresses that have students living there?",
        "predicted": "select distinct t1.address_id from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.address_id",
        "gold": "select count(distinct current_address_id) from students",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 579,
        "question": "List all the student details in reversed lexicographical order.",
        "predicted": "select * from student_details order by student_details desc",
        "gold": "select other_student_details from students order by other_student_details desc",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 580,
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "predicted": "select other_details from students order by other_details desc",
        "gold": "select other_student_details from students order by other_student_details desc",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 581,
        "question": "Describe the section h.",
        "predicted": "select section_name from sections where semester_name = \"h\"",
        "gold": "select section_description from sections where section_name  =  'h'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 582,
        "question": "What is the description for the section named h?",
        "predicted": "select section_description from sections where section_name = \"h\"",
        "gold": "select section_description from sections where section_name  =  'h'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 583,
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "predicted": "select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t2.country = \"hafghanistan\" union select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t2.country = \"hapan\" and t1.number = \"09700166842\"",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 584,
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "predicted": "select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t1.country = \"hapanese\" union select t1.first_name from students as t1 join addresses as t2 on t1.student_id = t2.student_id where t2.city = \"09700\"",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "db_id": "student_transcripts_tracking"
      },
      {
        "index": 587,
        "question": "List all cartoon directed by \"Ben Jones\".",
        "predicted": "select title from cartoon where directed_by = \"ben jones\"",
        "gold": "select title from cartoon where directed_by = \"ben jones\";",
        "db_id": "tvshow"
      },
      {
        "index": 588,
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "predicted": "select title from cartoon where directed_by = \"benn jones\"",
        "gold": "select title from cartoon where directed_by = \"ben jones\";",
        "db_id": "tvshow"
      },
      {
        "index": 589,
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "predicted": "select count(*) from cartoon where directed_by = \"joseph\" and editor = \"kuhr\"",
        "gold": "select count(*) from cartoon where written_by = \"joseph kuhr\";",
        "db_id": "tvshow"
      },
      {
        "index": 590,
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "predicted": "select count(*) from cartoon where written_by = \"james kuhr\"",
        "gold": "select count(*) from cartoon where written_by = \"joseph kuhr\";",
        "db_id": "tvshow"
      },
      {
        "index": 591,
        "question": "list all cartoon titles and their directors ordered by their air date",
        "predicted": "select title, directed_by from cartoon order by air_date",
        "gold": "select title ,  directed_by from cartoon order by original_air_date",
        "db_id": "tvshow"
      },
      {
        "index": 592,
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "predicted": "select title, directed_by from cartoon order by air_date",
        "gold": "select title ,  directed_by from cartoon order by original_air_date",
        "db_id": "tvshow"
      },
      {
        "index": 593,
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "predicted": "select title from cartoon where directed_by = \"ben jones\" or written_by = \"brandon vietti\"",
        "gold": "select title from cartoon where directed_by = \"ben jones\" or directed_by = \"brandon vietti\";",
        "db_id": "tvshow"
      },
      {
        "index": 594,
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "predicted": "select title from cartoon where directed_by = \"billy jones\" or directed_by = \"rincent vietti\"",
        "gold": "select title from cartoon where directed_by = \"ben jones\" or directed_by = \"brandon vietti\";",
        "db_id": "tvshow"
      },
      {
        "index": 595,
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "predicted": "select country, count(*) from television_channel group by country order by count(*) desc limit 1",
        "gold": "select country ,  count(*) from tv_channel group by country order by count(*) desc limit 1;",
        "db_id": "tvshow"
      },
      {
        "index": 596,
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "predicted": "select country, count(*) from channel group by country order by count(*) desc limit 1",
        "gold": "select country ,  count(*) from tv_channel group by country order by count(*) desc limit 1;",
        "db_id": "tvshow"
      },
      {
        "index": 597,
        "question": "List the number of different series names and contents in the TV Channel table.",
        "predicted": "select count(distinct t1.series_name), count(distinct t1.contents) from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.title = \"tv channel\"",
        "gold": "select count(distinct series_name) ,  count(distinct content) from tv_channel;",
        "db_id": "tvshow"
      },
      {
        "index": 598,
        "question": "How many different series and contents are listed in the TV Channel table?",
        "predicted": "select count(distinct t1.series_name), count(distinct t1.contents) from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.title = \"tv channel\"",
        "gold": "select count(distinct series_name) ,  count(distinct content) from tv_channel;",
        "db_id": "tvshow"
      },
      {
        "index": 599,
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "predicted": "select content from tv_channel where series_name = \"sky radio\"",
        "gold": "select content from tv_channel where series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 600,
        "question": "What is the content of the series Sky Radio?",
        "predicted": "select content from t1.content where t1.title = \"c sky radio\"",
        "gold": "select content from tv_channel where series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 601,
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "predicted": "select package_option from t1.platform where t1.title = \"tv channel\" and t1.series_name = \"sky radio\"",
        "gold": "select package_option from tv_channel where series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 602,
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "predicted": "select t1.paket_option from t1.paket_option as t1 join t1.channel as t2 on t1.id = t2.channel_id join series as t3 on t1.series_id = t3.id where t3.series_name = \"c sky radio\"",
        "gold": "select package_option from tv_channel where series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 603,
        "question": "How many TV Channel using language English?",
        "predicted": "select count(*) from t1.language",
        "gold": "select count(*) from tv_channel where language = \"english\";",
        "db_id": "tvshow"
      },
      {
        "index": 604,
        "question": "How many TV Channels use the English language?",
        "predicted": "select count(*) from t1.language",
        "gold": "select count(*) from tv_channel where language = \"english\";",
        "db_id": "tvshow"
      },
      {
        "index": 605,
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "predicted": "select language, count(*) from television_channel group by language order by count(*) asc limit 1",
        "gold": "select language ,  count(*) from tv_channel group by language order by count(*) asc limit 1;",
        "db_id": "tvshow"
      },
      {
        "index": 606,
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "predicted": "select languages, count(*) from channel group by languages order by count(*) asc limit 1",
        "gold": "select language ,  count(*) from tv_channel group by language order by count(*) asc limit 1;",
        "db_id": "tvshow"
      },
      {
        "index": 607,
        "question": "List each language and the number of TV Channels using it.",
        "predicted": "select language, count(*) from television_channel group by languages",
        "gold": "select language ,  count(*) from tv_channel group by language",
        "db_id": "tvshow"
      },
      {
        "index": 608,
        "question": "For each language, list the number of TV Channels that use it.",
        "predicted": "select language, count(*) from television_channel group by languages",
        "gold": "select language ,  count(*) from tv_channel group by language",
        "db_id": "tvshow"
      },
      {
        "index": 609,
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "predicted": "select t2.series_name from cartoon as t1 join t1.series as t2 on t1.id = t2.series_id join tv_channel as t3 on t1.id = t3.channel_id where t1.title = \"the rise of the blue beetle\"",
        "gold": "select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"the rise of the blue beetle!\";",
        "db_id": "tvshow"
      },
      {
        "index": 610,
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "predicted": "select t1.series_name from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id join cartoon as t3 on t2.characteristic_id = t3.id where t3.title = \"the rise of the blue beetle\"",
        "gold": "select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"the rise of the blue beetle!\";",
        "db_id": "tvshow"
      },
      {
        "index": 611,
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "predicted": "select t1.title from cartoon as t1 join t1.characteristic as t2 on t1.id = t2.characteristic_id join series as t3 on t2.series_id = t3.id where t3.series_name = \"sky radio\"",
        "gold": "select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 612,
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "predicted": "select t3.title from television as t1 join t1.series as t2 on t1.id = t2.station_id join cartoon as t3 on t1.series_id = t3.id where t1.series_name = \"ttv channel\" and t1.series_name = \"sky radio\"",
        "gold": "select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 614,
        "question": "What are all of the episodes ordered by ratings?",
        "predicted": "select * from episode order by rating",
        "gold": "select episode from tv_series order by rating",
        "db_id": "tvshow"
      },
      {
        "index": 615,
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "predicted": "select episode, rating from tv_series order by rating desc limit 3",
        "gold": "select episode ,  rating from tv_series order by rating desc limit 3;",
        "db_id": "tvshow"
      },
      {
        "index": 616,
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "predicted": "select having count(*), t1.rating from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id where t2.title = \"tv series\" group by t1.id order by count(*) desc limit 3",
        "gold": "select episode ,  rating from tv_series order by rating desc limit 3;",
        "db_id": "tvshow"
      },
      {
        "index": 617,
        "question": "What is minimum and maximum share of TV series?",
        "predicted": "select min(share_times), max(share_times) from t1.series",
        "gold": "select max(share) , min(share) from tv_series;",
        "db_id": "tvshow"
      },
      {
        "index": 618,
        "question": "What is the maximum and minimum share for the TV series?",
        "predicted": "select max(share_time), min(share_time_staff) from t1.series",
        "gold": "select max(share) , min(share) from tv_series;",
        "db_id": "tvshow"
      },
      {
        "index": 619,
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "predicted": "select t2.airport_date from tv_series as t1 join series as t2 on t1.series_id = t2.id where t1.title = \"a love of a lifetime\"",
        "gold": "select air_date from tv_series where episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 620,
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "predicted": "select date from aircraft where title = \"a love of a lifetime\"",
        "gold": "select air_date from tv_series where episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 621,
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "predicted": "select weekly_rank from tv_series where episode = \"a love of a lifetime\"",
        "gold": "select weekly_rank from tv_series where episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 622,
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "predicted": "select weekly_rank from episode where episode = \"a love of a lifetime\"",
        "gold": "select weekly_rank from tv_series where episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 623,
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "predicted": "select t2.platform_name from episodes as t1 join tv_channel as t2 on t1.id = t2.tv_channel_id where t1.title = \"a love of a lifetime\"",
        "gold": "select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 624,
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "predicted": "select t2.series_name from episode as t1 join series as t2 on t1.series_id = t2.id where t1.title = \"a love of a lifetime\"",
        "gold": "select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"a love of a lifetime\";",
        "db_id": "tvshow"
      },
      {
        "index": 625,
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "predicted": "select t1.event from tv_series as t1 join t1.series as t2 on t1.id = t2.series_id join tv_series as t3 on t2.series_id = t3.id where t3.series_name = \"sky radio\"",
        "gold": "select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 626,
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "predicted": "select t1.event from t1.event as t1 join series as t2 on t1.series_id = t2.id where t2.title = \"sky radio\"",
        "gold": "select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";",
        "db_id": "tvshow"
      },
      {
        "index": 627,
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "predicted": "select directed_by, count(*) from cartoon group by directed_by",
        "gold": "select count(*) ,  directed_by from cartoon group by directed_by",
        "db_id": "tvshow"
      },
      {
        "index": 628,
        "question": "How many cartoons did each director create?",
        "predicted": "select created_by, count(*) from cartoon group by created_by",
        "gold": "select count(*) ,  directed_by from cartoon group by directed_by",
        "db_id": "tvshow"
      },
      {
        "index": 629,
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "predicted": "select production_code, channel from cartoon order by date desc limit 1",
        "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "db_id": "tvshow"
      },
      {
        "index": 630,
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "predicted": "select produdction_code, channel from cartoon order by date desc limit 1",
        "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "db_id": "tvshow"
      },
      {
        "index": 631,
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "predicted": "select t1.paket_name, t1.series_name from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel_id where t2.channel = \"tv\" group by t2.channel order by count(*) desc limit 1",
        "gold": "select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\"",
        "db_id": "tvshow"
      },
      {
        "index": 632,
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "predicted": "select t1.paket_name, t1.series_name from t1.series as t1 join t1.series as t2 on t1.id = t2.series_id join tv as t3 on t2.tv_channel = t3.id where t3.channel = \"tv channel\" order by high_definition desc limit 1",
        "gold": "select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\"",
        "db_id": "tvshow"
      },
      {
        "index": 633,
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "predicted": "select t1.country from t1.country as t1 join t1.country as t2 on t1.id = t2.country_id join cartoon as t3 on t2.artist_id = t3.id where t3.directed_by = \" todd casey\"",
        "gold": "select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey'",
        "db_id": "tvshow"
      },
      {
        "index": 634,
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "predicted": "select t1.country from t1.country as t1 join cartoon as t2 on t1.id = t2.artist_id where t2.directed_by = \"t todd casey\"",
        "gold": "select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey'",
        "db_id": "tvshow"
      },
      {
        "index": 635,
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "predicted": "select country from t1.country where id not in (select country from cartoon where written_by = \"t todd casey\")",
        "gold": "select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey'",
        "db_id": "tvshow"
      },
      {
        "index": 636,
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "predicted": "select country from t1.country except select country from t1.country as t1 join cartoon as t2 on t1.id = t2.artist_id where t2.directed_by = \"t todd casey\"",
        "gold": "select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey'",
        "db_id": "tvshow"
      },
      {
        "index": 637,
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "predicted": "select t2.series_name, t2.country from t1.channel as t1 join t1.series as t2 on t1.id = t2.channel_id join cartoon as t3 on t1.series_id = t3.id where t3.directed_by = \"billy jones\" intersect select t2.series_name, t1.country from t1.channel as t1 join t1.channel as t2 on t1.id = t2.channel where t3.directed_by = \"michael chang\"",
        "gold": "select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'michael chang' intersect select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 638,
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "predicted": "select t2.series_name, t2.country from t1.channel as t1 join t1.series as t2 on t1.id = t2.channel_id join cartoon as t3 on t1.series_id = t3.id where t3.directed_by = t2.by t3.directed_by = t1.id join channel as t4 on t3.channel_id = t4.id where t4.directed_by = 'beijing chang'",
        "gold": "select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'michael chang' intersect select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 639,
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "predicted": "select pixel_actor, country from t1.id where t1.pixel_actory!= 'english'",
        "gold": "select pixel_aspect_ratio_par ,  country from tv_channel where language != 'english'",
        "db_id": "tvshow"
      },
      {
        "index": 640,
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "predicted": "select pixel_attribute_rate, country from tv_channel where channel!= \"english\"",
        "gold": "select pixel_aspect_ratio_par ,  country from tv_channel where language != 'english'",
        "db_id": "tvshow"
      },
      {
        "index": 641,
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "predicted": "select t1.id from t1.country as t1 join t1.country as t2 on t1.id = t2.country group by t2.country having count(*) > 2",
        "gold": "select id from tv_channel group by country having count(*)  >  2",
        "db_id": "tvshow"
      },
      {
        "index": 642,
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "predicted": "select channel from t1.id group by channel having count(*) > 2",
        "gold": "select id from tv_channel group by country having count(*)  >  2",
        "db_id": "tvshow"
      },
      {
        "index": 643,
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "predicted": "select id from channel except select channel from cartoon where directed_by = \"benn jones\"",
        "gold": "select id from tv_channel except select channel from cartoon where directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 644,
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "predicted": "select channel from tv_channel except select channel from cartoon where directed_by = \"benn jones\"",
        "gold": "select id from tv_channel except select channel from cartoon where directed_by  =  'ben jones'",
        "db_id": "tvshow"
      },
      {
        "index": 645,
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "predicted": "select t1.paket_option from t1.channel except select t1.paket_option from t1.channel as t1 join t2.channel_id from t1.channel_id as t2 on t1.id = t2.channel_id join cartoon as t3 on t2.characteristic_id = t3.id where t3.directed_by = \"benn jones\"",
        "gold": "select package_option from tv_channel where id not in (select channel from cartoon where directed_by  =  'ben jones')",
        "db_id": "tvshow"
      },
      {
        "index": 646,
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "predicted": "select distinct channel from t1.channel except select t1.paket_option from t1.channel as t1 join t2.channel as t2 on t1.id = t2.channel_id join cartoon as t3 on t2.characteristic_id = t3.id where t3.directed_by = \"benn jones\"",
        "gold": "select package_option from tv_channel where id not in (select channel from cartoon where directed_by  =  'ben jones')",
        "db_id": "tvshow"
      },
      {
        "index": 649,
        "question": "List the earnings of poker players in descending order.",
        "predicted": "select profit from poker_player order by profit desc",
        "gold": "select earnings from poker_player order by earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 650,
        "question": "What are the earnings of poker players, ordered descending by value?",
        "predicted": "select t1.money from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.professor desc",
        "gold": "select earnings from poker_player order by earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 651,
        "question": "List the final tables made and the best finishes of poker players.",
        "predicted": "select t1.lat_table_made, t1.date from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t2.best_score desc limit 1",
        "gold": "select final_table_made ,  best_finish from poker_player",
        "db_id": "poker_player"
      },
      {
        "index": 652,
        "question": "What are the final tables made and best finishes for all poker players?",
        "predicted": "select t1.lat_table_made, t2.max(t2.money_date) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "gold": "select final_table_made ,  best_finish from poker_player",
        "db_id": "poker_player"
      },
      {
        "index": 653,
        "question": "What is the average earnings of poker players?",
        "predicted": "select avg(money) from poker_player",
        "gold": "select avg(earnings) from poker_player",
        "db_id": "poker_player"
      },
      {
        "index": 654,
        "question": "Return the average earnings across all poker players.",
        "predicted": "select avg(money) from poker_player",
        "gold": "select avg(earnings) from poker_player",
        "db_id": "poker_player"
      },
      {
        "index": 655,
        "question": "What is the money rank of the poker player with the highest earnings?",
        "predicted": "select t1.money_ranking from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc limit 1",
        "gold": "select money_rank from poker_player order by earnings desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 656,
        "question": "Return the money rank of the player with the greatest earnings.",
        "predicted": "select money_rank from poker_player order by money desc limit 1",
        "gold": "select money_rank from poker_player order by earnings desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 657,
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "predicted": "select max(t1.lat_table_made) from poker_player as t1 join people as t2 on t1.phone_id = t2.people_id where t1.money  200000",
        "gold": "select max(final_table_made) from poker_player where earnings  <  200000",
        "db_id": "poker_player"
      },
      {
        "index": 658,
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "predicted": "select max(t1.lat_table_made) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.assets  200000",
        "gold": "select max(final_table_made) from poker_player where earnings  <  200000",
        "db_id": "poker_player"
      },
      {
        "index": 659,
        "question": "What are the names of poker players?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id",
        "db_id": "poker_player"
      },
      {
        "index": 660,
        "question": "Return the names of all the poker players.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id",
        "db_id": "poker_player"
      },
      {
        "index": 661,
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.money > 300000",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t2.earnings  >  300000",
        "db_id": "poker_player"
      },
      {
        "index": 662,
        "question": "Give the names of poker players who have earnings above 300000.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.money > 300000",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t2.earnings  >  300000",
        "db_id": "poker_player"
      },
      {
        "index": 663,
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.date asc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.final_table_made",
        "db_id": "poker_player"
      },
      {
        "index": 664,
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.date asc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.final_table_made",
        "db_id": "poker_player"
      },
      {
        "index": 665,
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "predicted": "select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc limit 1",
        "gold": "select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings asc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 666,
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "predicted": "select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money asc limit 1",
        "gold": "select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings asc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 667,
        "question": "What is the money rank of the tallest poker player?",
        "predicted": "select t1.money_ranking from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "gold": "select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t1.height desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 668,
        "question": "Return the money rank of the poker player with the greatest height.",
        "predicted": "select t1.money_rank from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t2.height desc limit 1",
        "gold": "select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t1.height desc limit 1",
        "db_id": "poker_player"
      },
      {
        "index": 669,
        "question": "What is the average earnings of poker players with height higher than 200?",
        "predicted": "select avg(t1.money) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200",
        "gold": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t1.height  >  200",
        "db_id": "poker_player"
      },
      {
        "index": 670,
        "question": "Give average earnings of poker players who are taller than 200.",
        "predicted": "select avg(t1.money) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200",
        "gold": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t1.height  >  200",
        "db_id": "poker_player"
      },
      {
        "index": 671,
        "question": "What are the names of poker players in descending order of earnings?",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.profits desc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 672,
        "question": "Return the names of poker players sorted by their earnings descending.",
        "predicted": "select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.money desc",
        "gold": "select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc",
        "db_id": "poker_player"
      },
      {
        "index": 673,
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "predicted": "select nationality, count(*) from people group by nationality",
        "gold": "select nationality ,  count(*) from people group by nationality",
        "db_id": "poker_player"
      },
      {
        "index": 674,
        "question": "How many people are there of each nationality?",
        "predicted": "select nationality, count(*) from people group by nationality",
        "gold": "select nationality ,  count(*) from people group by nationality",
        "db_id": "poker_player"
      },
      {
        "index": 679,
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "predicted": "select name, birth_date from people order by name asc",
        "gold": "select name ,  birth_date from people order by name asc",
        "db_id": "poker_player"
      },
      {
        "index": 680,
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "predicted": "select name, birth_date from people order by name asc",
        "gold": "select name ,  birth_date from people order by name asc",
        "db_id": "poker_player"
      },
      {
        "index": 681,
        "question": "Show names of people whose nationality is not \"Russia\".",
        "predicted": "select name from people where nationality!= \"russia\"",
        "gold": "select name from people where nationality != \"russia\"",
        "db_id": "poker_player"
      },
      {
        "index": 682,
        "question": "What are the names of people who are not from Russia?",
        "predicted": "select name from people where nationality!= \"russia\"",
        "gold": "select name from people where nationality != \"russia\"",
        "db_id": "poker_player"
      },
      {
        "index": 687,
        "question": "How many states are there?",
        "predicted": "select count(*) from area_code",
        "gold": "select count(*) from area_code_state",
        "db_id": "voter_1"
      },
      {
        "index": 688,
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "predicted": "select contestant_number, name from contestants order by contestant_name desc",
        "gold": "select contestant_number ,  contestant_name from contestants order by contestant_name desc",
        "db_id": "voter_1"
      },
      {
        "index": 689,
        "question": "List the vote ids, phone numbers and states of all votes.",
        "predicted": "select vote_id, phone_number, state from votes",
        "gold": "select vote_id ,  phone_number ,  state from votes",
        "db_id": "voter_1"
      },
      {
        "index": 690,
        "question": "What are the maximum and minimum values of area codes?",
        "predicted": "select max(area_code), min(area_code) from area_code",
        "gold": "select max(area_code) ,  min(area_code) from area_code_state",
        "db_id": "voter_1"
      },
      {
        "index": 691,
        "question": "What is last date created of votes from the state 'CA'?",
        "predicted": "select t1.latin_date from votes as t1 join state as t2 on t1.state = t2.district where t2.state = \"ca\"",
        "gold": "select max(created) from votes where state  =  'ca'",
        "db_id": "voter_1"
      },
      {
        "index": 692,
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "predicted": "select contestant_name from contestants where contestant_name!= \"jessie alloway\"",
        "gold": "select contestant_name from contestants where contestant_name != 'jessie alloway'",
        "db_id": "voter_1"
      },
      {
        "index": 693,
        "question": "What are the distinct states and create time of all votes?",
        "predicted": "select distinct t1.state, t1.created from state as t1 join votes as t2 on t1.state = t2.state",
        "gold": "select distinct state ,  created from votes",
        "db_id": "voter_1"
      },
      {
        "index": 694,
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "predicted": "select t2.advisor_number, t1.name from votes as t1 join contestants as t2 on t1.country_tony = t2.country group by t1.country_number having count(*) >= 2",
        "gold": "select t1.contestant_number , t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number group by t1.contestant_number having count(*)  >=  2",
        "db_id": "voter_1"
      },
      {
        "index": 695,
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "predicted": "select t2.advisor, t2.name from votes as t1 join contestants as t2 on t1.tony = t2.tony_number group by t2.tony_number order by count(*) asc limit 1",
        "gold": "select t1.contestant_number , t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number group by t1.contestant_number order by count(*) asc limit 1",
        "db_id": "voter_1"
      },
      {
        "index": 697,
        "question": "How many contestants did not get voted?",
        "predicted": "select count(*) from contestants where contestant_id not in (select contestant from votes)",
        "gold": "select count(*) from contestants where contestant_number not in ( select contestant_number from votes )",
        "db_id": "voter_1"
      },
      {
        "index": 698,
        "question": "What is the area code in which the most voters voted?",
        "predicted": "select t1.area_code from area_code as t1 join votes as t2 on t1.area_code = t2.area_code group by t1.area_code order by count(*) desc limit 1",
        "gold": "select t1.area_code from area_code_state as t1 join votes as t2 on t1.state  =  t2.state group by t1.area_code order by count(*) desc limit 1",
        "db_id": "voter_1"
      },
      {
        "index": 699,
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "predicted": "select t1.date, t1.state, t1.phone_number from votes as t1 join contestants as t2 on t1.vote = t2.vote_id where t2.name = 'tabatha gehling'",
        "gold": "select t2.created ,  t2.state ,  t2.phone_number from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number where t1.contestant_name  =  'tabatha gehling'",
        "db_id": "voter_1"
      },
      {
        "index": 700,
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "predicted": "select t1.area_code from areas as t1 join votes as t2 on t1.area_code = t2.area_code join contestants as t3 on t1.country_id = t3.country where t3.title = 'tabatha' and t2.affirmation = 'kelly clauss'",
        "gold": "select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number join area_code_state as t3 on t2.state  =  t3.state where t1.contestant_name  =  'tabatha gehling' intersect select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number join area_code_state as t3 on t2.state  =  t3.state where t1.contestant_name  =  'kelly clauss'",
        "db_id": "voter_1"
      },
      {
        "index": 701,
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "predicted": "select contestant_name from contestants where contestant_name like '%al%'",
        "gold": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "db_id": "voter_1"
      },
      {
        "index": 702,
        "question": "What are the names of all the countries that became independent after 1950?",
        "predicted": "select name from country where independence_year > 1950",
        "gold": "select name from country where indepyear  >  1950",
        "db_id": "world_1"
      },
      {
        "index": 703,
        "question": "Give the names of the nations that were founded after 1950.",
        "predicted": "select name from country where founded > 1950",
        "gold": "select name from country where indepyear  >  1950",
        "db_id": "world_1"
      },
      {
        "index": 704,
        "question": "How many countries have a republic as their form of government?",
        "predicted": "select count(*) from country where government = 'governor'",
        "gold": "select count(*) from country where governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 705,
        "question": "How many countries have governments that are republics?",
        "predicted": "select count(distinct country_code) from country",
        "gold": "select count(*) from country where governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 706,
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "predicted": "select sum(surface_area) from country where country = 'cancelled'",
        "gold": "select sum(surfacearea) from country where region  =  \"caribbean\"",
        "db_id": "world_1"
      },
      {
        "index": 707,
        "question": "How much surface area do the countires in the Carribean cover together?",
        "predicted": "select count(*) from country as t1 join sqlite_area as t2 on t1.id = t2.country_code where t1.name = \"carribean\"",
        "gold": "select sum(surfacearea) from country where region  =  \"caribbean\"",
        "db_id": "world_1"
      },
      {
        "index": 708,
        "question": "Which continent is Anguilla in?",
        "predicted": "select continent from country where nationality = \"anguilla\"",
        "gold": "select continent from country where name  =  \"anguilla\"",
        "db_id": "world_1"
      },
      {
        "index": 709,
        "question": "What is the continent name which Anguilla belongs to?",
        "predicted": "select t1.continent from country as t1 join country as t2 on t1.country_code = t2.country where t2.name = \"anguilla\"",
        "gold": "select continent from country where name  =  \"anguilla\"",
        "db_id": "world_1"
      },
      {
        "index": 710,
        "question": "Which region is the city Kabul located in?",
        "predicted": "select t1.area from country as t1 join country as t2 on t1.country_code = t2.country where t2.name = \"kayaking\"",
        "gold": "select region from country as t1 join city as t2 on t1.code  =  t2.countrycode where t2.name  =  \"kabul\"",
        "db_id": "world_1"
      },
      {
        "index": 711,
        "question": "What region is Kabul in?",
        "predicted": "select region from country where city = \"bangul\"",
        "gold": "select region from country as t1 join city as t2 on t1.code  =  t2.countrycode where t2.name  =  \"kabul\"",
        "db_id": "world_1"
      },
      {
        "index": 712,
        "question": "Which language is the most popular in Aruba?",
        "predicted": "select language from country_language where country_name = \"aruba\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 713,
        "question": "What language is predominantly spoken in Aruba?",
        "predicted": "select language from country_language where country_name = \"aruba\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 714,
        "question": "What are the population and life expectancies in Brazil?",
        "predicted": "select population, life_attendance from country where country = 'brazil'",
        "gold": "select population ,  lifeexpectancy from country where name  =  \"brazil\"",
        "db_id": "world_1"
      },
      {
        "index": 715,
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "predicted": "select population, life_attendance from country where country = \"brazil\"",
        "gold": "select population ,  lifeexpectancy from country where name  =  \"brazil\"",
        "db_id": "world_1"
      },
      {
        "index": 716,
        "question": "What are the region and population of Angola?",
        "predicted": "select region, population from country where country = \"agola\"",
        "gold": "select population ,  region from country where name  =  \"angola\"",
        "db_id": "world_1"
      },
      {
        "index": 717,
        "question": "What region does Angola belong to and what is its population?",
        "predicted": "select t1.region, t1.population from country as t1 join country as t2 on t1.country_code = t2.country_code where t2.name = \"angola\"",
        "gold": "select population ,  region from country where name  =  \"angola\"",
        "db_id": "world_1"
      },
      {
        "index": 718,
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.region_code = \"central africa\"",
        "gold": "select avg(lifeexpectancy) from country where region  =  \"central africa\"",
        "db_id": "world_1"
      },
      {
        "index": 719,
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country = \"central africa\"",
        "gold": "select avg(lifeexpectancy) from country where region  =  \"central africa\"",
        "db_id": "world_1"
      },
      {
        "index": 720,
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "predicted": "select name from country where country = 'asia' order by lifestance limit 1",
        "gold": "select name from country where continent  =  \"asia\" order by lifeexpectancy limit 1",
        "db_id": "world_1"
      },
      {
        "index": 721,
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "predicted": "select name from country where country = 'asia' order by life_attendance limit 1",
        "gold": "select name from country where continent  =  \"asia\" order by lifeexpectancy limit 1",
        "db_id": "world_1"
      },
      {
        "index": 722,
        "question": "What is the total population and maximum GNP in Asia?",
        "predicted": "select sum(population), max(gnp) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"aspan\"",
        "gold": "select sum(population) ,  max(gnp) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 723,
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "predicted": "select count(*), country_code from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"aspan\" group by t1.country_code order by count(*) desc limit 1",
        "gold": "select sum(population) ,  max(gnp) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 724,
        "question": "What is the average life expectancy in African countries that are republics?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"africa\"",
        "gold": "select avg(lifeexpectancy) from country where continent  =  \"africa\" and governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 725,
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "predicted": "select avg(lifet1.lifettancy) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country = \"africa\"",
        "gold": "select avg(lifeexpectancy) from country where continent  =  \"africa\" and governmentform  =  \"republic\"",
        "db_id": "world_1"
      },
      {
        "index": 726,
        "question": "What is the total surface area of the continents Asia and Europe?",
        "predicted": "select sum(surface_area) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country_name = \"asia\" intersect select sum(t1.surface_area) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"europea\"",
        "gold": "select sum(surfacearea) from country where continent  =  \"asia\" or continent  =  \"europe\"",
        "db_id": "world_1"
      },
      {
        "index": 727,
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "predicted": "select sum(surface_area) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"aspan\" or t1.country_code = \"europea\"",
        "gold": "select sum(surfacearea) from country where continent  =  \"asia\" or continent  =  \"europe\"",
        "db_id": "world_1"
      },
      {
        "index": 728,
        "question": "How many people live in Gelderland district?",
        "predicted": "select count(*) from city as t1 join city as t2 on t1.city_code = t2.id where t1.district = \"monerland\"",
        "gold": "select sum(population) from city where district  =  \"gelderland\"",
        "db_id": "world_1"
      },
      {
        "index": 729,
        "question": "What is the total population of Gelderland district?",
        "predicted": "select sum(population) from city where district = \"brown\"",
        "gold": "select sum(population) from city where district  =  \"gelderland\"",
        "db_id": "world_1"
      },
      {
        "index": 730,
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "predicted": "select avg(t1.gnp), sum(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.governor = \"united states\"",
        "gold": "select avg(gnp) ,  sum(population) from country where governmentform  =  \"us territory\"",
        "db_id": "world_1"
      },
      {
        "index": 731,
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "predicted": "select avg(t1.gnp), sum(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country_code = \"united states\"",
        "gold": "select avg(gnp) ,  sum(population) from country where governmentform  =  \"us territory\"",
        "db_id": "world_1"
      },
      {
        "index": 732,
        "question": "How many unique languages are spoken in the world?",
        "predicted": "select count(distinct language) from country_language",
        "gold": "select count(distinct language) from countrylanguage",
        "db_id": "world_1"
      },
      {
        "index": 733,
        "question": "What is the number of distinct languages used around the world?",
        "predicted": "select count(distinct language) from country",
        "gold": "select count(distinct language) from countrylanguage",
        "db_id": "world_1"
      },
      {
        "index": 734,
        "question": "How many type of governments are in Africa?",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"africa\"",
        "gold": "select count(distinct governmentform) from country where continent  =  \"africa\"",
        "db_id": "world_1"
      },
      {
        "index": 735,
        "question": "How many different forms of governments are there in Africa?",
        "predicted": "select count(distinct government_form) from country as t1 join country as t2 on t1.country_code = t2.country where t1.country = \"africa\"",
        "gold": "select count(distinct governmentform) from country where continent  =  \"africa\"",
        "db_id": "world_1"
      },
      {
        "index": 736,
        "question": "What is the total number of languages used in Aruba?",
        "predicted": "select count(*) from country as t1 join country_language as t2 on t1.country_code = t2.country where t1.country = \"aruba\"",
        "gold": "select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\"",
        "db_id": "world_1"
      },
      {
        "index": 737,
        "question": "How many languages are spoken in Aruba?",
        "predicted": "select count(*) from country_language where country = \"aruba\"",
        "gold": "select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\"",
        "db_id": "world_1"
      },
      {
        "index": 738,
        "question": "How many official languages does Afghanistan have?",
        "predicted": "select count(*) from country_language where country = \"afghanistan\"",
        "gold": "select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"afghanistan\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 739,
        "question": "How many official languages are spoken in Afghanistan?",
        "predicted": "select count(*) from country_language where country = \"afghanistan\"",
        "gold": "select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"afghanistan\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 740,
        "question": "What is name of the country that speaks the largest number of languages?",
        "predicted": "select t1.country_name from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code order by count(*) desc limit 1",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 741,
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 742,
        "question": "Which continent has the most diverse languages?",
        "predicted": "select t1.country from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country order by count(*) desc limit 1",
        "gold": "select t1.continent from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 743,
        "question": "Which continent speaks the most languages?",
        "predicted": "select t1.country from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code order by count(*) desc limit 1",
        "gold": "select t1.continent from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.continent order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 744,
        "question": "How many countries speak both English and Dutch?",
        "predicted": "select count(*) from country where languages = \"english\" intersect select count(*) from country where languages = \"english\"",
        "gold": "select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\")",
        "db_id": "world_1"
      },
      {
        "index": 745,
        "question": "What is the number of nations that use English and Dutch?",
        "predicted": "select count(*) from country where languages = \"english\" intersect select count(*) from country where languages = \"english\"",
        "gold": "select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\")",
        "db_id": "world_1"
      },
      {
        "index": 746,
        "question": "What are the names of nations speak both English and French?",
        "predicted": "select name from country where language = \"english\" intersect select name from country where language = \"franchise\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\"",
        "db_id": "world_1"
      },
      {
        "index": 747,
        "question": "Give the names of nations that speak both English and French.",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" intersect select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country_code where t2.language = \"english\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\"",
        "db_id": "world_1"
      },
      {
        "index": 748,
        "question": "What are the names of nations where both English and French are official languages?",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" intersect select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country_code where t2.language = \"france\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 749,
        "question": "Give the names of countries with English and French as official languages.",
        "predicted": "select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" intersect select t1.name from country as t1 join country_language as t2 on t1.country_code = t2.country_code where t2.official_population = \"franchise\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 750,
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "predicted": "select count(distinct continent) from country where language = \"chinese\"",
        "gold": "select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"chinese\"",
        "db_id": "world_1"
      },
      {
        "index": 751,
        "question": "How many continents speak Chinese?",
        "predicted": "select count(*) from country where language = \"chinese\"",
        "gold": "select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"chinese\"",
        "db_id": "world_1"
      },
      {
        "index": 752,
        "question": "What are the regions that use English or Dutch?",
        "predicted": "select region from country where languages = \"english\" or languages = \"english\"",
        "gold": "select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" or t2.language  =  \"dutch\"",
        "db_id": "world_1"
      },
      {
        "index": 753,
        "question": "Which regions speak Dutch or English?",
        "predicted": "select region from country where language = \"english\" or language = \"english\"",
        "gold": "select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" or t2.language  =  \"dutch\"",
        "db_id": "world_1"
      },
      {
        "index": 754,
        "question": "What are the countries where either English or Dutch is the official language ?",
        "predicted": "select country from country where languages = \"english\" or languages = \"native\"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 755,
        "question": "Which countries have either English or Dutch as an official language?",
        "predicted": "select t1.country from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.language = \"english\" or t2.language = \"native\"",
        "gold": "select * from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select * from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 756,
        "question": "Which language is the most popular on the Asian continent?",
        "predicted": "select language from country where t1.country = \"asian\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  \"asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 757,
        "question": "What is the language that is used by the largest number of Asian nations?",
        "predicted": "select language from country_language where country_name = \"asian\" group by language order by count(*) desc limit 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  \"asia\" group by t2.language order by count (*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 758,
        "question": "Which languages are spoken by only one country in republic governments?",
        "predicted": "select language from country_language group by language having count(*) = 1",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.governmentform  =  \"republic\" group by t2.language having count(*)  =  1",
        "db_id": "world_1"
      },
      {
        "index": 759,
        "question": "What languages are only used by a single country with a republic government?",
        "predicted": "select language from country where state = \"japan\" group by language",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.governmentform  =  \"republic\" group by t2.language having count(*)  =  1",
        "db_id": "world_1"
      },
      {
        "index": 760,
        "question": "Find the city with the largest population that uses English.",
        "predicted": "select city from city where country_code = \"english\" group by city_code order by population desc limit 1",
        "gold": "select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 761,
        "question": "What is the most populace city that speaks English?",
        "predicted": "select city from city where country_code = \"english\" group by city order by count(*) desc limit 1",
        "gold": "select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 762,
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "predicted": "select name, population, expected_from country from country where country = 'asian' order by population desc limit 1",
        "gold": "select name ,  population ,  lifeexpectancy from country where continent  =  \"asia\" order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 763,
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "predicted": "select name, population, life_attendancy from country where country = 'asian' order by country_name desc limit 1",
        "gold": "select name ,  population ,  lifeexpectancy from country where continent  =  \"asia\" order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 764,
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "predicted": "select avg(life_attendance) from country where country!= \"english\"",
        "gold": "select avg(lifeexpectancy) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\")",
        "db_id": "world_1"
      },
      {
        "index": 765,
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "predicted": "select avg(life_attendance) from country where country!= \"english\"",
        "gold": "select avg(lifeexpectancy) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\")",
        "db_id": "world_1"
      },
      {
        "index": 766,
        "question": "What is the total number of people living in the nations that do not use English?",
        "predicted": "select count(*) from country where country_code not in (select country_code from country where languages = \"english\")",
        "gold": "select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\")",
        "db_id": "world_1"
      },
      {
        "index": 767,
        "question": "How many people live in countries that do not speak English?",
        "predicted": "select count(*) from country where country_code not in (select country_code from country where languages = \"english\")",
        "gold": "select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\")",
        "db_id": "world_1"
      },
      {
        "index": 768,
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "predicted": "select t1.official_female from country_language as t1 join country as t2 on t1.country_code = t2.country where t2.heightrix\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.headofstate  =  \"beatrix\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 769,
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "predicted": "select t1.official_female from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.heightrix\"",
        "gold": "select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.headofstate  =  \"beatrix\" and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 770,
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "predicted": "select count(distinct t1.official_percentage) from country as t1 join country_language as t2 on t1.country_code = t2.country where t1.year  1930",
        "gold": "select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where  indepyear  <  1930 and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 771,
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "predicted": "select count(distinct t1.official_population) from country as t1 join country_language as t2 on t1.country_code = t2.country where t2.founded  1930",
        "gold": "select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where  indepyear  <  1930 and t2.isofficial  =  \"t\"",
        "db_id": "world_1"
      },
      {
        "index": 772,
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "predicted": "select country_code from country where surface > (select max(surface_area) from country where country = \"europea\")",
        "gold": "select name from country where surfacearea  >  (select min(surfacearea) from country where continent  =  \"europe\")",
        "db_id": "world_1"
      },
      {
        "index": 773,
        "question": "Which countries have greater area than that of any country in Europe?",
        "predicted": "select country from country where area > (select max(area) from country where country = \"europea\")",
        "gold": "select name from country where surfacearea  >  (select min(surfacearea) from country where continent  =  \"europe\")",
        "db_id": "world_1"
      },
      {
        "index": 774,
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "predicted": "select country from country where population  (select max(population) from country where country = 'asie')",
        "gold": "select name from country where continent  =  \"africa\"  and population  <  (select max(population) from country where continent  =  \"asia\")",
        "db_id": "world_1"
      },
      {
        "index": 775,
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "predicted": "select country from country where population  (select min(population) from country where country = 'asie')",
        "gold": "select name from country where continent  =  \"africa\"  and population  <  (select min(population) from country where continent  =  \"asia\")",
        "db_id": "world_1"
      },
      {
        "index": 776,
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "predicted": "select country from country where population > (select max(population) from country where country = 'africa')",
        "gold": "select name from country where continent  =  \"asia\"  and population  >  (select max(population) from country where continent  =  \"africa\")",
        "db_id": "world_1"
      },
      {
        "index": 777,
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "predicted": "select country from country where population > (select max(population) from country where country = 'africa')",
        "gold": "select name from country where continent  =  \"asia\"  and population  >  (select min(population) from country where continent  =  \"africa\")",
        "db_id": "world_1"
      },
      {
        "index": 778,
        "question": "What are the country codes for countries that do not speak English?",
        "predicted": "select country_code from country where country_code not in (select country_code from country_language where languages = \"english\")",
        "gold": "select countrycode from countrylanguage except select countrycode from countrylanguage where language  =  \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 779,
        "question": "Return the country codes for countries that do not speak English.",
        "predicted": "select country_code from country where country_code not in (select country_code from country_language where languages = \"english\")",
        "gold": "select countrycode from countrylanguage except select countrycode from countrylanguage where language  =  \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 780,
        "question": "What are the country codes of countries where people use languages other than English?",
        "predicted": "select country_code from country where languages > (select country_code from country_language where languages = \"english\")",
        "gold": "select distinct countrycode from countrylanguage where language != \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 781,
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "predicted": "select country_code from country where languages!= \"english\"",
        "gold": "select distinct countrycode from countrylanguage where language != \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 782,
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "predicted": "select country_code from country where country_code not in (select country_code from country_language where country_form!= \"english\") intersect select country_code from country_language where government_form!= \"governor\"",
        "gold": "select code from country where governmentform != \"republic\" except select countrycode from countrylanguage where language  =  \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 783,
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "predicted": "select country_code from country where country_code not in (select country_code from country_language where country_name = \"english\") except select country_code from country_language where state = \"governor\")",
        "gold": "select code from country where governmentform != \"republic\" except select countrycode from countrylanguage where language  =  \"english\"",
        "db_id": "world_1"
      },
      {
        "index": 784,
        "question": "Which cities are in European countries where English is not the official language?",
        "predicted": "select city from city where country_code = \"european\" except select city from country_language where country = \"english\"",
        "gold": "select distinct t2.name from country as t1 join city as t2 on t2.countrycode  =  t1.code where t1.continent  =  'europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code  =  t4.countrycode where t4.isofficial  =  't' and t4.language  =  'english')",
        "db_id": "world_1"
      },
      {
        "index": 785,
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "predicted": "select name from city where country!= \"europea\"",
        "gold": "select distinct t2.name from country as t1 join city as t2 on t2.countrycode  =  t1.code where t1.continent  =  'europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code  =  t4.countrycode where t4.isofficial  =  't' and t4.language  =  'english')",
        "db_id": "world_1"
      },
      {
        "index": 786,
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "predicted": "select count(*) from city as t1 join country_language as t2 on t1.country_code = t2.country_code where t1.country_name = \"asian\" and t2.language = \"chinese\"",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 787,
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "predicted": "select distinct t1.name from city as t1 join country_language as t2 on t1.country_code = t2.country_code join country as t3 on t1.country_code = t3.id where t3.country = \"aspan\" intersect select distinct t1.name from city as t1 join country_language as t2 on t1.country_code = t2.country where t2.governor = \"chinese\"",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 788,
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "predicted": "select name, independence, surface_area from country order by population asc limit 1",
        "gold": "select name ,  surfacearea ,  indepyear from country order by population limit 1",
        "db_id": "world_1"
      },
      {
        "index": 789,
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "predicted": "select t1.name, t1.year, t1.surface_area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.population limit 1",
        "gold": "select name ,  surfacearea ,  indepyear from country order by population limit 1",
        "db_id": "world_1"
      },
      {
        "index": 790,
        "question": "What are the population, name and leader of the country with the largest area?",
        "predicted": "select t1.population, t1.name, t1.leader from country as t1 join country as t2 on t1.country_code = t2.country_code order by t2.area desc limit 1",
        "gold": "select name ,  population ,  headofstate from country order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 791,
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "predicted": "select t1.name, t1.population, t2.head_of_state from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.area desc limit 1",
        "gold": "select name ,  population ,  headofstate from country order by surfacearea desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 792,
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "predicted": "select t1.country_name, count(*) from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code having count(*) >= 3",
        "gold": "select count(t2.language) ,  t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name having count(*)  >  2",
        "db_id": "world_1"
      },
      {
        "index": 793,
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "predicted": "select t1.name, count(*) from country as t1 join country_language as t2 on t1.country_code = t2.country group by t1.country_code having count(*) > 2",
        "gold": "select count(t2.language) ,  t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name having count(*)  >  2",
        "db_id": "world_1"
      },
      {
        "index": 794,
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "predicted": "select count(*), district from city where population > (select avg(population) from city) group by district",
        "gold": "select count(*) ,  district from city where population  >  (select avg(population) from city) group by district",
        "db_id": "world_1"
      },
      {
        "index": 795,
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "predicted": "select count(*), district from city where population > (select avg(population) from city) group by district",
        "gold": "select count(*) ,  district from city where population  >  (select avg(population) from city) group by district",
        "db_id": "world_1"
      },
      {
        "index": 796,
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "predicted": "select t1.governor_name, sum(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country group by t1.governor_form having avg(t1.attendance) > 72",
        "gold": "select sum(population) ,  governmentform from country group by governmentform having avg(lifeexpectancy)  >  72",
        "db_id": "world_1"
      },
      {
        "index": 797,
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "predicted": "select government_form, sum(population) from country group by government_form having avg(life_attendance) > 72",
        "gold": "select sum(population) ,  governmentform from country group by governmentform having avg(lifeexpectancy)  >  72",
        "db_id": "world_1"
      },
      {
        "index": 798,
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "predicted": "select avg(life_attendance), sum(population), continent from country where life_ expectancy  72 group by continent",
        "gold": "select sum(population) ,  avg(lifeexpectancy) ,  continent from country group by continent having avg(lifeexpectancy)  <  72",
        "db_id": "world_1"
      },
      {
        "index": 799,
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "predicted": "select continent, sum(t1.life expectancy), avg(t1.life expectancy) from country as t1 join country as t2 on t1.country_code = t2.country group by t1.country_code having avg(t1.life expectancy)  72",
        "gold": "select sum(population) ,  avg(lifeexpectancy) ,  continent from country group by continent having avg(lifeexpectancy)  <  72",
        "db_id": "world_1"
      },
      {
        "index": 800,
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "predicted": "select t1.name, t1.area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t2.area desc limit 5",
        "gold": "select name ,  surfacearea from country order by surfacearea desc limit 5",
        "db_id": "world_1"
      },
      {
        "index": 801,
        "question": "Return the names and surface areas of the 5 largest countries.",
        "predicted": "select t1.name, t1.region_area from country as t1 join country as t2 on t1.country_code = t2.country_code order by t1.country_code desc limit 5",
        "gold": "select name ,  surfacearea from country order by surfacearea desc limit 5",
        "db_id": "world_1"
      },
      {
        "index": 805,
        "question": "Return the names of the 3 countries with the fewest people.",
        "predicted": "select t1.name from country as t1 join country as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 3",
        "gold": "select name from country order by population asc limit 3",
        "db_id": "world_1"
      },
      {
        "index": 806,
        "question": "how many countries are in Asia?",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"asia\"",
        "gold": "select count(*) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 807,
        "question": "Count the number of countries in Asia.",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country_code where t1.country_name = \"asia\"",
        "gold": "select count(*) from country where continent  =  \"asia\"",
        "db_id": "world_1"
      },
      {
        "index": 808,
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "predicted": "select name from country where continent = \"europea\" and population > 80000",
        "gold": "select name from country where continent  =  \"europe\" and population  =  \"80000\"",
        "db_id": "world_1"
      },
      {
        "index": 809,
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "predicted": "select name from country where country_code = \"europea\" and population > 80000",
        "gold": "select name from country where continent  =  \"europe\" and population  =  \"80000\"",
        "db_id": "world_1"
      },
      {
        "index": 810,
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "predicted": "select sum(t1.population), avg(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country where t2.country_name = \"north america\" and t1.population > 3000",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "db_id": "world_1"
      },
      {
        "index": 811,
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "predicted": "select sum(t1.population), avg(t1.population) from country as t1 join country as t2 on t1.country_code = t2.country_code where t2.country_area > 3000",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "db_id": "world_1"
      },
      {
        "index": 814,
        "question": "Which language is spoken by the largest number of countries?",
        "predicted": "select language from country_language group by language order by count(*) desc limit 1",
        "gold": "select language from countrylanguage group by language order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 815,
        "question": "Give the language that is spoken in the most countries.",
        "predicted": "select language from country_language group by language order by count(*) desc limit 1",
        "gold": "select language from countrylanguage group by language order by count(*) desc limit 1",
        "db_id": "world_1"
      },
      {
        "index": 816,
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "predicted": "select t2.language from country_language as t1 join country as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 1",
        "gold": "select language ,  countrycode ,  max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 817,
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "predicted": "select t1.country_code, t2.language from country as t1 join languages as t2 on t1.country_code = t2.country_code group by t1.country_code order by count(*) desc limit 1",
        "gold": "select language ,  countrycode ,  max(percentage) from countrylanguage group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 818,
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "predicted": "select count(*) from country where country = \"spain\" group by country_code order by count(*) desc limit 1",
        "gold": "select count(*) ,   max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 819,
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "predicted": "select count(*) from country as t1 join country as t2 on t1.country_code = t2.country where t1.language = \"spanish\"",
        "gold": "select count(*) ,   max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 820,
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "predicted": "select country_code from country where country = \"spain\" group by country_code order by count(*) desc limit 1",
        "gold": "select countrycode ,  max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 821,
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "predicted": "select country_code from country where language = \"spanish\" group by country_code order by count(*) desc limit 1",
        "gold": "select countrycode ,  max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode",
        "db_id": "world_1"
      },
      {
        "index": 826,
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "predicted": "select name from conductor where nationality!= \"usa\"",
        "gold": "select name from conductor where nationality != 'usa'",
        "db_id": "orchestra"
      },
      {
        "index": 827,
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "predicted": "select name from conductor where nationality!= \"usa\"",
        "gold": "select name from conductor where nationality != 'usa'",
        "db_id": "orchestra"
      },
      {
        "index": 828,
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "predicted": "select record_company from orchestra order by years_of_founded desc",
        "gold": "select record_company from orchestra order by year_of_founded desc",
        "db_id": "orchestra"
      },
      {
        "index": 829,
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "predicted": "select record_company from orchestra order by years_of_founded desc",
        "gold": "select record_company from orchestra order by year_of_founded desc",
        "db_id": "orchestra"
      },
      {
        "index": 830,
        "question": "What is the average attendance of shows?",
        "predicted": "select avg(events) from show",
        "gold": "select avg(attendance) from show",
        "db_id": "orchestra"
      },
      {
        "index": 832,
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "predicted": "select max(share), min(share) from performance where type!= \"live final\"",
        "gold": "select max(share) ,  min(share) from performance where type != \"live final\"",
        "db_id": "orchestra"
      },
      {
        "index": 833,
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "predicted": "select max(share), min(share) from performance where type!= \"live final\"",
        "gold": "select max(share) ,  min(share) from performance where type != \"live final\"",
        "db_id": "orchestra"
      },
      {
        "index": 836,
        "question": "List names of conductors in descending order of years of work.",
        "predicted": "select name from conductor order by years_of_work desc",
        "gold": "select name from conductor order by year_of_work desc",
        "db_id": "orchestra"
      },
      {
        "index": 837,
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "predicted": "select name from conductor order by years_of_work desc",
        "gold": "select name from conductor order by year_of_work desc",
        "db_id": "orchestra"
      },
      {
        "index": 838,
        "question": "List the name of the conductor with the most years of work.",
        "predicted": "select name from conductor order by years_of_work desc limit 1",
        "gold": "select name from conductor order by year_of_work desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 839,
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "predicted": "select t2.name from conductor as t1 join conductor as t2 on t1.interaction_id = t2.interaction_id join performance as t3 on t1.performance_id = t3.performance_id group by t1.name order by count(*) desc limit 1",
        "gold": "select name from conductor order by year_of_work desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 840,
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "predicted": "select t1.name, t2.name from conductor as t1 join orchestra as t2 on t1.order_id = t2.order_id join performance as t3 on t1.performance_id = t3.performance_id",
        "gold": "select t1.name ,  t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id",
        "db_id": "orchestra"
      },
      {
        "index": 841,
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "predicted": "select t1.name, t2.name from conductor as t1 join orchestra as t2 on t1.order_id = t2.order_id join performance as t3 on t1.performance_id = t3.performance_id",
        "gold": "select t1.name ,  t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id",
        "db_id": "orchestra"
      },
      {
        "index": 842,
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "predicted": "select t1.name from conductor as t1 join performance as t2 on t1.of_or_id = t2.of_id join orchestra as t3 on t1.orchester_id = t3.orchester_id group by t1.name having count(*) > 1",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id having count(*)  >  1",
        "db_id": "orchestra"
      },
      {
        "index": 843,
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "predicted": "select t1.name from conductor as t1 join performance as t2 on t1.other_id = t2.of_id join orchestra as t3 on t1.orchester_id = t3.orchester_id group by t1.name having count(*) > 1",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id having count(*)  >  1",
        "db_id": "orchestra"
      },
      {
        "index": 844,
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "predicted": "select t1.name from conductor as t1 join performance as t2 on t1.order_id = t2.order_id join orchestra as t3 on t1.order_id = t3.order_id group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 845,
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "predicted": "select t1.name from conductor as t1 join performance as t2 on t1.order = t2.order_id join orchestra as t3 on t1.order_id = t3.order_id group by t1.name order by count(*) desc limit 1",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 846,
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "predicted": "select t2.name from orchestra as t1 join conductor as t2 on t1.order = t2.order_id join performance as t3 on t1.performance_id = t3.performance_id where t1.year > 2008",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id where year_of_founded  >  2008",
        "db_id": "orchestra"
      },
      {
        "index": 847,
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "predicted": "select t2.name from orchestra as t1 join conductor as t2 on t1.order_id = t2.order_id join performance as t3 on t1.order_id = t3.order_id where t1.year > 2008",
        "gold": "select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id where year_of_founded  >  2008",
        "db_id": "orchestra"
      },
      {
        "index": 848,
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "predicted": "select comptee, count(*) from orchestra group by comptee",
        "gold": "select record_company ,  count(*) from orchestra group by record_company",
        "db_id": "orchestra"
      },
      {
        "index": 849,
        "question": "How many orchestras does each record company manage?",
        "predicted": "select t1.record_company, count(*) from orchestra as t1 join performance as t2 on t1.order_id = t2.order_id group by t1.record_company",
        "gold": "select record_company ,  count(*) from orchestra group by record_company",
        "db_id": "orchestra"
      },
      {
        "index": 850,
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "predicted": "select record_format from orchestra order by count(*) asc",
        "gold": "select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "db_id": "orchestra"
      },
      {
        "index": 851,
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "predicted": "select major from orchestra order by count(*) desc",
        "gold": "select major_record_format from orchestra group by major_record_format order by count(*) asc",
        "db_id": "orchestra"
      },
      {
        "index": 853,
        "question": "What is the record company used by the greatest number of orchestras?",
        "predicted": "select ref_company from orchestra group by ref_company order by count(*) desc limit 1",
        "gold": "select record_company from orchestra group by record_company order by count(*) desc limit 1",
        "db_id": "orchestra"
      },
      {
        "index": 854,
        "question": "List the names of orchestras that have no performance.",
        "predicted": "select name from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "gold": "select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance)",
        "db_id": "orchestra"
      },
      {
        "index": 856,
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "predicted": "select record_company from orchestra where years_of_founded  2003 intersect select record_company from orchestra where years_of_launch > 2003",
        "gold": "select record_company from orchestra where year_of_founded  <  2003 intersect select record_company from orchestra where year_of_founded  >  2003",
        "db_id": "orchestra"
      },
      {
        "index": 857,
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "predicted": "select company from orchestra where years_of_founded  2003 intersect select company from orchestra where years_of_launch > 2003",
        "gold": "select record_company from orchestra where year_of_founded  <  2003 intersect select record_company from orchestra where year_of_founded  >  2003",
        "db_id": "orchestra"
      },
      {
        "index": 858,
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "predicted": "select count(*) from orchestra where record_format = \"cd\" or record_format = \"dvd\"",
        "gold": "select count(*) from orchestra where major_record_format  =  \"cd\" or major_record_format  =  \"dvd\"",
        "db_id": "orchestra"
      },
      {
        "index": 859,
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "predicted": "select count(*) from orchestra where record_format = \"cd\" or record_format = \"dvd\"",
        "gold": "select count(*) from orchestra where major_record_format  =  \"cd\" or major_record_format  =  \"dvd\"",
        "db_id": "orchestra"
      },
      {
        "index": 860,
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "predicted": "select t1.year from orchestra as t1 join performance as t2 on t1.order = t2.order_id group by t1.order having count(*) > 1",
        "gold": "select year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id group by t2.orchestra_id having count(*)  >  1",
        "db_id": "orchestra"
      },
      {
        "index": 861,
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "predicted": "select t1.year_of_founded from orchestra as t1 join performance as t2 on t1.orchester_id = t2.orchester_id group by t1.orchester_id having count(*) > 1",
        "gold": "select year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id group by t2.orchestra_id having count(*)  >  1",
        "db_id": "orchestra"
      },
      {
        "index": 862,
        "question": "How many high schoolers are there?",
        "predicted": "select count(*) from high_schooler",
        "gold": "select count(*) from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 863,
        "question": "Count the number of high schoolers.",
        "predicted": "select count(*) from high_schooler",
        "gold": "select count(*) from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 864,
        "question": "Show the names and grades of each high schooler.",
        "predicted": "select t2.name, t2.grade from high_schooler as t1 join school as t2 on t1.schooler_id = t2.id",
        "gold": "select name ,  grade from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 865,
        "question": "What are the names and grades for each high schooler?",
        "predicted": "select name, grade from high_schooler",
        "gold": "select name ,  grade from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 866,
        "question": "Show all the grades of the high schoolers.",
        "predicted": "select distinct grade from high_schooler",
        "gold": "select grade from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 867,
        "question": "What is the grade of each high schooler?",
        "predicted": "select grade from high_schooler",
        "gold": "select grade from highschooler",
        "db_id": "network_1"
      },
      {
        "index": 868,
        "question": "What grade is Kyle in?",
        "predicted": "select distinct grade from high_schooler where name = 'kyle'",
        "gold": "select grade from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 869,
        "question": "Return the grade for the high schooler named Kyle.",
        "predicted": "select grade from high_schooler where name = 'k kyle'",
        "gold": "select grade from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 870,
        "question": "Show the names of all high schoolers in grade 10.",
        "predicted": "select name from high_schooler where grade = 10",
        "gold": "select name from highschooler where grade  =  10",
        "db_id": "network_1"
      },
      {
        "index": 871,
        "question": "What are the names of all high schoolers in grade 10?",
        "predicted": "select name from high_schooler where grade = 10",
        "gold": "select name from highschooler where grade  =  10",
        "db_id": "network_1"
      },
      {
        "index": 872,
        "question": "Show the ID of the high schooler named Kyle.",
        "predicted": "select id from high_schooler where name = 'k kyle'",
        "gold": "select id from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 873,
        "question": "What is Kyle's id?",
        "predicted": "select kyles.id from home_school as t1 join student as t2 on t1.school_id = t2.id where t2.name = 'kerry'",
        "gold": "select id from highschooler where name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 874,
        "question": "How many high schoolers are there in grade 9 or 10?",
        "predicted": "select count(*) from high_schooler where grade = 9 or grade = 10",
        "gold": "select count(*) from highschooler where grade  =  9 or grade  =  10",
        "db_id": "network_1"
      },
      {
        "index": 875,
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "predicted": "select count(*) from high_schooler where grade = 9 or grade = 10",
        "gold": "select count(*) from highschooler where grade  =  9 or grade  =  10",
        "db_id": "network_1"
      },
      {
        "index": 876,
        "question": "Show the number of high schoolers for each grade.",
        "predicted": "select grade, count(*) from high_schooler group by grade",
        "gold": "select grade ,  count(*) from highschooler group by grade",
        "db_id": "network_1"
      },
      {
        "index": 877,
        "question": "How many high schoolers are in each grade?",
        "predicted": "select grade, count(*) from high_schooler group by grade",
        "gold": "select grade ,  count(*) from highschooler group by grade",
        "db_id": "network_1"
      },
      {
        "index": 878,
        "question": "Which grade has the most high schoolers?",
        "predicted": "select distinct grade from high_schooler group by grade order by count(*) desc limit 1",
        "gold": "select grade from highschooler group by grade order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 879,
        "question": "Return the grade that has the greatest number of high schoolers.",
        "predicted": "select grade from high_schooler group by grade order by count(*) desc limit 1",
        "gold": "select grade from highschooler group by grade order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 880,
        "question": "Show me all grades that have at least 4 students.",
        "predicted": "select distinct grade from high_schooler group by grade having count(*) >= 4",
        "gold": "select grade from highschooler group by grade having count(*)  >=  4",
        "db_id": "network_1"
      },
      {
        "index": 881,
        "question": "Which grades have 4 or more high schoolers?",
        "predicted": "select distinct grade from high_schooler group by grade having count(*) >= 4",
        "gold": "select grade from highschooler group by grade having count(*)  >=  4",
        "db_id": "network_1"
      },
      {
        "index": 882,
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "predicted": "select t1.id, count(*) from student as t1 join friend as t2 on t1.stuid = t2.stuid group by t1.id",
        "gold": "select student_id ,  count(*) from friend group by student_id",
        "db_id": "network_1"
      },
      {
        "index": 883,
        "question": "How many friends does each student have?",
        "predicted": "select count(t2.friend), t1.name from student as t1 join friend as t2 on t1.stuid = t2.stuid group by t1.name",
        "gold": "select student_id ,  count(*) from friend group by student_id",
        "db_id": "network_1"
      },
      {
        "index": 884,
        "question": "Show the names of high school students and their corresponding number of friends.",
        "predicted": "select t2.name, count(*) from college as t1 join friend as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 885,
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "predicted": "select t2.name, count(*) from friends as t1 join high_schooler as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 886,
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "predicted": "select t2.name from friends as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.high_schooler order by count(*) desc limit 1",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 887,
        "question": "Return the name of the high school student with the most friends.",
        "predicted": "select t2.name from friend as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.high_schooler order by count(*) desc limit 1",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 888,
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "predicted": "select t2.name from friend as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.high_schooler having count(*) >= 3",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  3",
        "db_id": "network_1"
      },
      {
        "index": 889,
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "predicted": "select t2.name from friends as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.high_schooler having count(*) >= 3",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  3",
        "db_id": "network_1"
      },
      {
        "index": 890,
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "predicted": "select t3.name from friend as t1 join lives as t2 on t1.stuid = t2.stuid join school as t3 on t3.id = t2.friend where t1.name = 'k kyle'",
        "gold": "select t3.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id join highschooler as t3 on t1.friend_id  =  t3.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 891,
        "question": "Return the names of friends of the high school student Kyle.",
        "predicted": "select t2.name from high_school as t1 join friend as t2 on t1.school_id = t2.id join student as t3 on t3.stuid = t2.stuid where t3.name = 'k kyle'",
        "gold": "select t3.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id join highschooler as t3 on t1.friend_id  =  t3.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 892,
        "question": "How many friends does the high school student Kyle have?",
        "predicted": "select count(t2.friend) from high_school as t1 join friend as t2 on t1.school_id = t2.id join student as t3 on t3.stuid = t2.stuid where t3.name = 'k kyle'",
        "gold": "select count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 893,
        "question": "Count the number of friends Kyle has.",
        "predicted": "select count(t2.friend) from friend as t1 join friend as t2 on t1.id = t2.friend where t1.name = 'kerry'",
        "gold": "select count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 894,
        "question": "Show ids of all students who do not have any friends.",
        "predicted": "select stuid from student where id not in (select stuid from friend)",
        "gold": "select id from highschooler except select student_id from friend",
        "db_id": "network_1"
      },
      {
        "index": 895,
        "question": "What are the ids of high school students who do not have friends?",
        "predicted": "select id from high_school except select id from friend",
        "gold": "select id from highschooler except select student_id from friend",
        "db_id": "network_1"
      },
      {
        "index": 896,
        "question": "Show names of all high school students who do not have any friends.",
        "predicted": "select name from high_schooler where id not in (select high_schooler from friend)",
        "gold": "select name from highschooler except select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 897,
        "question": "What are the names of students who have no friends?",
        "predicted": "select name from student where id not in (select stuid from friends)",
        "gold": "select name from highschooler except select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 898,
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "predicted": "select t1.id from high_schooler as t1 join likes as t2 on t1.id = t2.school_id join friend as t3 on t2.friend = t3.id where t3.friend = t2.name intersect select t1.id from high_schooler as t1 join people as t2 on t1.stuid = t2.stuid",
        "gold": "select student_id from friend intersect select liked_id from likes",
        "db_id": "network_1"
      },
      {
        "index": 899,
        "question": "What are the ids of students who both have friends and are liked?",
        "predicted": "select stuid from student as t1 join likes as t2 on t1.stuid = t2.stuid where t2.friend = t2.friend except select stuid from likes as t1 join friend as t2 on t1.stuid = t2.stuid",
        "gold": "select student_id from friend intersect select liked_id from likes",
        "db_id": "network_1"
      },
      {
        "index": 900,
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.stuid = t2.stuid join friend as t3 on t3.stuid = t2.friend where t3.friend!= \"null\"",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 901,
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "predicted": "select t1.name from high_schooler as t1 join likes as t2 on t1.id = t2.school_id join friend as t3 on t2.friend = t3.id group by t2.high_schooler order by count(*) desc limit 1",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id  =  t2.id",
        "db_id": "network_1"
      },
      {
        "index": 902,
        "question": "Count the number of likes for each student id.",
        "predicted": "select count(*), stuid from likes group by stuid",
        "gold": "select student_id ,  count(*) from likes group by student_id",
        "db_id": "network_1"
      },
      {
        "index": 903,
        "question": "How many likes correspond to each student id?",
        "predicted": "select stuid, count(*) from likes group by stuid",
        "gold": "select student_id ,  count(*) from likes group by student_id",
        "db_id": "network_1"
      },
      {
        "index": 904,
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "predicted": "select t2.name, count(*) from likes as t1 join school as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 905,
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "predicted": "select t2.name, count(*) from likes as t1 join school as t2 on t1.school_id = t2.id group by t1.school_id",
        "gold": "select t2.name ,  count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id",
        "db_id": "network_1"
      },
      {
        "index": 906,
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "predicted": "select t2.name from likes as t1 join high_schooler as t2 on t1.schooler_id = t2.id group by t1.schooler order by count(*) desc limit 1",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 907,
        "question": "Give the name of the student with the most likes.",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.id = t2.stuid group by t1.stuid order by count(*) desc limit 1",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1",
        "db_id": "network_1"
      },
      {
        "index": 908,
        "question": "Show the names of students who have at least 2 likes.",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.id = t2.stuid group by t2.stuid having count(*) >= 2",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 909,
        "question": "What are the names of students who have 2 or more likes?",
        "predicted": "select t1.name from student as t1 join likes as t2 on t1.id = t2.stuid group by t2.stuid having count(*) >= 2",
        "gold": "select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 910,
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "predicted": "select t1.name from student as t1 join friend as t2 on t1.id = t2.stuid where t2.grade > 5 group by t2.stuid having count(*) >= 2",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.grade  >  5 group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 911,
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "predicted": "select t1.name from high_schooler as t1 join friends as t2 on t1.id = t2.school_id group by t1.id having count(*) > 5 intersect select t1.name from high_schooler as t1 join friends as t2 on t1.school_id = t2.school_id group by t1.high_school_id having count(*) >= 2",
        "gold": "select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.grade  >  5 group by t1.student_id having count(*)  >=  2",
        "db_id": "network_1"
      },
      {
        "index": 912,
        "question": "How many likes does Kyle have?",
        "predicted": "select count(*) from student as t1 join likes as t2 on t1.stuid = t2.stuid where t1.name = 'kerry'",
        "gold": "select count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 913,
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "predicted": "select count(*) from student as t1 join likes as t2 on t1.stuid = t2.stuid join high_schooler as t3 on t3.id = t2.high_schooler where t3.name = 'k kyle'",
        "gold": "select count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\"",
        "db_id": "network_1"
      },
      {
        "index": 914,
        "question": "Find the average grade of all students who have some friends.",
        "predicted": "select avg(t2.grade) from friends as t1 join high_schooler as t2 on t1.stuid = t2.stuid",
        "gold": "select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 915,
        "question": "What is the average grade of students who have friends?",
        "predicted": "select avg(t2.grade) from friends as t1 join high_schooler as t2 on t1.stuid = t2.stuid",
        "gold": "select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 916,
        "question": "Find the minimum grade of students who have no friends.",
        "predicted": "select min(grade) from high_schooler where id not in (select id from friends)",
        "gold": "select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 917,
        "question": "What is the lowest grade of students who do not have any friends?",
        "predicted": "select distinct grade from student where id not in (select id from friends)",
        "gold": "select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id)",
        "db_id": "network_1"
      },
      {
        "index": 918,
        "question": "Which states have both owners and professionals living there?",
        "predicted": "select state from professionals group by state having count(*) = 'owner' intersect select state from professionals",
        "gold": "select state from owners intersect select state from professionals",
        "db_id": "dog_kennels"
      },
      {
        "index": 919,
        "question": "Find the states where both owners and professionals live.",
        "predicted": "select state from professionals group by state having count(*) = 'owner' intersect select state from professionals",
        "gold": "select state from owners intersect select state from professionals",
        "db_id": "dog_kennels"
      },
      {
        "index": 920,
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "predicted": "select avg(age) from dogs where dog_id in ( select dog_id from treatments );",
        "gold": "select avg(age) from dogs where dog_id in ( select dog_id from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 921,
        "question": "Find the average age of the dogs who went through treatments.",
        "predicted": "select avg(age) from dogs where dog_id in (select dog_id from treatments)",
        "gold": "select avg(age) from dogs where dog_id in ( select dog_id from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 922,
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "predicted": "select t1.prof_id, t1.last_name, t1.cell_phone from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t1.state = \"indiana\" or t2.treatment_type_code = \"claimed\" group by t1.prof_id having count(*) > 2",
        "gold": "select professional_id ,  last_name ,  cell_number from professionals where state  =  'indiana' union select t1.professional_id ,  t1.last_name ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 923,
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "predicted": "select t1.prof_id, t1.last_name, t1.cell_phone from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t1.state = \"indiana\" group by t1.prof_id having count(*) > 2",
        "gold": "select professional_id ,  last_name ,  cell_number from professionals where state  =  'indiana' union select t1.professional_id ,  t1.last_name ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 924,
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "predicted": "select name from dogs where dogs_id not in ( select dogs_id from treatments where cost_of_treatment > 1000 )",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 925,
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "predicted": "select name from dogs where owner!= 1000",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 926,
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "predicted": "select first_name from professionals union select first_name from dogs",
        "gold": "select first_name from professionals union select first_name from owners except select name from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 927,
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "predicted": "select first_name from professionals union select first_name from dogs",
        "gold": "select first_name from professionals union select first_name from owners except select name from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 928,
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "predicted": "select professional_id, role_code, email from professionals except select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"dogs\"",
        "gold": "select professional_id ,  role_code ,  email_address from professionals except select t1.professional_id ,  t1.role_code ,  t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 929,
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "predicted": "select t1.professional_id, t1.role_code, t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"null\"",
        "gold": "select professional_id ,  role_code ,  email_address from professionals except select t1.professional_id ,  t1.role_code ,  t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 930,
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "predicted": "select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t2.first_name ,  t2.last_name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 931,
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "predicted": "select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t2.first_name ,  t2.last_name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 932,
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "predicted": "select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "gold": "select t1.professional_id ,  t1.role_code ,  t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 933,
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "predicted": "select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "gold": "select t1.professional_id ,  t1.role_code ,  t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 934,
        "question": "What is the name of the breed with the most dogs?",
        "predicted": "select breed_name from dogs group by breed_code order by count(*) desc limit 1",
        "gold": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code  =  t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 935,
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "predicted": "select breed_name from dogs group by breed_code order by count(*) desc limit 1",
        "gold": "select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code  =  t2.breed_code group by t1.breed_name order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 936,
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "predicted": "select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 937,
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "predicted": "select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1",
        "gold": "select t1.owner_id ,  t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by count(*) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 938,
        "question": "What is the description of the treatment type that costs the least money in total?",
        "predicted": "select treatment_type_description from treatments order by cost_of_treatment asc limit 1",
        "gold": "select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 939,
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "predicted": "select treatment_type_description from treatment_types group by treatment_type_code order by sum(cost_of_treatment) limit 1",
        "gold": "select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 940,
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "predicted": "select t1.owner_id, t1.zip_code from owners as t1 join charges as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t1.amount) desc limit 1",
        "gold": "select t1.owner_id ,  t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 941,
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "predicted": "select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t2.amount) desc limit 1",
        "gold": "select t1.owner_id ,  t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 942,
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "predicted": "select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "gold": "select t1.professional_id ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 943,
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "predicted": "select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2",
        "gold": "select t1.professional_id ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2",
        "db_id": "dog_kennels"
      },
      {
        "index": 944,
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "predicted": "select t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"gone\"",
        "gold": "select distinct t1.first_name ,  t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment  <  ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 945,
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "predicted": "select t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = ( select avg(treatment_type_code) from treatments )",
        "gold": "select distinct t1.first_name ,  t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment  <  ( select avg(cost_of_treatment) from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 946,
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "predicted": "select t1.date_of_treatment, t1.first_name, t1.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.treatment_id",
        "gold": "select t1.date_of_treatment ,  t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id  =  t2.professional_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 947,
        "question": "What are the date and the operating professional's first name of each treatment?",
        "predicted": "select t1.date_of_treatment, t1.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.treatment_id",
        "gold": "select t1.date_of_treatment ,  t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id  =  t2.professional_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 948,
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "predicted": "select treatment_type_code, treatment_type_description from treatments group by treatment_type_code",
        "gold": "select t1.cost_of_treatment ,  t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 949,
        "question": "What are the cost and treatment type description of each treatment?",
        "predicted": "select treatment_type_code, cost_of_treatment, treatment_type_description from treatments",
        "gold": "select t1.cost_of_treatment ,  t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 950,
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "predicted": "select t1.first_name, t1.last_name, count(*) from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id",
        "gold": "select t1.first_name ,  t1.last_name ,  t2.size_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 951,
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "predicted": "select t1.first_name, t1.last_name, count(*) from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id",
        "gold": "select t1.first_name ,  t1.last_name ,  t2.size_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 952,
        "question": "List pairs of the owner's first name and the dogs's name.",
        "predicted": "select first_name, last_name from dogs",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 953,
        "question": "What are each owner's first name and their dogs's name?",
        "predicted": "select t1.first_name, t1.last_name, t1.owner_id from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 954,
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "predicted": "select t2.name, t1.date_treatment_id from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id where t1.type_code = \"king\"",
        "gold": "select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 955,
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "predicted": "select t2.name, t1.date_treatment_date from breeds as t1 join dogs as t2 on t1.dog_id = t2.dog_id order by t1.age limit 1",
        "gold": "select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 )",
        "db_id": "dog_kennels"
      },
      {
        "index": 956,
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "predicted": "select t2.first_name, t2.last_name from pets as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = \"visa\"",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t1.state  =  'virginia'",
        "db_id": "dog_kennels"
      },
      {
        "index": 957,
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "predicted": "select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = \"visa\" and t2.name = \"horses\"",
        "gold": "select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t1.state  =  'virginia'",
        "db_id": "dog_kennels"
      },
      {
        "index": 958,
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "predicted": "select t1.date_in_country, t1.date_in_date_in_home_schooled from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "gold": "select distinct t1.date_arrived ,  t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 959,
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "predicted": "select t1.date_treatment, t1.date_treatment_id from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id",
        "gold": "select distinct t1.date_arrived ,  t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id",
        "db_id": "dog_kennels"
      },
      {
        "index": 960,
        "question": "List the last name of the owner owning the youngest dog.",
        "predicted": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t1.age limit 1",
        "gold": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t2.age  =  ( select max(age) from dogs )",
        "db_id": "dog_kennels"
      },
      {
        "index": 961,
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "predicted": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t2.age limit 1",
        "gold": "select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t2.age  =  ( select max(age) from dogs )",
        "db_id": "dog_kennels"
      },
      {
        "index": 962,
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "predicted": "select email_address from professionals where state = \"utah\" or state = \"wisconsin\"",
        "gold": "select email_address from professionals where state  =  'hawaii' or state  =  'wisconsin'",
        "db_id": "dog_kennels"
      },
      {
        "index": 963,
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "predicted": "select email_address from professionals where state = \"utah\" or state = \"wisconsin\"",
        "gold": "select email_address from professionals where state  =  'hawaii' or state  =  'wisconsin'",
        "db_id": "dog_kennels"
      },
      {
        "index": 964,
        "question": "What are the arriving date and the departing date of all the dogs?",
        "predicted": "select date_in_country, date_in_date_in_date_in_home_schooled from dogs",
        "gold": "select date_arrived ,  date_departed from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 965,
        "question": "List the arrival date and the departure date for all the dogs.",
        "predicted": "select date_in_country, date_in_date_in_home_schooled from dogs",
        "gold": "select date_arrived ,  date_departed from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 966,
        "question": "How many dogs went through any treatments?",
        "predicted": "select count(*) from dogs",
        "gold": "select count(distinct dog_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 967,
        "question": "Count the number of dogs that went through a treatment.",
        "predicted": "select count(*) from dogs",
        "gold": "select count(distinct dog_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 968,
        "question": "How many professionals have performed any treatment to dogs?",
        "predicted": "select count(*) from procedures as t1 join dogs as t2 on t1.professional_id = t2.professional_id where t2.treatment_type_code = \"dogs\"",
        "gold": "select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 969,
        "question": "Find the number of professionals who have ever treated dogs.",
        "predicted": "select count(*) from procedures as t1 join dogs as t2 on t1.professional_id = t2.professional_id",
        "gold": "select count(distinct professional_id) from treatments",
        "db_id": "dog_kennels"
      },
      {
        "index": 970,
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "predicted": "select role_code, street_city, state from professionals where city like \"%west%\"",
        "gold": "select role_code ,  street ,  city ,  state from professionals where city like '%west%'",
        "db_id": "dog_kennels"
      },
      {
        "index": 971,
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "predicted": "select role_code, street_city, state from professionals where city like \"%west%\"",
        "gold": "select role_code ,  street ,  city ,  state from professionals where city like '%west%'",
        "db_id": "dog_kennels"
      },
      {
        "index": 972,
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "predicted": "select first_name, last_name, email_address from owners where state like '%north%'",
        "gold": "select first_name ,  last_name ,  email_address from owners where state like '%north%'",
        "db_id": "dog_kennels"
      },
      {
        "index": 973,
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "predicted": "select first_name, last_name, email_address from owners where state like '%north%'",
        "gold": "select first_name ,  last_name ,  email_address from owners where state like '%north%'",
        "db_id": "dog_kennels"
      },
      {
        "index": 974,
        "question": "How many dogs have an age below the average?",
        "predicted": "select count(*) from dogs where age  ( select avg(age) from dogs)",
        "gold": "select count(*) from dogs where age  <  ( select avg(age) from dogs )",
        "db_id": "dog_kennels"
      },
      {
        "index": 975,
        "question": "Count the number of dogs of an age below the average.",
        "predicted": "select count(*) from dogs where age  ( select avg(age) from dogs)",
        "gold": "select count(*) from dogs where age  <  ( select avg(age) from dogs )",
        "db_id": "dog_kennels"
      },
      {
        "index": 976,
        "question": "How much does the most recent treatment cost?",
        "predicted": "select treatment_type_code from treatments order by date_of_treatment_cost desc limit 1",
        "gold": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 977,
        "question": "Show me the cost of the most recently performed treatment.",
        "predicted": "select treatment_type_code from treatments order by date_of_treatment desc limit 1",
        "gold": "select cost_of_treatment from treatments order by date_of_treatment desc limit 1",
        "db_id": "dog_kennels"
      },
      {
        "index": 978,
        "question": "How many dogs have not gone through any treatment?",
        "predicted": "select count(*) from dogs where dogs_id not in ( select dogs_id from treatments )",
        "gold": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 979,
        "question": "Tell me the number of dogs that have not received any treatment .",
        "predicted": "select count(*) from dogs where dogs_id not in ( select dogs_id from treatments )",
        "gold": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )",
        "db_id": "dog_kennels"
      },
      {
        "index": 984,
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "predicted": "select name, age, weight from dogs where abandoned = \"yes\" and no = \"0\"",
        "gold": "select name ,  age ,  weight from dogs where abandoned_yn  =  1",
        "db_id": "dog_kennels"
      },
      {
        "index": 985,
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "predicted": "select name, age, weight from dogs where abandoned = \"yes\" and no = \"0\"",
        "gold": "select name ,  age ,  weight from dogs where abandoned_yn  =  1",
        "db_id": "dog_kennels"
      },
      {
        "index": 988,
        "question": "What is the age of the oldest dog?",
        "predicted": "select age from dogs order by date_of_birth desc limit 1",
        "gold": "select max(age) from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 989,
        "question": "Tell me the age of the oldest dog.",
        "predicted": "select age from dogs order by date_of_birth desc limit 1",
        "gold": "select max(age) from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 990,
        "question": "How much does each charge type costs? List both charge type and amount.",
        "predicted": "select charge_type, charge_amount from charges group by charge_type",
        "gold": "select charge_type ,  charge_amount from charges",
        "db_id": "dog_kennels"
      },
      {
        "index": 991,
        "question": "List each charge type and its amount.",
        "predicted": "select charge_type, charge_amount from charges",
        "gold": "select charge_type ,  charge_amount from charges",
        "db_id": "dog_kennels"
      },
      {
        "index": 992,
        "question": "How much does the most expensive charge type costs?",
        "predicted": "select charge_amount from charges order by charge_type desc limit 1",
        "gold": "select max(charge_amount) from charges",
        "db_id": "dog_kennels"
      },
      {
        "index": 993,
        "question": "What is the charge amount of the most expensive charge type?",
        "predicted": "select charge_amount from charges order by charge_type desc limit 1",
        "gold": "select max(charge_amount) from charges",
        "db_id": "dog_kennels"
      },
      {
        "index": 994,
        "question": "List the email, cell phone and home phone of all the professionals.",
        "predicted": "select email_address, cell_number, home_phone from professionals",
        "gold": "select email_address ,  cell_number ,  home_phone from professionals",
        "db_id": "dog_kennels"
      },
      {
        "index": 995,
        "question": "What are the email, cell phone and home phone of each professional?",
        "predicted": "select email_address, cell_number, home_phone from professionals",
        "gold": "select email_address ,  cell_number ,  home_phone from professionals",
        "db_id": "dog_kennels"
      },
      {
        "index": 996,
        "question": "What are all the possible breed type and size type combinations?",
        "predicted": "select distinct t1.type_code, t1.size_code from breeds as t1 join sizes as t2 on t1. breed_code = t2. breed_code",
        "gold": "select distinct breed_code ,  size_code from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 997,
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "predicted": "select distinct t2. breed_type_code, t2.size_code from dogs as t1 join breeds as t2 on t1.dog_id = t2.dog_id",
        "gold": "select distinct breed_code ,  size_code from dogs",
        "db_id": "dog_kennels"
      },
      {
        "index": 998,
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "predicted": "select t1.first_name, t1.last_name, t2.treatment_type_code from professionals as t1 join treatments as t2 on t1.treatment_id = t2.treatment_id where t2.treatment_type_code = \"done\"",
        "gold": "select distinct t1.first_name ,  t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id join treatment_types as t3 on t2.treatment_type_code  =  t3.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 999,
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "predicted": "select t1.first_name, t1.last_name, t2.treatment_type_description from professionals as t1 join treatments as t2 on t1.treatment_id = t2.treatment_id",
        "gold": "select distinct t1.first_name ,  t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id join treatment_types as t3 on t2.treatment_type_code  =  t3.treatment_type_code",
        "db_id": "dog_kennels"
      },
      {
        "index": 1002,
        "question": "List the name of singers in ascending order of net worth.",
        "predicted": "select name from singer order by net_value asc",
        "gold": "select name from singer order by net_worth_millions asc",
        "db_id": "singer"
      },
      {
        "index": 1003,
        "question": "What are the names of singers ordered by ascending net worth?",
        "predicted": "select name from singer order by net_value asc",
        "gold": "select name from singer order by net_worth_millions asc",
        "db_id": "singer"
      },
      {
        "index": 1004,
        "question": "What are the birth year and citizenship of singers?",
        "predicted": "select birth_year, citizenship from singer",
        "gold": "select birth_year ,  citizenship from singer",
        "db_id": "singer"
      },
      {
        "index": 1005,
        "question": "What are the birth years and citizenships of the singers?",
        "predicted": "select birth_year, citizenship from singer",
        "gold": "select birth_year ,  citizenship from singer",
        "db_id": "singer"
      },
      {
        "index": 1006,
        "question": "List the name of singers whose citizenship is not \"France\".",
        "predicted": "select name from singer where citizenship!= \"france\"",
        "gold": "select name from singer where citizenship != \"france\"",
        "db_id": "singer"
      },
      {
        "index": 1007,
        "question": "What are the names of the singers who are not French citizens?",
        "predicted": "select name from singer where citizens!= \"franchise\"",
        "gold": "select name from singer where citizenship != \"france\"",
        "db_id": "singer"
      },
      {
        "index": 1010,
        "question": "What is the name of the singer with the largest net worth?",
        "predicted": "select name from singer order by net_value_millions desc limit 1",
        "gold": "select name from singer order by net_worth_millions desc limit 1",
        "db_id": "singer"
      },
      {
        "index": 1011,
        "question": "What is the name of the singer who is worth the most?",
        "predicted": "select name from singer order by profits desc limit 1",
        "gold": "select name from singer order by net_worth_millions desc limit 1",
        "db_id": "singer"
      },
      {
        "index": 1012,
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "predicted": "select citizenship, count(*) from singer group by citizenship",
        "gold": "select citizenship ,  count(*) from singer group by citizenship",
        "db_id": "singer"
      },
      {
        "index": 1013,
        "question": "For each citizenship, how many singers are from that country?",
        "predicted": "select nationality, count(*) from singer group by nationality",
        "gold": "select citizenship ,  count(*) from singer group by citizenship",
        "db_id": "singer"
      },
      {
        "index": 1015,
        "question": "What is the most common singer citizenship ?",
        "predicted": "select nationality from singer group by nationality order by count(*) desc limit 1",
        "gold": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "db_id": "singer"
      },
      {
        "index": 1016,
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "predicted": "select nationality, max(number_millions_millions_millions_millions_millions_usd) from singer group by nationality",
        "gold": "select citizenship ,  max(net_worth_millions) from singer group by citizenship",
        "db_id": "singer"
      },
      {
        "index": 1017,
        "question": "For each citizenship, what is the maximum net worth?",
        "predicted": "select max(network_millions_millions), citizenship from singer group by citizenship",
        "gold": "select citizenship ,  max(net_worth_millions) from singer group by citizenship",
        "db_id": "singer"
      },
      {
        "index": 1018,
        "question": "Show titles of songs and names of singers.",
        "predicted": "select t2.title, t2.name from singer as t1 join song as t2 on t1.songid = t2.songid",
        "gold": "select t2.title ,  t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id",
        "db_id": "singer"
      },
      {
        "index": 1019,
        "question": "What are the song titles and singer names?",
        "predicted": "select t2.title, t2.name from singer as t1 join song as t2 on t1.songid = t2.songid",
        "gold": "select t2.title ,  t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id",
        "db_id": "singer"
      },
      {
        "index": 1020,
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "predicted": "select distinct t1.name from singer as t1 join song as t2 on t1.songid = t2.songid where t2.sales > 300000",
        "gold": "select distinct t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id where t2.sales  >  300000",
        "db_id": "singer"
      },
      {
        "index": 1021,
        "question": "what are the different names of the singers that have sales more than 300000?",
        "predicted": "select distinct t1.name from singer as t1 join song as t2 on t1.songid = t2.songid where t2.sales > 300000",
        "gold": "select distinct t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id where t2.sales  >  300000",
        "db_id": "singer"
      },
      {
        "index": 1022,
        "question": "Show the names of singers that have more than one song.",
        "predicted": "select t1.name from singer as t1 join song as t2 on t1.songid = t2.songid group by t1.songid having count(*) > 1",
        "gold": "select t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.name having count(*)  >  1",
        "db_id": "singer"
      },
      {
        "index": 1023,
        "question": "What are the names of the singers that have more than one songs?",
        "predicted": "select t1.name from singer as t1 join song as t2 on t1.songid = t2.songid group by t1.songid having count(*) > 1",
        "gold": "select t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.name having count(*)  >  1",
        "db_id": "singer"
      },
      {
        "index": 1024,
        "question": "Show the names of singers and the total sales of their songs.",
        "predicted": "select t1.name, sum(t1.sales) from singer as t1 join song as t2 on t1.song_id = t2.song_id group by t1.song_id",
        "gold": "select t1.name ,  sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.name",
        "db_id": "singer"
      },
      {
        "index": 1025,
        "question": "For each singer name, what is the total sales for their songs?",
        "predicted": "select t1.name, sum(t1.sales_millions) from singer as t1 join song as t2 on t1.song_id = t2.song_id group by t1.name",
        "gold": "select t1.name ,  sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.name",
        "db_id": "singer"
      },
      {
        "index": 1027,
        "question": "What is the sname of every sing that does not have any song?",
        "predicted": "select name from singer where sex not in (select singer_id from song)",
        "gold": "select name from singer where singer_id not in (select singer_id from song)",
        "db_id": "singer"
      },
      {
        "index": 1028,
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "predicted": "select citizenship from singer where birth_year  1945 intersect select citizenship from singer where birth_year > 1955",
        "gold": "select citizenship from singer where birth_year  <  1945 intersect select citizenship from singer where birth_year  >  1955",
        "db_id": "singer"
      },
      {
        "index": 1029,
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "predicted": "select citizenship from singer where birth_year  1945 intersect select citizenship from singer where birth_year > 1955",
        "gold": "select citizenship from singer where birth_year  <  1945 intersect select citizenship from singer where birth_year  >  1955",
        "db_id": "singer"
      },
      {
        "index": 1030,
        "question": "How many available features are there in total?",
        "predicted": "select count(*) from other_features",
        "gold": "select count(*) from other_available_features",
        "db_id": "real_estate_properties"
      },
      {
        "index": 1031,
        "question": "What is the feature type name of feature AirCon?",
        "predicted": "select feature_type_name from ref_feature_types as t1 join features as t2 on t1.feature_id = t2.feature_id where t2.feature_name = \"aircon\"",
        "gold": "select t2.feature_type_name from other_available_features as t1 join ref_feature_types as t2 on t1.feature_type_code  =  t2.feature_type_code where t1.feature_name  =  \"aircon\"",
        "db_id": "real_estate_properties"
      },
      {
        "index": 1032,
        "question": "Show the property type descriptions of properties belonging to that code.",
        "predicted": "select t1.property_type_description from ref_property_types as t1 join properties as t2 on t1.property_type_code = t2.property_type_code",
        "gold": "select t2.property_type_description from properties as t1 join ref_property_types as t2 on t1.property_type_code  =  t2.property_type_code group by t1.property_type_code",
        "db_id": "real_estate_properties"
      },
      {
        "index": 1033,
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "predicted": "select property_name from properties where property_address = \"home\" union select property_name from apartments where room_count > 1",
        "gold": "select property_name from properties where property_type_code  =  \"house\" union select property_name from properties where property_type_code  =  \"apartment\" and room_count  >  1",
        "db_id": "real_estate_properties"
      }
    ]
  }
}