[
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1;",
        "db_id": "baseball_1"
    },
    {
        "question": "manufacturers COLUMNS code name headquarter founder revenue TABLE products COLUMNS code name price manufacturer Select the name of each manufacturer along with the name and price of its most expensive product.",
        "predicted_sql": "SELECT T1.Name, T2.name, max(T1.price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name",
        "ground_truth_sql": "SELECT T1.Name, max(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name",
        "db_id": "manufactory_1"
    },
    {
        "question": "class COLUMNS class code course code class section class time class room professor employee number TABLE course COLUMNS course code department code course description course credit TABLE department COLUMNS department code department name school code employee number department address department extension TABLE employee COLUMNS employee number employee last name employee first name employee initial employee job code employee hire date employee date of birth TABLE enroll COLUMNS class code student number enroll grade TABLE professor COLUMNS employee number department code professor office professor extension professor high degree TABLE student COLUMNS student num student last name student first name student init student date of birth student class hours took student class student gpa student transfer department code student phone professor number Find the first name and office of history professor who did not get a Ph.D. degree.",
        "predicted_sql": "SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree!= 'History'",
        "ground_truth_sql": "SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree!= 'Ph.D.'",
        "db_id": "college_1"
    },
    {
        "question": "movie COLUMNS movie id title year director TABLE reviewer COLUMNS reviewer id name TABLE rating COLUMNS reviewer id movie id rating stars rating date What are the ids of all reviewers who have not given 4 stars at least once?",
        "predicted_sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4",
        "ground_truth_sql": "SELECT rID FROM Rating WHERE stars!= 4",
        "db_id": "movie_1"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT T2.team_id, T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;",
        "db_id": "baseball_1"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = 'Atlanta';",
        "db_id": "baseball_1"
    },
    {
        "question": "reference document types COLUMNS document type code document type name document type description TABLE reference calendar COLUMNS calendar date day number TABLE reference locations COLUMNS location code location name location description TABLE roles COLUMNS role code role name role description TABLE all documents COLUMNS document id date stored document type code document name document description other details TABLE employees COLUMNS employee id role code employee name gender mfu date of birth other details TABLE document locations COLUMNS document id location code date in location from date in locaton to TABLE documents to be destroyed COLUMNS document id destruction authorised by employee id destroyed by employee id planned destruction date actual destruction date other details Show the id of each employee and the number of document destruction authorised by that employee.",
        "predicted_sql": "SELECT Destruction_Authorised_by_Employee_ID, count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_id",
        "ground_truth_sql": "SELECT Destruction_Authorised_by_Employee_ID, count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;",
        "db_id": "baseball_1"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT yearid, count(*) FROM hall_of_fame GROUP BY yearid;",
        "db_id": "baseball_1"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT name_first, name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998",
        "db_id": "baseball_1"
    },
    {
        "question": "document types COLUMNS document type code document description TABLE documents COLUMNS document id document type code grant id sent date response received date other details TABLE grants COLUMNS grant id organisation id grant amount grant start date grant end date other details TABLE organisation types COLUMNS organisation type organisation type description TABLE organisations COLUMNS organisation id organisation type organisation details TABLE project outcomes COLUMNS project id outcome code outcome details TABLE project staff COLUMNS staff id project id role code date from date to other details TABLE projects COLUMNS project id organisation id project details TABLE research outcomes COLUMNS outcome code outcome description TABLE research staff COLUMNS staff id employer organisation id staff details TABLE staff roles COLUMNS role code role description TABLE tasks COLUMNS task id project id task details eg agree objectives List from which date and to which date these staff work: project staff of the project which hires the most staffs",
        "predicted_sql": "SELECT date_from, date_to FROM Project_Staff WHERE role_code = 'leader' GROUP BY date_to ORDER BY count(*) DESC LIMIT 1",
        "ground_truth_sql": "SELECT date_from, date_to FROM Project_Staff WHERE project_id IN( SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY count(*) DESC LIMIT 1 ) UNION SELECT date_from, date_to FROM Project_Staff WHERE role_code = 'leader'",
        "db_id": "tracking_grants_for_research"
    },
    {
        "question": "stadium COLUMNS id name home games average attendance total attendance capacity percentage TABLE game COLUMNS stadium id id season date home team away team score competition TABLE injury accident COLUMNS game id id player injury number of matches source What are the maximum, minimum and average home games each stadium held?",
        "predicted_sql": "SELECT max(home_games), min(home_games), avg(average_attendance) FROM stadium",
        "ground_truth_sql": "SELECT max(home_games), min(home_games), avg(home_games) FROM stadium",
        "db_id": "game_injury"
    },
    {
        "question": "country COLUMNS country id country name capital official native language TABLE team COLUMNS team id name TABLE match season COLUMNS season player position country team draft pick number draft class college TABLE player COLUMNS player id player years played total wl singles wl doubles wl team Show the country names and the corresponding number of players.",
        "predicted_sql": "SELECT Country_name, COUNT(*) FROM country GROUP BY Country_name",
        "ground_truth_sql": "SELECT Country_name, COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name",
        "db_id": "match_season"
    },
    {
        "question": "attribute definitions COLUMNS attribute id attribute name attribute data type TABLE catalogs COLUMNS catalog id catalog name catalog publisher date of publication date of latest revision TABLE catalog structure COLUMNS catalog level number catalog id catalog level name TABLE catalog contents COLUMNS catalog entry id catalog level number parent entry id previous entry id next entry id catalog entry name product stock number price in dollars price in euros price in pounds capacity length height width TABLE catalog contents additional attributes COLUMNS catalog entry id catalog level number attribute id attribute value Find the entry name of the catalog with the highest price (in USD).",
        "predicted_sql": "SELECT catalog_entry_name FROM catalogs ORDER BY price_in_dollars DESC LIMIT 1",
        "ground_truth_sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "db_id": "product_catalog"
    },
    {
        "question": "products COLUMNS product id product name product price product description TABLE addresses COLUMNS address id address details city zip postcode state province county country TABLE customers COLUMNS customer id payment method customer name customer phone customer email date became customer TABLE regular orders COLUMNS regular order id distributer id TABLE regular order products COLUMNS regular order id product id TABLE actual orders COLUMNS actual order id order status code regular order id actual order date TABLE actual order products COLUMNS actual order id product id TABLE customer addresses COLUMNS customer id address id date from address type date to TABLE delivery routes COLUMNS route id route name other route details TABLE delivery route locations COLUMNS location code route id location address id location name TABLE trucks COLUMNS truck id truck licence number truck details TABLE employees COLUMNS employee id employee address id employee name employee phone TABLE order deliveries COLUMNS location code actual order id delivery status code driver employee id truck id delivery date Find the name and price of the product that has been ordered the greatest number of times.",
        "predicted_sql": "SELECT t1.product_name, t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_name ORDER BY count(*) DESC LIMIT 1",
        "ground_truth_sql": "SELECT t1.product_name, t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "customer_deliveries"
    },
    {
        "question": "workshop COLUMNS workshop id date venue name TABLE submission COLUMNS submission id scores author college TABLE acceptance COLUMNS submission id workshop id result Find the author who achieved the highest score in a submission.",
        "predicted_sql": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1",
        "ground_truth_sql": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
        "db_id": "workshop_paper"
    },
    {
        "question": "allergy type COLUMNS allergy name allergy type TABLE has allergy COLUMNS stuid allergy TABLE student COLUMNS stuid last name first name age sex major advisor city code Find the number of male (sex is 'M') students who have some food type allery.",
        "predicted_sql": "SELECT count(*) FROM Student WHERE sex = \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")",
        "ground_truth_sql": "SELECT count(*) FROM Student WHERE sex = \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")",
        "db_id": "allergy_1"
    },
    {
        "question": "reference characteristic types COLUMNS characteristic type code characteristic type description TABLE reference colors COLUMNS color code color description TABLE reference product categories COLUMNS product category code product category description unit of measure TABLE characteristics COLUMNS characteristic id characteristic type code characteristic data type characteristic name other characteristic details TABLE products COLUMNS product id color code product category code product name typical buying price typical selling price product description other product details TABLE product characteristics COLUMNS product id characteristic id product characteristic value What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "predicted_sql": "SELECT T1.product_name, T1.typical_buying_price, T1.typical_selling_price FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description = \"yellow\"",
        "ground_truth_sql": "SELECT t1.product_name, t1.typical_buying_price, t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = \"yellow\"",
        "db_id": "products_gen_characteristics"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT count(*) FROM postseason WHERE YEAR = 1885 AND ties = 1;",
        "db_id": "baseball_1"
    },
    {
        "question": "course authors and tutors COLUMNS author id author tutor atb login name password personal name middle name family name gender mf address line 1 TABLE students COLUMNS student id date of registration date of latest logon login name password personal name middle name family name TABLE subjects COLUMNS subject id subject name TABLE courses COLUMNS course id author id subject id course name course description TABLE student course enrolment COLUMNS registration id student id course id date of enrolment date of completion TABLE student tests taken COLUMNS registration id date test taken test result How many distinct students are enrolled in courses?",
        "predicted_sql": "SELECT count(course_id) FROM Student_Course_Enrolment",
        "ground_truth_sql": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment",
        "db_id": "e_learning"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT yearid, count(*) FROM hall_of_fame GROUP BY yearid;",
        "db_id": "baseball_1"
    },
    {
        "question": "grapes COLUMNS id grape color TABLE appellations COLUMNS no appelation county state area isava TABLE wine COLUMNS no grape winery appelation state name year price score cases drink What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "predicted_sql": "SELECT Name FROM WINE WHERE YEAR  (SELECT min(YEAR) FROM wine WHERE Winery = \"Brander\")",
        "ground_truth_sql": "SELECT Name FROM WINE WHERE YEAR  (SELECT min(YEAR) FROM WINE WHERE Winery = \"Brander\")",
        "db_id": "wine_1"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;",
        "db_id": "baseball_1"
    },
    {
        "question": "regions COLUMNS region id region name TABLE countries COLUMNS country id country name region id TABLE departments COLUMNS department id department name manager id location id TABLE jobs COLUMNS job id job title min salary max salary TABLE employees COLUMNS employee id first name last name email phone number hire date job id salary commission pct manager id department id TABLE job history COLUMNS employee id start date end date job id department id TABLE locations COLUMNS location id street address postal code city state province country id What are the first name and department name of all employees?",
        "predicted_sql": "SELECT T1.first_name, T1.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
        "ground_truth_sql": "SELECT T1.first_name, T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
        "db_id": "hr_1"
    },
    {
        "question": "products COLUMNS product id product name product price product description TABLE addresses COLUMNS address id address details city zip postcode state province county country TABLE customers COLUMNS customer id payment method customer name customer phone customer email date became customer TABLE regular orders COLUMNS regular order id distributer id TABLE regular order products COLUMNS regular order id product id TABLE actual orders COLUMNS actual order id order status code regular order id actual order date TABLE actual order products COLUMNS actual order id product id TABLE customer addresses COLUMNS customer id address id date from address type date to TABLE delivery routes COLUMNS route id route name other route details TABLE delivery route locations COLUMNS location code route id location address id location name TABLE trucks COLUMNS truck id truck licence number truck details TABLE employees COLUMNS employee id employee address id employee name employee phone TABLE order deliveries COLUMNS location code actual order id delivery status code driver employee id truck id delivery date Find the number of customers in total.",
        "predicted_sql": "SELECT count(*) FROM Customers",
        "ground_truth_sql": "SELECT count(*) FROM customers",
        "db_id": "customer_deliveries"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT T1.name_first, T1.name_last, T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "baseball_1"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'",
        "db_id": "baseball_1"
    },
    {
        "question": "sqlite sequence COLUMNS name seq TABLE artists COLUMNS id name TABLE albums COLUMNS id title artist id TABLE employees COLUMNS id last name first name title reports to birth date hire date address city state country postal code phone fax email TABLE customers COLUMNS id first name last name company address city state country postal code phone fax email support rep id TABLE genres COLUMNS id name TABLE invoices COLUMNS id customer id invoice date billing address billing city billing state billing country billing postal code total TABLE media types COLUMNS id name TABLE tracks COLUMNS id name album id media type id genre id composer milliseconds bytes unit price TABLE invoice lines COLUMNS id invoice id track id unit price quantity TABLE playlists COLUMNS id name TABLE playlist tracks COLUMNS playlist id track id What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?",
        "predicted_sql": "SELECT T2.Name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";",
        "ground_truth_sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";",
        "db_id": "store_1"
    },
    {
        "question": "reference document types COLUMNS document type code document type name document type description TABLE reference calendar COLUMNS calendar date day number TABLE reference locations COLUMNS location code location name location description TABLE roles COLUMNS role code role name role description TABLE all documents COLUMNS document id date stored document type code document name document description other details TABLE employees COLUMNS employee id role code employee name gender mfu date of birth other details TABLE document locations COLUMNS document id location code date in location from date in locaton to TABLE documents to be destroyed COLUMNS document id destruction authorised by employee id destroyed by employee id planned destruction date actual destruction date other details What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "predicted_sql": "SELECT T2.employee_name, T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_id = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_id = T3.employee_id;",
        "ground_truth_sql": "SELECT T2.employee_name, T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;",
        "db_id": "cre_Doc_Tracking_DB"
    },
    {
        "question": "entrepreneur COLUMNS entrepreneur id people id company money requested investor TABLE people COLUMNS people id name height weight date of birth Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "predicted_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN people AS T3 ON T1.People_ID = T3.People_ID WHERE T1.Investor!= \"Rachel Elnaugh\"",
        "ground_truth_sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor!= \"Rachel Elnaugh\"",
        "db_id": "entrepreneur"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT name_first, name_last FROM player WHERE death_year = '';",
        "db_id": "baseball_1"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1960 INTERSECT SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1961",
        "db_id": "baseball_1"
    },
    {
        "question": "addresses COLUMNS address id line 1 line 2 city zip postcode state province county country TABLE people COLUMNS person id first name middle name last name cell mobile number email address login name password TABLE students COLUMNS student id student details TABLE courses COLUMNS course id course name course description other details TABLE people addresses COLUMNS person address id person id address id date from date to TABLE student course registrations COLUMNS student id course id registration date TABLE student course attendance COLUMNS student id course id date of attendance TABLE candidates COLUMNS candidate id candidate details TABLE candidate assessments COLUMNS candidate id qualification assessment date asessment outcome code what is id of students who registered some courses but the least number of courses in these students?",
        "predicted_sql": "SELECT T1.student_id FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) LIMIT 1",
        "ground_truth_sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
        "db_id": "student_assessment"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
        "db_id": "baseball_1"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT count(*) FROM park WHERE state = 'NY';",
        "db_id": "baseball_1"
    },
    {
        "question": "list COLUMNS last name first name grade class room TABLE teachers COLUMNS last name first name class room List the first names of all the students in room 107.",
        "predicted_sql": "SELECT firstname FROM list WHERE classroom = 107",
        "ground_truth_sql": "SELECT DISTINCT firstname FROM list WHERE classroom = 107",
        "db_id": "student_1"
    },
    {
        "question": "person COLUMNS name age city gender job TABLE person friend COLUMNS name friend year What are the names of all of Alice's friends of friends?",
        "predicted_sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name JOIN PersonFriend AS T5 ON T4.friend = T4.name JOIN PersonFriend AS T5 ON T4.friend = T4.name JOIN PersonFriend AS T5 ON T4.friend = T4.name JOIN PersonFriend AS T5 ON T4.friend = T4.name JOIN PersonFriend AS T5 ON T4.friend = T4.name JOIN PersonFriend AS T5 ON T4.friend = T4.name JOIN PersonFriend AS T5 ON T4.friend = T4.name JOIN PersonFriend AS T5 ON T4.friend = T4.name JOIN PersonFriend AS T5 ON T4.friend = T4.name JOIN PersonFriend AS T5 ON T4.friend = T4.name WHERE T2.name = 'Alice' AND T4.name = 'Alice'",
        "ground_truth_sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name WHERE T2.name = 'Alice' AND T4.name!= 'Alice'",
        "db_id": "network_2"
    },
    {
        "question": "routes COLUMNS route id destination airport id destination airport source airport id source airport airline id airline code share TABLE airports COLUMNS airport id name city country x y elevation iata icao TABLE airlines COLUMNS airline id name iata icao call sign country active What is the name, city, country, and elevation for every airport in the city of New York?",
        "predicted_sql": "SELECT name, city, city, elevation FROM airports WHERE city = 'New York'",
        "ground_truth_sql": "SELECT name, city, country, elevation FROM airports WHERE city = 'New York'",
        "db_id": "flight_4"
    },
    {
        "question": "people COLUMNS people id name country is male age TABLE church COLUMNS church id name organized by open date continuation of TABLE wedding COLUMNS church id male id female id year Show the pair of male and female names in all weddings after year 2014",
        "predicted_sql": "SELECT T2.name, T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014",
        "ground_truth_sql": "SELECT T2.name, T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014",
        "db_id": "wedding"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT state FROM park GROUP BY state HAVING count(*) > 2;",
        "db_id": "baseball_1"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT T1.name, T1.team_id, max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id;",
        "db_id": "baseball_1"
    },
    {
        "question": "services COLUMNS service id service type code TABLE participants COLUMNS participant id participant type code participant details TABLE events COLUMNS event id service id event details TABLE participants in events COLUMNS event id participant id Which service id and type has the least number of participants?",
        "predicted_sql": "SELECT T3.service_id, T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN services AS T3 ON T2.service_id = T3.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
        "ground_truth_sql": "SELECT T3.service_id, T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID JOIN services AS T4 ON T3.service_id = T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
        "db_id": "local_govt_in_alabama"
    },
    {
        "question": "bank COLUMNS branch id bname no of customers city state TABLE customer COLUMNS customer id customer name account type account balance number of loans credit score branch id state TABLE loan COLUMNS loan id loan type customer id branch id amount Find the name of bank branch that provided the greatest total amount of loans.",
        "predicted_sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) DESC LIMIT 1",
        "ground_truth_sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1",
        "db_id": "loan_1"
    },
    {
        "question": "student COLUMNS student id last name first name age sex major advisor city code TABLE video games COLUMNS game id game name game type TABLE plays games COLUMNS student id game id hours played TABLE sports info COLUMNS student id sport name hours per week games played on scholarship What is the total number of hours per work and number of games played by David Shieber?",
        "predicted_sql": "SELECT sum(hoursperweek), sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = \"Daan\" AND T2.Lname = \"Shieber\"",
        "ground_truth_sql": "SELECT sum(hoursperweek), sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = \"David\" AND T2.Lname = \"Shieber\"",
        "db_id": "game_1"
    },
    {
        "question": "problem category codes COLUMNS problem category code problem category description TABLE problem log COLUMNS problem log id assigned to staff id problem id problem category code problem status code log entry date log entry description log entry fix other log details TABLE problem status codes COLUMNS problem status code problem status description TABLE product COLUMNS product id product name product details TABLE staff COLUMNS staff id staff first name staff last name other staff details TABLE problems COLUMNS problem id product id closure authorised by staff id reported by staff id date problem reported date problem closed problem description other problem details For each product which has problems, what are the number of problems and the product id?",
        "predicted_sql": "SELECT count(*), T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name",
        "ground_truth_sql": "SELECT count(*), T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "db_id": "tracking_software_problems"
    },
    {
        "question": "physician COLUMNS employee id name position ssn TABLE department COLUMNS departmentid name head TABLE affiliated with COLUMNS physician department primary affiliation TABLE procedures COLUMNS code name cost TABLE trained in COLUMNS physician treatment certification date certification expires TABLE patient COLUMNS ssn name address phone insurance id pcp TABLE nurse COLUMNS employee id name position registered ssn TABLE appointment COLUMNS appointment id patient prep nurse physician start end examination room TABLE medication COLUMNS code name brand description TABLE prescribes COLUMNS physician patient medication date appointment dose TABLE block COLUMNS block floor block code TABLE room COLUMNS roomnumber room type block floor block code unavailable TABLE on call COLUMNS nurse block floor block code oncall start oncall end TABLE stay COLUMNS stay id patient room stay start stay end TABLE undergoes COLUMNS patient procedures stay date undergoes physician assisting nurse Find the names of patients who are not using the medication of Procrastin-X.",
        "predicted_sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Code = T3.medication WHERE T3.name = 'Procrastin-X'",
        "ground_truth_sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X'",
        "db_id": "hospital_1"
    },
    {
        "question": "all star COLUMNS player id year game num game id team id league id gp starting pos TABLE appearances COLUMNS year team id league id player id g all gs g batting g defense g p g c g 1b g 2b g 3b g ss g lf g cf g rf g of g dh g ph g pr TABLE manager award COLUMNS player id award id year league id tie notes TABLE player award COLUMNS player id award id year league id tie notes TABLE manager award vote COLUMNS award id year league id player id points won points max votes first TABLE player award vote COLUMNS award id year league id player id points won points max votes first TABLE batting COLUMNS player id year stint team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE batting postseason COLUMNS year round player id team id league id g ab r h double triple hr rbi sb cs bb so ibb hbp sh sf g idp TABLE player college COLUMNS player id college id year TABLE fielding COLUMNS player id year stint team id league id pos g gs inn outs po a e dp pb wp sb cs zr TABLE fielding outfield COLUMNS player id year stint glf gcf grf TABLE fielding postseason COLUMNS player id year team id league id round pos g gs inn outs po a e dp tp pb sb",
        "predicted_sql": "SELECT sum(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000;",
        "ground_truth_sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
        "db_id": "baseball_1"
    },
    {
        "question": "addresses COLUMNS address id address details TABLE staff COLUMNS staff id staff gender staff name TABLE suppliers COLUMNS supplier id supplier name supplier phone TABLE department store chain COLUMNS department store chain id department store chain name TABLE customers COLUMNS customer id payment method code customer code customer name customer address customer phone customer email TABLE products COLUMNS product id product type code product name product price TABLE supplier addresses COLUMNS supplier id address id date from date to TABLE customer addresses COLUMNS customer id address id date from date to TABLE customer orders COLUMNS order id customer id order status code order date TABLE department stores COLUMNS department store id department store chain id store name store address store phone store email TABLE departments COLUMNS department id department store id department name TABLE order items COLUMNS order item id order id product id TABLE product suppliers COLUMNS product id supplier id date supplied from date supplied to total amount purchased total value purchased TABLE staff department assignments COLUMNS staff id department id date assigned from job title code date assigned to What are the ids and names of department stores with both marketing and managing departments?",
        "predicted_sql": "SELECT T2.dept_dept_dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"marketing\" INTERSECT SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"managing\"",
        "ground_truth_sql": "SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"marketing\" INTERSECT SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = \"managing\"",
        "db_id": "department_store"
    },
    {
        "question": "attribute definitions COLUMNS attribute id attribute name attribute data type TABLE catalogs COLUMNS catalog id catalog name catalog publisher date of publication date of latest revision TABLE catalog structure COLUMNS catalog level number catalog id catalog level name TABLE catalog contents COLUMNS catalog entry id catalog level number parent entry id previous entry id next entry id catalog entry name product stock number price in dollars price in euros price in pounds capacity length height width TABLE catalog contents additional attributes COLUMNS catalog entry id catalog level number attribute id attribute value What are the name and publication date of the catalogs with catalog level number above 5?",
        "predicted_sql": "SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_contents_Additional_Attributes AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5",
        "ground_truth_sql": "SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5",
        "db_id": "product_catalog"
    },
    {
        "question": "class COLUMNS class code course code class section class time class room professor employee number TABLE course COLUMNS course code department code course description course credit TABLE department COLUMNS department code department name school code employee number department address department extension TABLE employee COLUMNS employee number employee last name employee first name employee initial employee job code employee hire date employee date of birth TABLE enroll COLUMNS class code student number enroll grade TABLE professor COLUMNS employee number department code professor office professor extension professor high degree TABLE student COLUMNS student num student last name student first name student init student date of birth student class hours took student class student gpa student transfer department code student phone professor number Find the first names of all professors in the Accounting department who is teaching some course and the class room.",
        "predicted_sql": "SELECT T2.emp_fname, T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'",
        "ground_truth_sql": "SELECT T2.emp_fname, T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'",
        "db_id": "college_1"
    }
]